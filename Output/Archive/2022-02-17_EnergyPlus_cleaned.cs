//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnergyPlus.AdvancedConstructionSurfaceZoneConcepts
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("SurfaceProperty:HeatTransferAlgorithm")]
    [Description(@"Determines which Heat Balance Algorithm will be used for a specific surface Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    public class SurfaceProperty_HeatTransferAlgorithm
    {
        
        private void CombinedHeatAndMoistureFiniteElement;
        
        private void ConductionFiniteDifference;
        
        private void ConductionTransferFunction;
        
        private void MoisturePenetrationDepthConductionTransferFunction;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ConductionTransferFunction;
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:HeatTransferAlgorithm:MultipleSurface")]
    [Description(@"Determines which Heat Balance Algorithm will be used for a group of surface types Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    public class SurfaceProperty_HeatTransferAlgorithm_MultipleSurface
    {
        
        private void AllExteriorFloors;
        
        private void AllExteriorRoofs;
        
        private void AllExteriorSurfaces;
        
        private void AllExteriorWalls;
        
        private void AllGroundContactSurfaces;
        
        private void AllInteriorCeilings;
        
        private void AllInteriorFloors;
        
        private void AllInteriorSurfaces;
        
        private void AllInteriorWalls;
        
        private void CombinedHeatAndMoistureFiniteElement;
        
        private void ConductionFiniteDifference;
        
        private void ConductionTransferFunction;
        
        private void MoisturePenetrationDepthConductionTransferFunction;
        

[JsonProperty("surface_type")]
public SurfacetypeType surface_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ConductionTransferFunction;
        
        public enum SurfacetypeType
        {
        }
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:HeatTransferAlgorithm:SurfaceList")]
    [Description(@"Determines which Heat Balance Algorithm will be used for a list of surfaces Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    public class SurfaceProperty_HeatTransferAlgorithm_SurfaceList
    {
        
        private void CombinedHeatAndMoistureFiniteElement;
        
        private void ConductionFiniteDifference;
        
        private void ConductionTransferFunction;
        
        private void MoisturePenetrationDepthConductionTransferFunction;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ConductionTransferFunction;

[JsonProperty("surface")]
public string surface
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:HeatTransferAlgorithm:Construction")]
    [Description(@"Determines which Heat Balance Algorithm will be used for surfaces that have a specific type of construction Allows selectively overriding the global setting in HeatBalanceAlgorithm CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    public class SurfaceProperty_HeatTransferAlgorithm_Construction
    {
        
        private void CombinedHeatAndMoistureFiniteElement;
        
        private void ConductionFiniteDifference;
        
        private void ConductionTransferFunction;
        
        private void MoisturePenetrationDepthConductionTransferFunction;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ConductionTransferFunction;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:HeatBalanceSourceTerm")]
    [Description("Allows an additional heat source term to be added to the inside or outside surfac" +
        "e boundary. A heat source can be added to either or both the inside and outside " +
        "of the same surface.")]
    public class SurfaceProperty_HeatBalanceSourceTerm
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inside_face_heat_source_term_schedule_name")]
public string inside_face_heat_source_term_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_face_heat_source_term_schedule_name")]
public string outside_face_heat_source_term_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceControl:MovableInsulation")]
    [Description("Exterior or Interior Insulation on opaque surfaces")]
    public class SurfaceControl_MovableInsulation
    {
        
        private void Inside;
        
        private void Outside;
        

[JsonProperty("insulation_type")]
public InsulationtypeType insulation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum InsulationtypeType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:OtherSideCoefficients")]
    [Description("This object sets the other side conditions for a surface in a variety of ways.")]
    public class SurfaceProperty_OtherSideCoefficients
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("combined_convective_radiative_film_coefficient")]
public float combined_convective_radiative_film_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_temperature")]
public float constant_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("constant_temperature_coefficient")]
public float constant_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("external_dry_bulb_temperature_coefficient")]
public float external_dry_bulb_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ground_temperature_coefficient")]
public float ground_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("wind_speed_coefficient")]
public float wind_speed_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("zone_air_temperature_coefficient")]
public float zone_air_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("constant_temperature_schedule_name")]
public string constant_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sinusoidal_variation_of_constant_temperature_coefficient")]
public SinusoidalvariationofconstanttemperaturecoefficientType sinusoidal_variation_of_constant_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (SinusoidalvariationofconstanttemperaturecoefficientType)No;

[JsonProperty("period_of_sinusoidal_variation")]
public float period_of_sinusoidal_variation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)24;

[JsonProperty("previous_other_side_temperature_coefficient")]
public float previous_other_side_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_other_side_temperature_limit")]
public float minimum_other_side_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_other_side_temperature_limit")]
public float maximum_other_side_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Optionally used to vary Constant Temperature Coefficient with unitary sine wave")]
        public enum SinusoidalvariationofconstanttemperaturecoefficientType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:OtherSideConditionsModel")]
    [Description("This object sets up modifying the other side conditions for a surface from other " +
        "model results.")]
    public class SurfaceProperty_OtherSideConditionsModel
    {
        
        private void ConvectiveUnderwater;
        
        private void GapConvectionRadiation;
        
        private void GroundCoupledSurface;
        
        private void UndergroundPipingSystemSurface;
        

[JsonProperty("type_of_modeling")]
public TypeofmodelingType type_of_modeling
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofmodelingType)GapConvectionRadiation;
        
        [Description(@"GapConvectionRadiation provides boundary conditions for convection and linearized thermal radiation across a gap or cavity on the other side of the surface that are modeled separately. UndergroundPipingSystemSurface provides boundary conditions for surfaces in contact with PipingSystem:Underground domains GroundCoupledSurface provides boundary conditions for surfaces in contact with GroundDomain objects ConvectiveUnderwater provides a connection between a surface and an underwater boundary condition defined using a SurfaceProperty:Underwater object")]
        public enum TypeofmodelingType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:Underwater")]
    [Description("This object sets up a convective water boundary condition for a surface The free " +
        "stream temperature and velocity are scheduled. If the free stream velocity is ze" +
        "ro, the surface will naturally convect with the surrounding water.")]
    public class SurfaceProperty_Underwater
    {
        

[JsonProperty("distance_from_surface_centroid_to_leading_edge_of_boundary_layer")]
public float distance_from_surface_centroid_to_leading_edge_of_boundary_layer
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_stream_water_temperature_schedule")]
public string free_stream_water_temperature_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_stream_water_velocity_schedule")]
public string free_stream_water_velocity_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Foundation:Kiva")]
    [Description("Refined definition of the foundation surface construction used to inform two-dime" +
        "nsional heat transfer calculated using the Kiva ground heat transfer methodology" +
        ".")]
    public class Foundation_Kiva
    {
        

[JsonProperty("initial_indoor_air_temperature")]
public float initial_indoor_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interior_horizontal_insulation_material_name")]
public string interior_horizontal_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interior_horizontal_insulation_depth")]
public float interior_horizontal_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("interior_horizontal_insulation_width")]
public float interior_horizontal_insulation_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interior_vertical_insulation_material_name")]
public string interior_vertical_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interior_vertical_insulation_depth")]
public float interior_vertical_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exterior_horizontal_insulation_material_name")]
public string exterior_horizontal_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exterior_horizontal_insulation_depth")]
public float exterior_horizontal_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exterior_horizontal_insulation_width")]
public float exterior_horizontal_insulation_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("exterior_vertical_insulation_material_name")]
public string exterior_vertical_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exterior_vertical_insulation_depth")]
public float exterior_vertical_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_height_above_grade")]
public float wall_height_above_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("wall_depth_below_slab")]
public float wall_depth_below_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("footing_wall_construction_name")]
public string footing_wall_construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("footing_material_name")]
public string footing_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("footing_depth")]
public float footing_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("blocks")]
public string blocks
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Foundation:Kiva:Settings")]
    [Description("Settings applied across all Kiva foundation calculations. Object is not required." +
        " If not defined, defaults will be applied.")]
    public class Foundation_Kiva_Settings
    {
        
        private void Autoselect;
        
        private void GroundWater;
        
        private void ZeroFlux;
        
        private void Hourly;
        
        private void Timestep;
        

[JsonProperty("soil_conductivity")]
public float soil_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.73;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1842;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)419;

[JsonProperty("ground_solar_absorptivity")]
public float ground_solar_absorptivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("ground_thermal_absorptivity")]
public float ground_thermal_absorptivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("ground_surface_roughness")]
public float ground_surface_roughness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.03;

[JsonProperty("far_field_width")]
public float far_field_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;

[JsonProperty("deep_ground_boundary_condition")]
public DeepgroundboundaryconditionType deep_ground_boundary_condition
{
    get
    {
    }
    set
    {
    }
}
 = (DeepgroundboundaryconditionType)Autoselect;

[JsonProperty("deep_ground_depth")]
public string deep_ground_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("minimum_cell_dimension")]
public float minimum_cell_dimension
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02;

[JsonProperty("maximum_cell_growth_coefficient")]
public float maximum_cell_growth_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("simulation_timestep")]
public SimulationtimestepType simulation_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (SimulationtimestepType)Hourly;
        
        public enum DeepgroundboundaryconditionType
        {
        }
        
        public enum SimulationtimestepType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:ExposedFoundationPerimeter")]
    [Description(@"Defines the perimeter of a foundation floor that is exposed to the exterior environment through the floor. User may either define the total exposed perimeter, fraction of perimeter exposed or individually define which segments of the floor surface perimeter are exposed.")]
    public class SurfaceProperty_ExposedFoundationPerimeter
    {
        
        private void BySegment;
        
        private void ExposedPerimeterFraction;
        
        private void TotalExposedPerimeter;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exposed_perimeter_calculation_method")]
public ExposedperimetercalculationmethodType exposed_perimeter_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_exposed_perimeter")]
public float total_exposed_perimeter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exposed_perimeter_fraction")]
public float exposed_perimeter_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Choices: TotalExposedPerimeter => total exposed perimeter in meters ExposedPerimeterFraction => fraction of total perimeter that is exposed. Value * Fraction = Total exposed perimeter BySegment => define whether the segment between each set of consecutive vertices of the floor surface is exposed. SUM(exposed segement lengths) = Total exposed perimeter")]
        public enum ExposedperimetercalculationmethodType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Inside:AdaptiveModelSelections")]
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the inside face, the side of the surface facing a thermal zone.")]
    public class SurfaceConvectionAlgorithm_Inside_AdaptiveModelSelections
    {
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KaradagChilledCeiling;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void AwbiHattonHeatedFloor;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void KaradagChilledCeiling;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondStableHorizontal;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq5WallNearHeat;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void KaradagChilledCeiling;
        
        private void KhalifaEq7Ceiling;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondStableHorizontal;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq5WallNearHeat;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void KhalifaEq7Ceiling;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void FisherPedersenCeilingDiffuserCeiling;
        
        private void UserCurve;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void FisherPedersenCeilingDiffuserFloor;
        
        private void GoldsteinNovoselacCeilingDiffuserFloor;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void ISO15099Windows;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void AlamdariHammondStableHorizontal;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void UserCurve;
        

[JsonProperty("simple_buoyancy_vertical_wall_equation_source")]
public SimplebuoyancyverticalwallequationsourceType simple_buoyancy_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancyverticalwallequationsourceType)FohannoPolidoriVerticalWall;

[JsonProperty("simple_buoyancy_vertical_wall_user_curve_name")]
public string simple_buoyancy_vertical_wall_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_buoyancy_stable_horizontal_equation_source")]
public SimplebuoyancystablehorizontalequationsourceType simple_buoyancy_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancystablehorizontalequationsourceType)AlamdariHammondStableHorizontal;

[JsonProperty("simple_buoyancy_stable_horizontal_equation_user_curve_name")]
public string simple_buoyancy_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_buoyancy_unstable_horizontal_equation_source")]
public SimplebuoyancyunstablehorizontalequationsourceType simple_buoyancy_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancyunstablehorizontalequationsourceType)AlamdariHammondUnstableHorizontal;

[JsonProperty("simple_buoyancy_unstable_horizontal_equation_user_curve_name")]
public string simple_buoyancy_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_buoyancy_stable_tilted_equation_source")]
public SimplebuoyancystabletiltedequationsourceType simple_buoyancy_stable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancystabletiltedequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("simple_buoyancy_stable_tilted_equation_user_curve_name")]
public string simple_buoyancy_stable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_buoyancy_unstable_tilted_equation_source")]
public SimplebuoyancyunstabletiltedequationsourceType simple_buoyancy_unstable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancyunstabletiltedequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("simple_buoyancy_unstable_tilted_equation_user_curve_name")]
public string simple_buoyancy_unstable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_buoyancy_windows_equation_source")]
public SimplebuoyancywindowsequationsourceType simple_buoyancy_windows_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (SimplebuoyancywindowsequationsourceType)ISO15099Windows;

[JsonProperty("simple_buoyancy_windows_equation_user_curve_name")]
public string simple_buoyancy_windows_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_vertical_wall_equation_source")]
public FloorheatceilingcoolverticalwallequationsourceType floor_heat_ceiling_cool_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolverticalwallequationsourceType)KhalifaEq3WallAwayFromHeat;

[JsonProperty("floor_heat_ceiling_cool_vertical_wall_equation_user_curve_name")]
public string floor_heat_ceiling_cool_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_stable_horizontal_equation_source")]
public FloorheatceilingcoolstablehorizontalequationsourceType floor_heat_ceiling_cool_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolstablehorizontalequationsourceType)AlamdariHammondStableHorizontal;

[JsonProperty("floor_heat_ceiling_cool_stable_horizontal_equation_user_curve_name")]
public string floor_heat_ceiling_cool_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_unstable_horizontal_equation_source")]
public FloorheatceilingcoolunstablehorizontalequationsourceType floor_heat_ceiling_cool_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolunstablehorizontalequationsourceType)KhalifaEq4CeilingAwayFromHeat;

[JsonProperty("floor_heat_ceiling_cool_unstable_horizontal_equation_user_curve_name")]
public string floor_heat_ceiling_cool_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_heated_floor_equation_source")]
public FloorheatceilingcoolheatedfloorequationsourceType floor_heat_ceiling_cool_heated_floor_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolheatedfloorequationsourceType)AwbiHattonHeatedFloor;

[JsonProperty("floor_heat_ceiling_cool_heated_floor_equation_user_curve_name")]
public string floor_heat_ceiling_cool_heated_floor_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_chilled_ceiling_equation_source")]
public FloorheatceilingcoolchilledceilingequationsourceType floor_heat_ceiling_cool_chilled_ceiling_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolchilledceilingequationsourceType)KaradagChilledCeiling;

[JsonProperty("floor_heat_ceiling_cool_chilled_ceiling_equation_user_curve_name")]
public string floor_heat_ceiling_cool_chilled_ceiling_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_stable_tilted_equation_source")]
public FloorheatceilingcoolstabletiltedequationsourceType floor_heat_ceiling_cool_stable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolstabletiltedequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("floor_heat_ceiling_cool_stable_tilted_equation_user_curve_name")]
public string floor_heat_ceiling_cool_stable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_unstable_tilted_equation_source")]
public FloorheatceilingcoolunstabletiltedequationsourceType floor_heat_ceiling_cool_unstable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolunstabletiltedequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("floor_heat_ceiling_cool_unstable_tilted_equation_user_curve_name")]
public string floor_heat_ceiling_cool_unstable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("floor_heat_ceiling_cool_window_equation_source")]
public FloorheatceilingcoolwindowequationsourceType floor_heat_ceiling_cool_window_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (FloorheatceilingcoolwindowequationsourceType)ISO15099Windows;

[JsonProperty("floor_heat_ceiling_cool_window_equation_user_curve_name")]
public string floor_heat_ceiling_cool_window_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_vertical_wall_equation_source")]
public WallpanelheatingverticalwallequationsourceType wall_panel_heating_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingverticalwallequationsourceType)KhalifaEq6NonHeatedWalls;

[JsonProperty("wall_panel_heating_vertical_wall_equation_user_curve_name")]
public string wall_panel_heating_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_heated_wall_equation_source")]
public WallpanelheatingheatedwallequationsourceType wall_panel_heating_heated_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingheatedwallequationsourceType)AwbiHattonHeatedWall;

[JsonProperty("wall_panel_heating_heated_wall_equation_user_curve_name")]
public string wall_panel_heating_heated_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_stable_horizontal_equation_source")]
public WallpanelheatingstablehorizontalequationsourceType wall_panel_heating_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingstablehorizontalequationsourceType)AlamdariHammondStableHorizontal;

[JsonProperty("wall_panel_heating_stable_horizontal_equation_user_curve_name")]
public string wall_panel_heating_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_unstable_horizontal_equation_source")]
public WallpanelheatingunstablehorizontalequationsourceType wall_panel_heating_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingunstablehorizontalequationsourceType)KhalifaEq7Ceiling;

[JsonProperty("wall_panel_heating_unstable_horizontal_equation_user_curve_name")]
public string wall_panel_heating_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_stable_tilted_equation_source")]
public WallpanelheatingstabletiltedequationsourceType wall_panel_heating_stable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingstabletiltedequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("wall_panel_heating_stable_tilted_equation_user_curve_name")]
public string wall_panel_heating_stable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_unstable_tilted_equation_source")]
public WallpanelheatingunstabletiltedequationsourceType wall_panel_heating_unstable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingunstabletiltedequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("wall_panel_heating_unstable_tilted_equation_user_curve_name")]
public string wall_panel_heating_unstable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wall_panel_heating_window_equation_source")]
public WallpanelheatingwindowequationsourceType wall_panel_heating_window_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WallpanelheatingwindowequationsourceType)ISO15099Windows;

[JsonProperty("wall_panel_heating_window_equation_user_curve_name")]
public string wall_panel_heating_window_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_vertical_wall_equation_source")]
public ConvectivezoneheaterverticalwallequationsourceType convective_zone_heater_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterverticalwallequationsourceType)FohannoPolidoriVerticalWall;

[JsonProperty("convective_zone_heater_vertical_wall_equation_user_curve_name")]
public string convective_zone_heater_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_vertical_walls_near_heater_equation_source")]
public ConvectivezoneheaterverticalwallsnearheaterequationsourceType convective_zone_heater_vertical_walls_near_heater_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterverticalwallsnearheaterequationsourceType)KhalifaEq5WallNearHeat;

[JsonProperty("convective_zone_heater_vertical_walls_near_heater_equation_user_curve_name")]
public string convective_zone_heater_vertical_walls_near_heater_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_stable_horizontal_equation_source")]
public ConvectivezoneheaterstablehorizontalequationsourceType convective_zone_heater_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterstablehorizontalequationsourceType)AlamdariHammondStableHorizontal;

[JsonProperty("convective_zone_heater_stable_horizontal_equation_user_curve_name")]
public string convective_zone_heater_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_unstable_horizontal_equation_source")]
public ConvectivezoneheaterunstablehorizontalequationsourceType convective_zone_heater_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterunstablehorizontalequationsourceType)KhalifaEq7Ceiling;

[JsonProperty("convective_zone_heater_unstable_horizontal_equation_user_curve_name")]
public string convective_zone_heater_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_stable_tilted_equation_source")]
public ConvectivezoneheaterstabletiltedequationsourceType convective_zone_heater_stable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterstabletiltedequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("convective_zone_heater_stable_tilted_equation_user_curve_name")]
public string convective_zone_heater_stable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_unstable_tilted_equation_source")]
public ConvectivezoneheaterunstabletiltedequationsourceType convective_zone_heater_unstable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterunstabletiltedequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("convective_zone_heater_unstable_tilted_equation_user_curve_name")]
public string convective_zone_heater_unstable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convective_zone_heater_windows_equation_source")]
public ConvectivezoneheaterwindowsequationsourceType convective_zone_heater_windows_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (ConvectivezoneheaterwindowsequationsourceType)ISO15099Windows;

[JsonProperty("convective_zone_heater_windows_equation_user_curve_name")]
public string convective_zone_heater_windows_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_air_diffuser_wall_equation_source")]
public CentralairdiffuserwallequationsourceType central_air_diffuser_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (CentralairdiffuserwallequationsourceType)GoldsteinNovoselacCeilingDiffuserWalls;

[JsonProperty("central_air_diffuser_wall_equation_user_curve_name")]
public string central_air_diffuser_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_air_diffuser_ceiling_equation_source")]
public CentralairdiffuserceilingequationsourceType central_air_diffuser_ceiling_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (CentralairdiffuserceilingequationsourceType)FisherPedersenCeilingDiffuserCeiling;

[JsonProperty("central_air_diffuser_ceiling_equation_user_curve_name")]
public string central_air_diffuser_ceiling_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_air_diffuser_floor_equation_source")]
public CentralairdiffuserfloorequationsourceType central_air_diffuser_floor_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (CentralairdiffuserfloorequationsourceType)GoldsteinNovoselacCeilingDiffuserFloor;

[JsonProperty("central_air_diffuser_floor_equation_user_curve_name")]
public string central_air_diffuser_floor_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_air_diffuser_window_equation_source")]
public CentralairdiffuserwindowequationsourceType central_air_diffuser_window_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (CentralairdiffuserwindowequationsourceType)GoldsteinNovoselacCeilingDiffuserWindow;

[JsonProperty("central_air_diffuser_window_equation_user_curve_name")]
public string central_air_diffuser_window_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_vertical_wall_equation_source")]
public MechanicalzonefancirculationverticalwallequationsourceType mechanical_zone_fan_circulation_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationverticalwallequationsourceType)KhalifaEq3WallAwayFromHeat;

[JsonProperty("mechanical_zone_fan_circulation_vertical_wall_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_stable_horizontal_equation_source")]
public MechanicalzonefancirculationstablehorizontalequationsourceType mechanical_zone_fan_circulation_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationstablehorizontalequationsourceType)AlamdariHammondStableHorizontal;

[JsonProperty("mechanical_zone_fan_circulation_stable_horizontal_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_unstable_horizontal_equation_source")]
public MechanicalzonefancirculationunstablehorizontalequationsourceType mechanical_zone_fan_circulation_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationunstablehorizontalequationsourceType)KhalifaEq4CeilingAwayFromHeat;

[JsonProperty("mechanical_zone_fan_circulation_unstable_horizontal_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_stable_tilted_equation_source")]
public MechanicalzonefancirculationstabletiltedequationsourceType mechanical_zone_fan_circulation_stable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationstabletiltedequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("mechanical_zone_fan_circulation_stable_tilted_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_stable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_unstable_tilted_equation_source")]
public MechanicalzonefancirculationunstabletiltedequationsourceType mechanical_zone_fan_circulation_unstable_tilted_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationunstabletiltedequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("mechanical_zone_fan_circulation_unstable_tilted_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_unstable_tilted_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_zone_fan_circulation_window_equation_source")]
public MechanicalzonefancirculationwindowequationsourceType mechanical_zone_fan_circulation_window_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MechanicalzonefancirculationwindowequationsourceType)ISO15099Windows;

[JsonProperty("mechanical_zone_fan_circulation_window_equation_user_curve_name")]
public string mechanical_zone_fan_circulation_window_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_buoyancy_assisting_flow_on_walls_equation_source")]
public MixedregimebuoyancyassistingflowonwallsequationsourceType mixed_regime_buoyancy_assisting_flow_on_walls_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimebuoyancyassistingflowonwallsequationsourceType)BeausoleilMorrisonMixedAssistedWall;

[JsonProperty("mixed_regime_buoyancy_assisting_flow_on_walls_equation_user_curve_name")]
public string mixed_regime_buoyancy_assisting_flow_on_walls_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_buoyancy_opposing_flow_on_walls_equation_source")]
public MixedregimebuoyancyopposingflowonwallsequationsourceType mixed_regime_buoyancy_opposing_flow_on_walls_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimebuoyancyopposingflowonwallsequationsourceType)BeausoleilMorrisonMixedOpposingWall;

[JsonProperty("mixed_regime_buoyancy_opposing_flow_on_walls_equation_user_curve_name")]
public string mixed_regime_buoyancy_opposing_flow_on_walls_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_stable_floor_equation_source")]
public MixedregimestablefloorequationsourceType mixed_regime_stable_floor_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimestablefloorequationsourceType)BeausoleilMorrisonMixedStableFloor;

[JsonProperty("mixed_regime_stable_floor_equation_user_curve_name")]
public string mixed_regime_stable_floor_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_unstable_floor_equation_source")]
public MixedregimeunstablefloorequationsourceType mixed_regime_unstable_floor_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimeunstablefloorequationsourceType)BeausoleilMorrisonMixedUnstableFloor;

[JsonProperty("mixed_regime_unstable_floor_equation_user_curve_name")]
public string mixed_regime_unstable_floor_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_stable_ceiling_equation_source")]
public MixedregimestableceilingequationsourceType mixed_regime_stable_ceiling_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimestableceilingequationsourceType)BeausoleilMorrisonMixedStableCeiling;

[JsonProperty("mixed_regime_stable_ceiling_equation_user_curve_name")]
public string mixed_regime_stable_ceiling_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_unstable_ceiling_equation_source")]
public MixedregimeunstableceilingequationsourceType mixed_regime_unstable_ceiling_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimeunstableceilingequationsourceType)BeausoleilMorrisonMixedUnstableCeiling;

[JsonProperty("mixed_regime_unstable_ceiling_equation_user_curve_name")]
public string mixed_regime_unstable_ceiling_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_regime_window_equation_source")]
public MixedregimewindowequationsourceType mixed_regime_window_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (MixedregimewindowequationsourceType)GoldsteinNovoselacCeilingDiffuserWindow;

[JsonProperty("mixed_regime_window_equation_user_curve_name")]
public string mixed_regime_window_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for vertical walls")]
        public enum SimplebuoyancyverticalwallequationsourceType
        {
        }
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for horizontal surfaces " +
            "with heat flow directed for stable thermal stratification")]
        public enum SimplebuoyancystablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for passive horizontal s" +
            "urfaces with heat flow for unstable thermal stratification")]
        public enum SimplebuoyancyunstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with" +
            " heat flow for stable thermal stratification")]
        public enum SimplebuoyancystabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for tilted surfaces with" +
            " heat flow for unstable thermal stratification")]
        public enum SimplebuoyancyunstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with no HVAC or when HVAC is off This is for all window surfaces")]
        public enum SimplebuoyancywindowsequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for verti" +
            "cal walls")]
        public enum FloorheatceilingcoolverticalwallequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for passi" +
            "ve horizontal surfaces with heat flow for stable thermal stratification")]
        public enum FloorheatceilingcoolstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for passi" +
            "ve horizontal surfaces with heat flow for unstable thermal stratification")]
        public enum FloorheatceilingcoolunstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for a flo" +
            "or with active heating elements")]
        public enum FloorheatceilingcoolheatedfloorequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for a cei" +
            "ling with active cooling elements")]
        public enum FloorheatceilingcoolchilledceilingequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilte" +
            "d surfaces with heat flow for stable thermal stratification")]
        public enum FloorheatceilingcoolstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for tilte" +
            "d surfaces with heat flow for unstable thermal stratification")]
        public enum FloorheatceilingcoolunstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with in-floor heating and/or in-ceiling cooling This is for all w" +
            "indow surfaces")]
        public enum FloorheatceilingcoolwindowequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for vertical walls that are no" +
            "t actively heated")]
        public enum WallpanelheatingverticalwallequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for vertical walls that are be" +
            "ing actively heated")]
        public enum WallpanelheatingheatedwallequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for horizontal surfaces with h" +
            "eat flow directed for stable thermal stratification")]
        public enum WallpanelheatingstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for horizontal surfaces with h" +
            "eat flow directed for unstable thermal stratification")]
        public enum WallpanelheatingunstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for tilted surfaces with heat " +
            "flow for stable thermal stratification")]
        public enum WallpanelheatingstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for tilted surfaces with heat " +
            "flow for unstable thermal stratification")]
        public enum WallpanelheatingunstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with in-wall panel heating This is for all window surfaces")]
        public enum WallpanelheatingwindowequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for vertical walls not directly af" +
            "fected by heater")]
        public enum ConvectivezoneheaterverticalwallequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for vertical walls that are direct" +
            "ly affected by heater Walls are considered \"near\" when listed in field set for F" +
            "raction of Radiant Energy to Surface")]
        public enum ConvectivezoneheaterverticalwallsnearheaterequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for horizontal surfaces with heat " +
            "flow directed for stable thermal stratification")]
        public enum ConvectivezoneheaterstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for horizontal surfaces with heat " +
            "flow directed for unstable thermal stratification")]
        public enum ConvectivezoneheaterunstablehorizontalequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for tilted surfaces with heat flow" +
            " for stable thermal stratification")]
        public enum ConvectivezoneheaterstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for tilted surfaces with heat flow" +
            " for unstable thermal stratification")]
        public enum ConvectivezoneheaterunstabletiltedequationsourceType
        {
        }
        
        [Description("Applies to zone with convective heater This is for all window surfaces")]
        public enum ConvectivezoneheaterwindowsequationsourceType
        {
        }
        
        [Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
            " wall surfaces")]
        public enum CentralairdiffuserwallequationsourceType
        {
        }
        
        [Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
            " ceiling surfaces")]
        public enum CentralairdiffuserceilingequationsourceType
        {
        }
        
        [Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
            " floor surfaces")]
        public enum CentralairdiffuserfloorequationsourceType
        {
        }
        
        [Description("Applies to zone with mechanical forced central air with diffusers This is for all" +
            " window surfaces")]
        public enum CentralairdiffuserwindowequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationverticalwallequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationstablehorizontalequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationunstablehorizontalequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationstabletiltedequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationunstabletiltedequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MechanicalzonefancirculationwindowequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimebuoyancyassistingflowonwallsequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimebuoyancyopposingflowonwallsequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimestablefloorequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimeunstablefloorequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimestableceilingequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimeunstableceilingequationsourceType
        {
        }
        
        [Description("reference choice fields")]
        public enum MixedregimewindowequationsourceType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Outside:AdaptiveModelSelections")]
    [Description(@"Options to change the individual convection model equations for dynamic selection when using AdaptiveConvectiongAlgorithm This object is only needed to make changes to the default model selections for any or all of the surface categories. This object is for the outside face, the side of the surface facing away from the thermal zone.")]
    public class SurfaceConvectionAlgorithm_Outside_AdaptiveModelSelections
    {
        
        private void BlockenWindward;
        
        private void DOE2Windward;
        
        private void EmmelVertical;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWiTTWindward;
        
        private void NusseltJurges;
        
        private void SimpleCombined;
        
        private void TARPWindward;
        
        private void UserCurve;
        
        private void DOE2Leeward;
        
        private void EmmelVertical;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWiTTLeeward;
        
        private void NusseltJurges;
        
        private void SimpleCombined;
        
        private void TARPLeeward;
        
        private void UserCurve;
        
        private void BlockenWindward;
        
        private void ClearRoof;
        
        private void DOE2Windward;
        
        private void EmmelRoof;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWiTTWindward;
        
        private void NusseltJurges;
        
        private void SimpleCombined;
        
        private void TARPWindward;
        
        private void UserCurve;
        
        private void ASHRAEVerticalWall;
        
        private void AlamdariHammondVerticalWall;
        
        private void FohannoPolidoriVerticalWall;
        
        private void ISO15099Windows;
        
        private void None;
        
        private void UserCurve;
        
        private void AlamdariHammondStableHorizontal;
        
        private void None;
        
        private void UserCurve;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void None;
        
        private void UserCurve;
        
        private void WaltonUnstableHorizontalOrTilt;
        

[JsonProperty("wind_convection_windward_vertical_wall_equation_source")]
public WindconvectionwindwardverticalwallequationsourceType wind_convection_windward_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WindconvectionwindwardverticalwallequationsourceType)TARPWindward;

[JsonProperty("wind_convection_windward_equation_vertical_wall_user_curve_name")]
public string wind_convection_windward_equation_vertical_wall_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_convection_leeward_vertical_wall_equation_source")]
public WindconvectionleewardverticalwallequationsourceType wind_convection_leeward_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WindconvectionleewardverticalwallequationsourceType)TARPLeeward;

[JsonProperty("wind_convection_leeward_vertical_wall_equation_user_curve_name")]
public string wind_convection_leeward_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_convection_horizontal_roof_equation_source")]
public WindconvectionhorizontalroofequationsourceType wind_convection_horizontal_roof_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (WindconvectionhorizontalroofequationsourceType)ClearRoof;

[JsonProperty("wind_convection_horizontal_roof_user_curve_name")]
public string wind_convection_horizontal_roof_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("natural_convection_vertical_wall_equation_source")]
public NaturalconvectionverticalwallequationsourceType natural_convection_vertical_wall_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (NaturalconvectionverticalwallequationsourceType)ASHRAEVerticalWall;

[JsonProperty("natural_convection_vertical_wall_equation_user_curve_name")]
public string natural_convection_vertical_wall_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("natural_convection_stable_horizontal_equation_source")]
public NaturalconvectionstablehorizontalequationsourceType natural_convection_stable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (NaturalconvectionstablehorizontalequationsourceType)WaltonStableHorizontalOrTilt;

[JsonProperty("natural_convection_stable_horizontal_equation_user_curve_name")]
public string natural_convection_stable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("natural_convection_unstable_horizontal_equation_source")]
public NaturalconvectionunstablehorizontalequationsourceType natural_convection_unstable_horizontal_equation_source
{
    get
    {
    }
    set
    {
    }
}
 = (NaturalconvectionunstablehorizontalequationsourceType)WaltonUnstableHorizontalOrTilt;

[JsonProperty("natural_convection_unstable_horizontal_equation_user_curve_name")]
public string natural_convection_unstable_horizontal_equation_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum WindconvectionwindwardverticalwallequationsourceType
        {
        }
        
        public enum WindconvectionleewardverticalwallequationsourceType
        {
        }
        
        public enum WindconvectionhorizontalroofequationsourceType
        {
        }
        
        [Description("This is for vertical walls")]
        public enum NaturalconvectionverticalwallequationsourceType
        {
        }
        
        [Description("This is for horizontal surfaces with heat flow directed for stable thermal strati" +
            "fication")]
        public enum NaturalconvectionstablehorizontalequationsourceType
        {
        }
        
        public enum NaturalconvectionunstablehorizontalequationsourceType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Inside:UserCurve")]
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    public class SurfaceConvectionAlgorithm_Inside_UserCurve
    {
        
        private void AdjacentAirTemperature;
        
        private void MeanAirTemperature;
        
        private void SupplyAirTemperature;
        

[JsonProperty("reference_temperature_for_convection_heat_transfer")]
public ReferencetemperatureforconvectionheattransferType reference_temperature_for_convection_heat_transfer
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hc_function_of_temperature_difference_curve_name")]
public string hc_function_of_temperature_difference_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hc_function_of_temperature_difference_divided_by_height_curve_name")]
public string hc_function_of_temperature_difference_divided_by_height_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hc_function_of_air_change_rate_curve_name")]
public string hc_function_of_air_change_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hc_function_of_air_system_volume_flow_rate_divided_by_zone_perimeter_length_curve" +
    "_name")]
public string hc_function_of_air_system_volume_flow_rate_divided_by_zone_perimeter_length_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Controls which temperature is differenced from surface temperature when using the" +
            " Hc value")]
        public enum ReferencetemperatureforconvectionheattransferType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Outside:UserCurve")]
    [Description("Used to describe a custom model equation for surface convection heat transfer coe" +
        "fficient If more than one curve is referenced they are all used and added togeth" +
        "er.")]
    public class SurfaceConvectionAlgorithm_Outside_UserCurve
    {
        
        private void HeightAdjust;
        
        private void ParallelComponent;
        
        private void ParallelComponentHeightAdjust;
        
        private void WeatherFile;
        

[JsonProperty("wind_speed_type_for_curve")]
public WindspeedtypeforcurveType wind_speed_type_for_curve
{
    get
    {
    }
    set
    {
    }
}
 = (WindspeedtypeforcurveType)HeightAdjust;

[JsonProperty("hf_function_of_wind_speed_curve_name")]
public string hf_function_of_wind_speed_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hn_function_of_temperature_difference_curve_name")]
public string hn_function_of_temperature_difference_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hn_function_of_temperature_difference_divided_by_height_curve_name")]
public string hn_function_of_temperature_difference_divided_by_height_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum WindspeedtypeforcurveType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:ConvectionCoefficients")]
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    public class SurfaceProperty_ConvectionCoefficients
    {
        
        private void Inside;
        
        private void Outside;
        
        private void ASHRAEVerticalWall;
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void AlamdariHammondStableHorizontal;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedFloor;
        
        private void AwbiHattonHeatedWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void ClearRoof;
        
        private void DOE-2;
        
        private void EmmelRoof;
        
        private void EmmelVertical;
        
        private void FisherPedersenCeilingDiffuserCeiling;
        
        private void FisherPedersenCeilingDiffuserFloor;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserFloor;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void KaradagChilledCeiling;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void KhalifaEq5WallNearHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void KhalifaEq7Ceiling;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWitt;
        
        private void NusseltJurges;
        
        private void Schedule;
        
        private void Simple;
        
        private void SimpleCombined;
        
        private void TARP;
        
        private void UserCurve;
        
        private void Value;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void Inside;
        
        private void Outside;
        
        private void ASHRAEVerticalWall;
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void AlamdariHammondStableHorizontal;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedFloor;
        
        private void AwbiHattonHeatedWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void ClearRoof;
        
        private void DOE-2;
        
        private void EmmelRoof;
        
        private void EmmelVertical;
        
        private void FisherPedersenCeilingDiffuserCeiling;
        
        private void FisherPedersenCeilingDiffuserFloor;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserFloor;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void KaradagChilledCeiling;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void KhalifaEq5WallNearHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void KhalifaEq7Ceiling;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWitt;
        
        private void NusseltJurges;
        
        private void Schedule;
        
        private void Simple;
        
        private void SimpleCombined;
        
        private void TARP;
        
        private void UserCurve;
        
        private void Value;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void WaltonUnstableHorizontalOrTilt;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_location")]
public ConvectioncoefficientlocationType convection_coefficient_1_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_type")]
public ConvectioncoefficienttypeType convection_coefficient_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1")]
public float convection_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_schedule_name")]
public string convection_coefficient_1_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_user_curve_name")]
public string convection_coefficient_1_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_location")]
public ConvectioncoefficientlocationType convection_coefficient_2_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_type")]
public ConvectioncoefficienttypeType convection_coefficient_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2")]
public float convection_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("convection_coefficient_2_schedule_name")]
public string convection_coefficient_2_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_user_curve_name")]
public string convection_coefficient_2_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ConvectioncoefficientlocationType
        {
        }
        
        public enum ConvectioncoefficienttypeType
        {
        }
        
        public enum ConvectioncoefficientlocationType
        {
        }
        
        public enum ConvectioncoefficienttypeType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:ConvectionCoefficients:MultipleSurface")]
    [Description(@"Allow user settable interior and/or exterior convection coefficients. Note that some other factors may limit the lower bounds for these values, such as for windows, the interior convection coefficient must be >.28, for trombe wall algorithm selection (zone), the interior convection coefficient must be >.1 for TARP interior convection, the lower limit is also .1 Minimum and maximum limits are set in HeatBalanceAlgorithm object. Defaults in HeatBalanceAlgorithm object are [.1,1000].")]
    public class SurfaceProperty_ConvectionCoefficients_MultipleSurface
    {
        
        private void AllExteriorFloors;
        
        private void AllExteriorRoofs;
        
        private void AllExteriorSurfaces;
        
        private void AllExteriorWalls;
        
        private void AllExteriorWindows;
        
        private void AllInteriorCeilings;
        
        private void AllInteriorFloors;
        
        private void AllInteriorSurfaces;
        
        private void AllInteriorWalls;
        
        private void AllInteriorWindows;
        
        private void Inside;
        
        private void Outside;
        
        private void ASHRAEVerticalWall;
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void AlamdariHammondStableHorizontal;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedFloor;
        
        private void AwbiHattonHeatedWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void BlockenWindard;
        
        private void ClearRoof;
        
        private void DOE-2;
        
        private void EmmelRoof;
        
        private void EmmelVertical;
        
        private void FisherPedersenCeilingDiffuserCeiling;
        
        private void FisherPedersenCeilingDiffuserFloor;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserFloor;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void KaradagChilledCeiling;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void KhalifaEq5WallNearHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void KhalifaEq7Ceiling;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWitt;
        
        private void NusseltJurges;
        
        private void Schedule;
        
        private void Simple;
        
        private void SimpleCombined;
        
        private void TARP;
        
        private void UserCurve;
        
        private void Value;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void WaltonUnstableHorizontalOrTilt;
        
        private void Inside;
        
        private void Outside;
        
        private void ASHRAEVerticalWall;
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void AlamdariHammondStableHorizontal;
        
        private void AlamdariHammondUnstableHorizontal;
        
        private void AlamdariHammondVerticalWall;
        
        private void AwbiHattonHeatedFloor;
        
        private void AwbiHattonHeatedWall;
        
        private void BeausoleilMorrisonMixedAssistedWall;
        
        private void BeausoleilMorrisonMixedOpposingWall;
        
        private void BeausoleilMorrisonMixedStableCeiling;
        
        private void BeausoleilMorrisonMixedStableFloor;
        
        private void BeausoleilMorrisonMixedUnstableCeiling;
        
        private void BeausoleilMorrisonMixedUnstableFloor;
        
        private void BlockenWindard;
        
        private void ClearRoof;
        
        private void DOE-2;
        
        private void EmmelRoof;
        
        private void EmmelVertical;
        
        private void FisherPedersenCeilingDiffuserCeiling;
        
        private void FisherPedersenCeilingDiffuserFloor;
        
        private void FisherPedersenCeilingDiffuserWalls;
        
        private void FohannoPolidoriVerticalWall;
        
        private void GoldsteinNovoselacCeilingDiffuserFloor;
        
        private void GoldsteinNovoselacCeilingDiffuserWalls;
        
        private void GoldsteinNovoselacCeilingDiffuserWindow;
        
        private void ISO15099Windows;
        
        private void KaradagChilledCeiling;
        
        private void KhalifaEq3WallAwayFromHeat;
        
        private void KhalifaEq4CeilingAwayFromHeat;
        
        private void KhalifaEq5WallNearHeat;
        
        private void KhalifaEq6NonHeatedWalls;
        
        private void KhalifaEq7Ceiling;
        
        private void McAdams;
        
        private void Mitchell;
        
        private void MoWitt;
        
        private void NusseltJurges;
        
        private void Schedule;
        
        private void Simple;
        
        private void SimpleCombined;
        
        private void TARP;
        
        private void UserCurve;
        
        private void Value;
        
        private void WaltonStableHorizontalOrTilt;
        
        private void WaltonUnstableHorizontalOrTilt;
        

[JsonProperty("surface_type")]
public SurfacetypeType surface_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_location")]
public ConvectioncoefficientlocationType convection_coefficient_1_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_type")]
public ConvectioncoefficienttypeType convection_coefficient_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1")]
public float convection_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_schedule_name")]
public string convection_coefficient_1_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_1_user_curve_name")]
public string convection_coefficient_1_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_location")]
public ConvectioncoefficientlocationType convection_coefficient_2_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_type")]
public ConvectioncoefficienttypeType convection_coefficient_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2")]
public float convection_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("convection_coefficient_2_schedule_name")]
public string convection_coefficient_2_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convection_coefficient_2_user_curve_name")]
public string convection_coefficient_2_user_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SurfacetypeType
        {
        }
        
        public enum ConvectioncoefficientlocationType
        {
        }
        
        public enum ConvectioncoefficienttypeType
        {
        }
        
        public enum ConvectioncoefficientlocationType
        {
        }
        
        public enum ConvectioncoefficienttypeType
        {
        }
    }
    
    [JsonProperty("SurfaceProperties:VaporCoefficients")]
    [Description(@"The interior and external vapor transfer coefficients. Normally these value are calculated using the heat convection coefficient values. Use this object to used fixed constant values. Units are kg/Pa.s.m2 This will only work with the CombinedHeatAndMoistureFiniteElement algorithm for surfaces. Other algorithms will ignore these coefficients")]
    public class SurfaceProperties_VaporCoefficients
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_external_vapor_transfer_coefficient")]
public ConstantexternalvaportransfercoefficientType constant_external_vapor_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (ConstantexternalvaportransfercoefficientType)No;

[JsonProperty("external_vapor_coefficient_value")]
public float external_vapor_coefficient_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("constant_internal_vapor_transfer_coefficient")]
public ConstantinternalvaportransfercoefficientType constant_internal_vapor_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (ConstantinternalvaportransfercoefficientType)No;

[JsonProperty("internal_vapor_coefficient_value")]
public float internal_vapor_coefficient_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ConstantexternalvaportransfercoefficientType
        {
        }
        
        public enum ConstantinternalvaportransfercoefficientType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:ExteriorNaturalVentedCavity")]
    [Description("Used to describe the decoupled layer, or baffle, and the characteristics of the c" +
        "avity and openings for naturally ventilated exterior surfaces. This object is al" +
        "so used in conjunction with the OtherSideConditionsModel.")]
    public class SurfaceProperty_ExteriorNaturalVentedCavity
    {
        
        private void MediumRough;
        
        private void MediumSmooth;
        
        private void Rough;
        
        private void Smooth;
        
        private void VeryRough;
        
        private void VerySmooth;
        

[JsonProperty("boundary_conditions_model_name")]
public string boundary_conditions_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("area_fraction_of_openings")]
public float area_fraction_of_openings
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_emissivity_of_exterior_baffle_material")]
public float thermal_emissivity_of_exterior_baffle_material
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_absorbtivity_of_exterior_baffle")]
public float solar_absorbtivity_of_exterior_baffle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_scale_for_buoyancy_driven_ventilation")]
public float height_scale_for_buoyancy_driven_ventilation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_thickness_of_cavity_behind_exterior_baffle")]
public float effective_thickness_of_cavity_behind_exterior_baffle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ratio_of_actual_surface_area_to_projected_surface_area")]
public float ratio_of_actual_surface_area_to_projected_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("roughness_of_exterior_surface")]
public RoughnessofexteriorsurfaceType roughness_of_exterior_surface
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effectiveness_for_perforations_with_respect_to_wind")]
public float effectiveness_for_perforations_with_respect_to_wind
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow")]
public float discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("surface")]
public string surface
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum RoughnessofexteriorsurfaceType
        {
        }
    }
    
    [JsonProperty("SurfaceProperty:SolarIncidentInside")]
    [Description("Used to provide incident solar radiation on the inside of the surface. Reference " +
        "surface-construction pair and if that pair is used in a simulation, then program" +
        " will use value provided in schedule instead of calculating it.")]
    public class SurfaceProperty_SolarIncidentInside
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inside_surface_incident_sun_solar_radiation_schedule_name")]
public string inside_surface_incident_sun_solar_radiation_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceProperty:LocalEnvironment")]
    [Description("This object defines the local environment properties of an exterior surface. One " +
        "or more environment properties have to be defined and linked to the exterior sur" +
        "face.")]
    public class SurfaceProperty_LocalEnvironment
    {
        

[JsonProperty("exterior_surface_name")]
public string exterior_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_shading_fraction_schedule_name")]
public string external_shading_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surrounding_surfaces_object_name")]
public string surrounding_surfaces_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneProperty:LocalEnvironment")]
    [Description("This object defines the local environment properties of a zone object. A correspo" +
        "nding outdoor air node should be defined and linked to the zone object.")]
    public class ZoneProperty_LocalEnvironment
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceProperty:SurroundingSurfaces")]
    [Description("This object defines a list of surrounding surfaces for an exterior surface.")]
    public class SurfaceProperty_SurroundingSurfaces
    {
        

[JsonProperty("sky_view_factor")]
public float sky_view_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("sky_temperature_schedule_name")]
public string sky_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ground_view_factor")]
public float ground_view_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("ground_temperature_schedule_name")]
public string ground_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ComplexFenestrationProperty:SolarAbsorbedLayers")]
    [Description("Used to provide solar radiation absorbed in fenestration layers. References surfa" +
        "ce-construction pair and if that pair is used in a simulation, then program will" +
        " use value provided in schedules instead of calculating it.")]
    public class ComplexFenestrationProperty_SolarAbsorbedLayers
    {
        

[JsonProperty("fenestration_surface")]
public string fenestration_surface
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_1_solar_radiation_absorbed_schedule_name")]
public string layer_1_solar_radiation_absorbed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2_solar_radiation_absorbed_schedule_name")]
public string layer_2_solar_radiation_absorbed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3_solar_radiation_absorbed_schedule_name")]
public string layer_3_solar_radiation_absorbed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4_solar_radiation_absorbed_schedule_name")]
public string layer_4_solar_radiation_absorbed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5_solar_radiation_absorbed_schedule_name")]
public string layer_5_solar_radiation_absorbed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneProperty:UserViewFactors:BySurfaceName")]
    [Description("View factors for Surface to Surface in a zone. (Number of Surfaces)**2 are expect" +
        "ed. Any omitted surface pairs will be assumed to have a view factor of zero.")]
    public class ZoneProperty_UserViewFactors_BySurfaceName
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("view_factors")]
public string view_factors
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.AirDistribution
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AirLoopHVAC")]
    [Description("Defines a central forced air system.")]
    public class AirLoopHVAC
    {
        

[JsonProperty("controller_list_name")]
public string controller_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_supply_air_flow_rate")]
public string design_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("branch_list_name")]
public string branch_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("connector_list_name")]
public string connector_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_side_inlet_node_name")]
public string supply_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_outlet_node_name")]
public string demand_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_inlet_node_names")]
public string demand_side_inlet_node_names
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_side_outlet_node_names")]
public string supply_side_outlet_node_names
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_return_air_flow_fraction_of_supply_air_flow")]
public float design_return_air_flow_fraction_of_supply_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("AirLoopHVAC:OutdoorAirSystem:EquipmentList")]
    [Description("List equipment in simulation order")]
    public class AirLoopHVAC_OutdoorAirSystem_EquipmentList
    {
        

[JsonProperty("component_1_object_type")]
public string component_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_name")]
public string component_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_object_type")]
public string component_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_name")]
public string component_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_object_type")]
public string component_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_name")]
public string component_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_object_type")]
public string component_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_name")]
public string component_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_object_type")]
public string component_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_name")]
public string component_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_object_type")]
public string component_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_name")]
public string component_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_object_type")]
public string component_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_name")]
public string component_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_object_type")]
public string component_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_name")]
public string component_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_object_type")]
public string component_9_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_name")]
public string component_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:OutdoorAirSystem")]
    [Description(@"Outdoor air subsystem for an AirLoopHVAC. Includes an outdoor air mixing box and optional outdoor air conditioning equipment such as heat recovery, preheat, and precool coils. From the perspective of the primary air loop the outdoor air system is treated as a single component.")]
    public class AirLoopHVAC_OutdoorAirSystem
    {
        

[JsonProperty("controller_list_name")]
public string controller_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_equipment_list_name")]
public string outdoor_air_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("OutdoorAir:Mixer")]
    [Description("Outdoor air mixer. Node names cannot be duplicated within a single OutdoorAir:Mix" +
        "er object or across all outdoor air mixers.")]
    public class OutdoorAir_Mixer
    {
        

[JsonProperty("mixed_air_node_name")]
public string mixed_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_stream_node_name")]
public string outdoor_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relief_air_stream_node_name")]
public string relief_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_stream_node_name")]
public string return_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:ZoneSplitter")]
    [Description("Split one air stream into N outlet streams (currently 500 per air loop, but exten" +
        "sible). Node names cannot be duplicated within a single zone splitter (AirLoopHV" +
        "AC:ZoneSplitter) list.")]
    public class AirLoopHVAC_ZoneSplitter
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:SupplyPlenum")]
    [Description("Connects 1 zone inlet air stream, through zone supply plenum, to one or more outl" +
        "ets. Node names cannot be duplicated within a single supply plenum list.")]
    public class AirLoopHVAC_SupplyPlenum
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:SupplyPath")]
    [Description("A supply path can only contain AirLoopHVAC:ZoneSplitter and AirLoopHVAC:SupplyPle" +
        "num objects which may be in series or parallel.")]
    public class AirLoopHVAC_SupplyPath
    {
        

[JsonProperty("supply_air_path_inlet_node_name")]
public string supply_air_path_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("components")]
public string components
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:ZoneMixer")]
    [Description("Mix N inlet air streams into one (currently 500 per air loop, but extensible). No" +
        "de names cannot be duplicated within a single zone mixer (AirLoopHVAC:ZoneMixer)" +
        " list.")]
    public class AirLoopHVAC_ZoneMixer
    {
        

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:ReturnPlenum")]
    [Description("Connects N zone inlet air streams, through zone return plenum, to outlet (current" +
        "ly 500 per air loop) Node names cannot be duplicated within a single plenum list" +
        ".")]
    public class AirLoopHVAC_ReturnPlenum
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("induced_air_outlet_node_or_nodelist_name")]
public string induced_air_outlet_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:ReturnPath")]
    [Description("A return air path can only contain one AirLoopHVAC:ZoneMixer and one or more AirL" +
        "oopHVAC:ReturnPlenum objects.")]
    public class AirLoopHVAC_ReturnPath
    {
        

[JsonProperty("return_air_path_outlet_node_name")]
public string return_air_path_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("components")]
public string components
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:DedicatedOutdoorAirSystem")]
    [Description("Defines a central forced air system to provide dedicated outdoor air to multiple " +
        "AirLoopHVACs.")]
    public class AirLoopHVAC_DedicatedOutdoorAirSystem
    {
        

[JsonProperty("airloophvac_outdoorairsystem_name")]
public string airloophvac_outdoorairsystem_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airloophvac_mixer_name")]
public string airloophvac_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airloophvac_splitter_name")]
public string airloophvac_splitter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_design_temperature")]
public float preheat_design_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_design_humidity_ratio")]
public float preheat_design_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("precool_design_temperature")]
public float precool_design_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("precool_design_humidity_ratio")]
public float precool_design_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_airloophvac")]
public float number_of_airloophvac
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airloophvacs")]
public string airloophvacs
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:Mixer")]
    [Description(@"Mix N inlet air streams from Relief Air Stream Node in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem into one (currently 10 as default, but extensible). Node names cannot be duplicated within a single mixer list.")]
    public class AirLoopHVAC_Mixer
    {
        

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirLoopHVAC:Splitter")]
    [Description(@"Split one air stream from AirLoopHVAC:DedicatedOutdoorAirSystem outlet node into N outlet streams (currently 10 as default, but extensible). Node names should be Outdoor Air Stream Node Name in OutdoorAir:Mixer objects served by AirLoopHVAC objects listed in AirLoopHVAC:DedicatedOutdoorAirSystem.")]
    public class AirLoopHVAC_Splitter
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.AirflowNetwork
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AirflowNetwork:SimulationControl")]
    [Description("This object defines the global parameters used in an Airflow Network simulation.")]
    public class AirflowNetwork_SimulationControl
    {
        
        private void MultizoneWithDistribution;
        
        private void MultizoneWithDistributionOnlyDuringFanOperation;
        
        private void MultizoneWithoutDistribution;
        
        private void NoMultizoneOrDistribution;
        
        private void Input;
        
        private void SurfaceAverageCalculation;
        
        private void ExternalNode;
        
        private void OpeningHeight;
        
        private void HighRise;
        
        private void LowRise;
        
        private void LinearInitializationMethod;
        
        private void ZeroNodePressures;
        
        private void No;
        
        private void Yes;
        
        private void ConjugateGradient;
        
        private void SkylineLU;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("airflownetwork_control")]
public AirflownetworkcontrolType airflownetwork_control
{
    get
    {
    }
    set
    {
    }
}
 = (AirflownetworkcontrolType)NoMultizoneOrDistribution;

[JsonProperty("wind_pressure_coefficient_type")]
public WindpressurecoefficienttypeType wind_pressure_coefficient_type
{
    get
    {
    }
    set
    {
    }
}
 = (WindpressurecoefficienttypeType)SurfaceAverageCalculation;

[JsonProperty("height_selection_for_local_wind_pressure_calculation")]
public HeightselectionforlocalwindpressurecalculationType height_selection_for_local_wind_pressure_calculation
{
    get
    {
    }
    set
    {
    }
}
 = (HeightselectionforlocalwindpressurecalculationType)OpeningHeight;

[JsonProperty("building_type")]
public BuildingtypeType building_type
{
    get
    {
    }
    set
    {
    }
}
 = (BuildingtypeType)LowRise;

[JsonProperty("maximum_number_of_iterations")]
public float maximum_number_of_iterations
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("initialization_type")]
public InitializationtypeType initialization_type
{
    get
    {
    }
    set
    {
    }
}
 = (InitializationtypeType)ZeroNodePressures;

[JsonProperty("relative_airflow_convergence_tolerance")]
public float relative_airflow_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0001;

[JsonProperty("absolute_airflow_convergence_tolerance")]
public float absolute_airflow_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("convergence_acceleration_limit")]
public float convergence_acceleration_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-0.5;

[JsonProperty("azimuth_angle_of_long_axis_of_building")]
public float azimuth_angle_of_long_axis_of_building
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_building_width_along_short_axis_to_width_along_long_axis")]
public float ratio_of_building_width_along_short_axis_to_width_along_long_axis
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("height_dependence_of_external_node_temperature")]
public HeightdependenceofexternalnodetemperatureType height_dependence_of_external_node_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (HeightdependenceofexternalnodetemperatureType)No;

[JsonProperty("solver")]
public SolverType solver
{
    get
    {
    }
    set
    {
    }
}
 = (SolverType)SkylineLU;

[JsonProperty("allow_unsupported_zone_equipment")]
public AllowunsupportedzoneequipmentType allow_unsupported_zone_equipment
{
    get
    {
    }
    set
    {
    }
}
 = (AllowunsupportedzoneequipmentType)No;
        
        [Description(@"NoMultizoneOrDistribution: Only perform Simple calculations (objects ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing, ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower); MultizoneWithoutDistribution: Use AirflowNetwork objects to simulate multizone Airflows driven by wind during simulation time, and objects of ZoneInfiltration:*, ZoneVentilation:*, ZoneMixing, ZoneCrossMixing ZoneRefrigerationDoorMixing, ZoneAirBalance:OutdoorAir, ZoneEarthtube, ZoneThermalChimney, and ZoneCoolTower:Shower are ignored; MultizoneWithDistributionOnlyDuringFanOperation: Perform distribution system calculations during system fan on time and Simple calculations during system Fan off time; MultizoneWithDistribution: Perform distribution system calculations during system fan on time and multizone Airflow driven by wind during system fan off time.")]
        public enum AirflownetworkcontrolType
        {
        }
        
        [Description(@"Input: User must enter AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects. SurfaceAverageCalculation: used only for rectangular buildings. If SurfaceAverageCalculation is selected, AirflowNetwork:MultiZone:WindPressureCoefficientArray, AirflowNetwork:MultiZone:ExternalNode, and AirflowNetwork:MultiZone:WindPressureCoefficientValues objects are not used.")]
        public enum WindpressurecoefficienttypeType
        {
        }
        
        [Description(@"If ExternalNode is selected, the height given in the AirflowNetwork:MultiZone:ExternalNode object will be used. If OpeningHeight is selected, the surface opening height (centroid) will be used to calculate local wind pressure This field is ignored when the choice of the Wind Pressure Coefficient Type field is SurfaceAverageCalculation.")]
        public enum HeightselectionforlocalwindpressurecalculationType
        {
        }
        
        [Description("Used only if Wind Pressure Coefficient Type = SurfaceAverageCalculation, otherwis" +
            "e this field may be left blank.")]
        public enum BuildingtypeType
        {
        }
        
        public enum InitializationtypeType
        {
        }
        
        [Description("If Yes, external node temperature is height dependent. If No, external node tempe" +
            "rature is based on zero height.")]
        public enum HeightdependenceofexternalnodetemperatureType
        {
        }
        
        [Description("Select the solver to use for the pressure network solution")]
        public enum SolverType
        {
        }
        
        [Description(@"Set this input to Yes to have zone equipment that are currently unsupported in the AirflowNetwork model allowed in the simulation if present. Setting this field to Yes, allows the following equipments to be modeled along an AirflowNetwork model: ZoneHVAC:Dehumidifier, ZoneHVAC:EnergyRecoveryVentilator, WaterHeater:HeatPump:*.")]
        public enum AllowunsupportedzoneequipmentType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Zone")]
    [Description("This object is used to simultaneously control a thermal zone\'s window and door op" +
        "enings, both exterior and interior.")]
    public class AirflowNetwork_MultiZone_Zone
    {
        
        private void ASHRAE55Adaptive;
        
        private void CEN15251Adaptive;
        
        private void Constant;
        
        private void Enthalpy;
        
        private void NoVent;
        
        private void Temperature;
        
        private void Advanced;
        
        private void Standard;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_control_mode")]
public VentilationcontrolmodeType ventilation_control_mode
{
    get
    {
    }
    set
    {
    }
}
 = (VentilationcontrolmodeType)NoVent;

[JsonProperty("ventilation_control_zone_temperature_setpoint_schedule_name")]
public string ventilation_control_zone_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_venting_open_factor")]
public float minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_fa" +
    "ctor")]
public float indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_fa" +
    "ctor")]
public float indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_facto" +
    "r")]
public float indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_facto" +
    "r")]
public float indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)300000;

[JsonProperty("venting_availability_schedule_name")]
public string venting_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("single_sided_wind_pressure_coefficient_algorithm")]
public SinglesidedwindpressurecoefficientalgorithmType single_sided_wind_pressure_coefficient_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (SinglesidedwindpressurecoefficientalgorithmType)Standard;

[JsonProperty("facade_width")]
public float facade_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("occupant_ventilation_control_name")]
public string occupant_ventilation_control_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for all window and door openings in the zone according to the zone's indoor-outdoor temperature or enthalpy difference. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0).")]
        public enum VentilationcontrolmodeType
        {
        }
        
        [Description(@"Selecting Advanced results in EnergyPlus calculating modified Wind Pressure Coefficients to account for wind direction and turbulence effects on single sided ventilation rates. Model is only valid for zones with 2 openings, both of which are on a single facade.")]
        public enum SinglesidedwindpressurecoefficientalgorithmType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Surface")]
    [Description("This object specifies the properties of a surface linkage through which air flows" +
        ". Airflow Report: Node 1 as an inside face zone; Node 2 as an outside face zone " +
        "or external node.")]
    public class AirflowNetwork_MultiZone_Surface
    {
        
        private void ASHRAE55Adaptive;
        
        private void AdjacentEnthalpy;
        
        private void AdjacentTemperature;
        
        private void CEN15251Adaptive;
        
        private void Constant;
        
        private void Enthalpy;
        
        private void NoVent;
        
        private void Temperature;
        
        private void ZoneLevel;
        
        private void BaseSurfaceAspectRatio;
        
        private void PolygonHeight;
        
        private void UserDefinedAspectRatio;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leakage_component_name")]
public string leakage_component_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_node_name")]
public string external_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("window_door_opening_factor_or_crack_factor")]
public float window_door_opening_factor_or_crack_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("ventilation_control_mode")]
public VentilationcontrolmodeType ventilation_control_mode
{
    get
    {
    }
    set
    {
    }
}
 = (VentilationcontrolmodeType)ZoneLevel;

[JsonProperty("ventilation_control_zone_temperature_setpoint_schedule_name")]
public string ventilation_control_zone_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_venting_open_factor")]
public float minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_fa" +
    "ctor")]
public float indoor_and_outdoor_temperature_difference_lower_limit_for_maximum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_fa" +
    "ctor")]
public float indoor_and_outdoor_temperature_difference_upper_limit_for_minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_facto" +
    "r")]
public float indoor_and_outdoor_enthalpy_difference_lower_limit_for_maximum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_facto" +
    "r")]
public float indoor_and_outdoor_enthalpy_difference_upper_limit_for_minimum_venting_open_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)300000;

[JsonProperty("venting_availability_schedule_name")]
public string venting_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("occupant_ventilation_control_name")]
public string occupant_ventilation_control_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equivalent_rectangle_method")]
public EquivalentrectanglemethodType equivalent_rectangle_method
{
    get
    {
    }
    set
    {
    }
}
 = (EquivalentrectanglemethodType)PolygonHeight;

[JsonProperty("equivalent_rectangle_aspect_ratio")]
public float equivalent_rectangle_aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"When Ventilation Control Mode = Temperature or Enthalpy, the following fields are used to modulate the Ventilation Open Factor for a window or door opening according to the parent zone's indoor-outdoor temperature or enthalpy difference. When Ventilation Control Mode = AdjacentTemperature or AdjacentEnthalpy, the following fields are used to modulate the Ventilation Open Factor for an interior window or door opening according to temperature or enthalpy difference between the parent zone and the adjacent zone. Constant: controlled by field Venting Schedule Name. NoVent: control will not open window or door during simulation (Ventilation Open Factor = 0). ZoneLevel: control will be controlled by AirflowNetwork:MultiZone:Zone Mode.")]
        public enum VentilationcontrolmodeType
        {
        }
        
        [Description("This field is applied to a non-rectangular window or door. The equivalent shape h" +
            "as the same area as a polygonal window or door.")]
        public enum EquivalentrectanglemethodType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:ReferenceCrackConditions")]
    [Description("This object specifies the conditions under which the air mass flow coefficient wa" +
        "s measured.")]
    public class AirflowNetwork_MultiZone_ReferenceCrackConditions
    {
        

[JsonProperty("reference_temperature")]
public float reference_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("reference_barometric_pressure")]
public float reference_barometric_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)101325;

[JsonProperty("reference_humidity_ratio")]
public float reference_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Surface:Crack")]
    [Description("This object specifies the properties of airflow through a crack.")]
    public class AirflowNetwork_MultiZone_Surface_Crack
    {
        

[JsonProperty("air_mass_flow_coefficient_at_reference_conditions")]
public float air_mass_flow_coefficient_at_reference_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent")]
public float air_mass_flow_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("reference_crack_conditions")]
public string reference_crack_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Surface:EffectiveLeakageArea")]
    [Description("This object is used to define surface air leakage.")]
    public class AirflowNetwork_MultiZone_Surface_EffectiveLeakageArea
    {
        

[JsonProperty("effective_leakage_area")]
public float effective_leakage_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient")]
public float discharge_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("reference_pressure_difference")]
public float reference_pressure_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("air_mass_flow_exponent")]
public float air_mass_flow_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Component:DetailedOpening")]
    [Description("This object specifies the properties of airflow through windows and doors (window" +
        ", door and glass door heat transfer subsurfaces) when they are closed or open.")]
    public class AirflowNetwork_MultiZone_Component_DetailedOpening
    {
        
        private void HorizontallyPivoted;
        
        private void NonPivoted;
        

[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public float air_mass_flow_coefficient_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public float air_mass_flow_exponent_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("type_of_rectangular_large_vertical_opening_lvo_")]
public TypeofrectangularlargeverticalopeninglvoType type_of_rectangular_large_vertical_opening_lvo_
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofrectangularlargeverticalopeninglvoType)NonPivoted;

[JsonProperty("extra_crack_length_or_height_of_pivoting_axis")]
public float extra_crack_length_or_height_of_pivoting_axis
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("number_of_sets_of_opening_factor_data")]
public float number_of_sets_of_opening_factor_data
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("opening_factor_1")]
public float opening_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("discharge_coefficient_for_opening_factor_1")]
public float discharge_coefficient_for_opening_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("width_factor_for_opening_factor_1")]
public float width_factor_for_opening_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("height_factor_for_opening_factor_1")]
public float height_factor_for_opening_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("start_height_factor_for_opening_factor_1")]
public float start_height_factor_for_opening_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("opening_factor_2")]
public float opening_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient_for_opening_factor_2")]
public float discharge_coefficient_for_opening_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("width_factor_for_opening_factor_2")]
public float width_factor_for_opening_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("height_factor_for_opening_factor_2")]
public float height_factor_for_opening_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("start_height_factor_for_opening_factor_2")]
public float start_height_factor_for_opening_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("opening_factor_3")]
public float opening_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient_for_opening_factor_3")]
public float discharge_coefficient_for_opening_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("width_factor_for_opening_factor_3")]
public float width_factor_for_opening_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("height_factor_for_opening_factor_3")]
public float height_factor_for_opening_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("start_height_factor_for_opening_factor_3")]
public float start_height_factor_for_opening_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("opening_factor_4")]
public float opening_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient_for_opening_factor_4")]
public float discharge_coefficient_for_opening_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("width_factor_for_opening_factor_4")]
public float width_factor_for_opening_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("height_factor_for_opening_factor_4")]
public float height_factor_for_opening_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("start_height_factor_for_opening_factor_4")]
public float start_height_factor_for_opening_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Select the type of vertical opening: Non-pivoted opening or Horizontally pivoted " +
            "opening.")]
        public enum TypeofrectangularlargeverticalopeninglvoType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Component:SimpleOpening")]
    [Description("This object specifies the properties of air flow through windows and doors (windo" +
        "w, door and glass door heat transfer subsurfaces) when they are closed or open.")]
    public class AirflowNetwork_MultiZone_Component_SimpleOpening
    {
        

[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public float air_mass_flow_coefficient_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public float air_mass_flow_exponent_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("minimum_density_difference_for_two_way_flow")]
public float minimum_density_difference_for_two_way_flow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient")]
public float discharge_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Component:HorizontalOpening")]
    [Description("This object specifies the properties of air flow through a horizontal opening")]
    public class AirflowNetwork_MultiZone_Component_HorizontalOpening
    {
        

[JsonProperty("air_mass_flow_coefficient_when_opening_is_closed")]
public float air_mass_flow_coefficient_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_opening_is_closed")]
public float air_mass_flow_exponent_when_opening_is_closed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("sloping_plane_angle")]
public float sloping_plane_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("discharge_coefficient")]
public float discharge_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:Component:ZoneExhaustFan")]
    [Description("This object specifies the additional properties for a zone exhaust fan to perform" +
        " multizone airflow calculations.")]
    public class AirflowNetwork_MultiZone_Component_ZoneExhaustFan
    {
        

[JsonProperty("air_mass_flow_coefficient_when_the_zone_exhaust_fan_is_off_at_reference_condition" +
    "s")]
public float air_mass_flow_coefficient_when_the_zone_exhaust_fan_is_off_at_reference_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_the_zone_exhaust_fan_is_off")]
public float air_mass_flow_exponent_when_the_zone_exhaust_fan_is_off
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("reference_crack_conditions")]
public string reference_crack_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:ExternalNode")]
    [Description("This object defines outdoor environmental conditions outside of the building.")]
    public class AirflowNetwork_MultiZone_ExternalNode
    {
        
        private void No;
        
        private void Yes;
        
        private void Absolute;
        
        private void Relative;
        

[JsonProperty("external_node_height")]
public float external_node_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("wind_pressure_coefficient_curve_name")]
public string wind_pressure_coefficient_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("symmetric_wind_pressure_coefficient_curve")]
public SymmetricwindpressurecoefficientcurveType symmetric_wind_pressure_coefficient_curve
{
    get
    {
    }
    set
    {
    }
}
 = (SymmetricwindpressurecoefficientcurveType)No;

[JsonProperty("wind_angle_type")]
public WindangletypeType wind_angle_type
{
    get
    {
    }
    set
    {
    }
}
 = (WindangletypeType)Absolute;
        
        [Description("Specify whether the pressure curve is symmetric or not. Specify Yes for curves th" +
            "at should be evaluated from 0 to 180 degrees Specify No for curves that should b" +
            "e evaluated from 0 to 360 degrees")]
        public enum SymmetricwindpressurecoefficientcurveType
        {
        }
        
        [Description("Specify whether the angle used to compute the wind pressure coefficient is absolu" +
            "te or relative Specify Relative to compute the angle between the wind direction " +
            "and the surface azimuth Specify Absolute to use the wind direction angle directl" +
            "y")]
        public enum WindangletypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:WindPressureCoefficientArray")]
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = Input in the AirflowNetwork:SimulationControl object. Number of WPC Values in the corresponding AirflowNetwork:MultiZone:WindPressureCoefficientValues object must be the same as the number of wind directions specified for this AirflowNetwork:MultiZone:WindPressureCoefficientArray object.")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientArray
    {
        

[JsonProperty("wind_direction_1")]
public float wind_direction_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_2")]
public float wind_direction_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_3")]
public float wind_direction_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_4")]
public float wind_direction_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_5")]
public float wind_direction_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_6")]
public float wind_direction_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_7")]
public float wind_direction_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_8")]
public float wind_direction_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_9")]
public float wind_direction_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_10")]
public float wind_direction_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_11")]
public float wind_direction_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_12")]
public float wind_direction_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_13")]
public float wind_direction_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_14")]
public float wind_direction_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_15")]
public float wind_direction_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_16")]
public float wind_direction_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_17")]
public float wind_direction_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_18")]
public float wind_direction_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_19")]
public float wind_direction_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_20")]
public float wind_direction_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_21")]
public float wind_direction_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_22")]
public float wind_direction_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_23")]
public float wind_direction_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_24")]
public float wind_direction_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_25")]
public float wind_direction_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_26")]
public float wind_direction_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_27")]
public float wind_direction_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_28")]
public float wind_direction_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_29")]
public float wind_direction_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_30")]
public float wind_direction_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_31")]
public float wind_direction_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_32")]
public float wind_direction_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_33")]
public float wind_direction_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_34")]
public float wind_direction_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_35")]
public float wind_direction_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_36")]
public float wind_direction_36
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:MultiZone:WindPressureCoefficientValues")]
    [Description(@"Used only if Wind Pressure Coefficient (WPC) Type = INPUT in the AirflowNetwork:SimulationControl object. The number of WPC numeric inputs must correspond to the number of wind direction inputs in the AirflowNetwork:Multizone:WindPressureCoefficientArray object.")]
    public class AirflowNetwork_MultiZone_WindPressureCoefficientValues
    {
        

[JsonProperty("airflownetwork_multizone_windpressurecoefficientarray_name")]
public string airflownetwork_multizone_windpressurecoefficientarray_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_1")]
public float wind_pressure_coefficient_value_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_2")]
public float wind_pressure_coefficient_value_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_3")]
public float wind_pressure_coefficient_value_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_4")]
public float wind_pressure_coefficient_value_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_5")]
public float wind_pressure_coefficient_value_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_6")]
public float wind_pressure_coefficient_value_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_7")]
public float wind_pressure_coefficient_value_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_8")]
public float wind_pressure_coefficient_value_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_9")]
public float wind_pressure_coefficient_value_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_10")]
public float wind_pressure_coefficient_value_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_11")]
public float wind_pressure_coefficient_value_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_12")]
public float wind_pressure_coefficient_value_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_13")]
public float wind_pressure_coefficient_value_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_14")]
public float wind_pressure_coefficient_value_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_15")]
public float wind_pressure_coefficient_value_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_16")]
public float wind_pressure_coefficient_value_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_17")]
public float wind_pressure_coefficient_value_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_18")]
public float wind_pressure_coefficient_value_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_19")]
public float wind_pressure_coefficient_value_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_20")]
public float wind_pressure_coefficient_value_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_21")]
public float wind_pressure_coefficient_value_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_22")]
public float wind_pressure_coefficient_value_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_23")]
public float wind_pressure_coefficient_value_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_24")]
public float wind_pressure_coefficient_value_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_25")]
public float wind_pressure_coefficient_value_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_26")]
public float wind_pressure_coefficient_value_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_27")]
public float wind_pressure_coefficient_value_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_28")]
public float wind_pressure_coefficient_value_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_29")]
public float wind_pressure_coefficient_value_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_30")]
public float wind_pressure_coefficient_value_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_31")]
public float wind_pressure_coefficient_value_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_32")]
public float wind_pressure_coefficient_value_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_33")]
public float wind_pressure_coefficient_value_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_34")]
public float wind_pressure_coefficient_value_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_35")]
public float wind_pressure_coefficient_value_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_value_36")]
public float wind_pressure_coefficient_value_36
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:ZoneControl:PressureController")]
    [Description("This object is used to control a zone to a specified indoor pressure using the Ai" +
        "rflowNetwork model. The specified pressure setpoint is used to control the zone " +
        "exhaust fan flow rate in a controlled zone or the relief air flow rate in an air" +
        " loop.")]
    public class AirflowNetwork_ZoneControl_PressureController
    {
        
        private void AirflowNetwork:Distribution:Component:ReliefAirFlow;
        
        private void AirflowNetwork:MultiZone:Component:ZoneExhaustFan;
        

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_object_type")]
public ControlobjecttypeType control_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_object_name")]
public string control_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure_control_availability_schedule_name")]
public string pressure_control_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure_setpoint_schedule_name")]
public string pressure_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("The current selection is AirflowNetwork:MultiZone:Component:ZoneExhaustFan or Air" +
            "flowNetwork:Distribution:Component:ReliefAirFlow.")]
        public enum ControlobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Node")]
    [Description("This object represents an air distribution node in the AirflowNetwork model.")]
    public class AirflowNetwork_Distribution_Node
    {
        
        private void AirLoopHVAC:OutdoorAirSystem;
        
        private void AirLoopHVAC:ZoneMixer;
        
        private void AirLoopHVAC:ZoneSplitter;
        
        private void OAMixerOutdoorAirStreamNode;
        
        private void Other;
        
        private void OutdoorAir:Node;
        
        private void OutdoorAir:NodeList;
        

[JsonProperty("component_name_or_node_name")]
public string component_name_or_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_object_type_or_node_type")]
public ComponentobjecttypeornodetypeType component_object_type_or_node_type
{
    get
    {
    }
    set
    {
    }
}
 = (ComponentobjecttypeornodetypeType)Other;

[JsonProperty("node_height")]
public float node_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description(@"Designates Node type for the Node or Component Name defined in the field above. AirLoopHVAC:ZoneMixer -- Represents a AirLoopHVAC:ZoneMixer object. AirLoopHVAC:ZoneSplitter -- Represents a AirLoopHVAC:ZoneSplitter object. AirLoopHVAC:OutdoorAirSystem -- Represents an AirLoopHVAC:OutdoorAirSystem object. OAMixerOutdoorAirStreamNode -- Represents an external node used in the OutdoorAir:Mixer OutdoorAir:NodeList -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer OutdoorAir:Node -- Represents an external node when a heat exchanger is used before the OutdoorAir:Mixer Other -- none of the above, the Node name already defined in the previous field is part of an air loop.")]
        public enum ComponentobjecttypeornodetypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:Leak")]
    [Description("This object defines the characteristics of a supply or return air leak.")]
    public class AirflowNetwork_Distribution_Component_Leak
    {
        

[JsonProperty("air_mass_flow_coefficient")]
public float air_mass_flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent")]
public float air_mass_flow_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:LeakageRatio")]
    [Description("This object is used to define supply and return air leaks with respect to the fan" +
        "\'s maximum air flow rate.")]
    public class AirflowNetwork_Distribution_Component_LeakageRatio
    {
        

[JsonProperty("effective_leakage_ratio")]
public float effective_leakage_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public float maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_pressure_difference")]
public float reference_pressure_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent")]
public float air_mass_flow_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:Duct")]
    [Description("This object defines the relationship between pressure and air flow through the du" +
        "ct.")]
    public class AirflowNetwork_Distribution_Component_Duct
    {
        

[JsonProperty("duct_length")]
public float duct_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydraulic_diameter")]
public float hydraulic_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_section_area")]
public float cross_section_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_roughness")]
public float surface_roughness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0009;

[JsonProperty("coefficient_for_local_dynamic_loss_due_to_fitting")]
public float coefficient_for_local_dynamic_loss_due_to_fitting
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_transmittance_coefficient_u_factor_for_duct_wall_construction")]
public float heat_transmittance_coefficient_u_factor_for_duct_wall_construction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.943;

[JsonProperty("overall_moisture_transmittance_coefficient_from_air_to_air")]
public float overall_moisture_transmittance_coefficient_from_air_to_air
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("outside_convection_coefficient")]
public float outside_convection_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inside_convection_coefficient")]
public float inside_convection_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:Fan")]
    [Description("This object defines the name of the supply Air Fan used in an Air loop.")]
    public class AirflowNetwork_Distribution_Component_Fan
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanobjecttypeType)Fan:ConstantVolume;
        
        public enum SupplyfanobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:Coil")]
    [Description("This object defines the name of a coil used in an air loop.")]
    public class AirflowNetwork_Distribution_Component_Coil
    {
        
        private void Coil:Cooling:DX;
        
        private void Coil:Cooling:DX:MultiSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:TwoSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:DX:MultiSpeed;
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Water;
        

[JsonProperty("coil_name")]
public string coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_object_type")]
public CoilobjecttypeType coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_length")]
public float air_path_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_hydraulic_diameter")]
public float air_path_hydraulic_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select the type of coil corresponding to the name entered in the field above.")]
        public enum CoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:HeatExchanger")]
    [Description("This object defines the name of an air-to-air heat exchanger used in an air loop." +
        "")]
    public class AirflowNetwork_Distribution_Component_HeatExchanger
    {
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void HeatExchanger:Desiccant:BalancedFlow;
        

[JsonProperty("heatexchanger_name")]
public string heatexchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heatexchanger_object_type")]
public HeatexchangerobjecttypeType heatexchanger_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_length")]
public float air_path_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_hydraulic_diameter")]
public float air_path_hydraulic_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select the type of heat exchanger corresponding to the name entered in the field " +
            "above.")]
        public enum HeatexchangerobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:TerminalUnit")]
    [Description("This object defines the name of a terminal unit in an air loop.")]
    public class AirflowNetwork_Distribution_Component_TerminalUnit
    {
        
        private void AirTerminal:SingleDuct:ConstantVolume:Reheat;
        
        private void AirTerminal:SingleDuct:VAV:Reheat;
        

[JsonProperty("terminal_unit_name")]
public string terminal_unit_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("terminal_unit_object_type")]
public TerminalunitobjecttypeType terminal_unit_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_length")]
public float air_path_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_path_hydraulic_diameter")]
public float air_path_hydraulic_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select the type of terminal unit corresponding to the name entered in the field a" +
            "bove.")]
        public enum TerminalunitobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:ConstantPressureDrop")]
    [Description(@"This object defines the characteristics of a constant pressure drop component (e.g. filter). Each node connected to this object can not be a node of mixer, splitter, a node of air primary loop, or zone equipment loop. It is recommended to connect to a duct component at both ends.")]
    public class AirflowNetwork_Distribution_Component_ConstantPressureDrop
    {
        

[JsonProperty("pressure_difference_across_the_component")]
public float pressure_difference_across_the_component
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:OutdoorAirFlow")]
    [Description("This object includes the outdoor air flow rate set by the Controller:OutdoorAir o" +
        "bject in the airflow network.")]
    public class AirflowNetwork_Distribution_Component_OutdoorAirFlow
    {
        

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions")]
public float air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_no_outdoor_air_flow")]
public float air_mass_flow_exponent_when_no_outdoor_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("reference_crack_conditions")]
public string reference_crack_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Component:ReliefAirFlow")]
    [Description("This object allows variation of air flow rate to perform pressure.")]
    public class AirflowNetwork_Distribution_Component_ReliefAirFlow
    {
        

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions")]
public float air_mass_flow_coefficient_when_no_outdoor_air_flow_at_reference_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_mass_flow_exponent_when_no_outdoor_air_flow")]
public float air_mass_flow_exponent_when_no_outdoor_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("reference_crack_conditions")]
public string reference_crack_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:Linkage")]
    [Description("This object defines the connection between two nodes and a component.")]
    public class AirflowNetwork_Distribution_Linkage
    {
        

[JsonProperty("node_1_name")]
public string node_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("node_2_name")]
public string node_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_name")]
public string component_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_zone_name")]
public string thermal_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:Distribution:DuctViewFactors")]
    [Description("This object is used to allow user-defined view factors to be used for duct-surfac" +
        "e radiation calculations.")]
    public class AirflowNetwork_Distribution_DuctViewFactors
    {
        

[JsonProperty("linkage_name")]
public string linkage_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("duct_surface_exposure_fraction")]
public float duct_surface_exposure_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("duct_surface_emittance")]
public float duct_surface_emittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirflowNetwork:OccupantVentilationControl")]
    [Description("This object is used to provide advanced thermal comfort control of window opening" +
        " and closing for both exterior and interior windows.")]
    public class AirflowNetwork_OccupantVentilationControl
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("minimum_opening_time")]
public float minimum_opening_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_closing_time")]
public float minimum_closing_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("thermal_comfort_low_temperature_curve_name")]
public string thermal_comfort_low_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_temperature_boundary_point")]
public float thermal_comfort_temperature_boundary_point
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("thermal_comfort_high_temperature_curve_name")]
public string thermal_comfort_high_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_threshold_for_persons_dissatisfied_ppd")]
public float maximum_threshold_for_persons_dissatisfied_ppd
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("occupancy_check")]
public OccupancycheckType occupancy_check
{
    get
    {
    }
    set
    {
    }
}
 = (OccupancycheckType)No;

[JsonProperty("opening_probability_schedule_name")]
public string opening_probability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("closing_probability_schedule_name")]
public string closing_probability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If Yes, occupancy check will be performed as part of the opening probability chec" +
            "k.")]
        public enum OccupancycheckType
        {
        }
    }
    
    [JsonProperty("AirflowNetwork:IntraZone:Node")]
    [Description("This object represents a node in a zone in the combination of RoomAir and Airflow" +
        "Network model.")]
    public class AirflowNetwork_IntraZone_Node
    {
        

[JsonProperty("roomair_node_airflownetwork_name")]
public string roomair_node_airflownetwork_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("node_height")]
public float node_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("AirflowNetwork:IntraZone:Linkage")]
    [Description("This object defines the connection between two nodes and a component used in the " +
        "combination of RoomAir and AirflowNetwork model.")]
    public class AirflowNetwork_IntraZone_Linkage
    {
        

[JsonProperty("node_1_name")]
public string node_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("node_2_name")]
public string node_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_name")]
public string component_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airflownetwork_multizone_surface_name")]
public string airflownetwork_multizone_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.Coils
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Coil:Cooling:Water")]
    [Description("Chilled water cooling coil, NTU-effectiveness model, with inputs for design enter" +
        "ing and leaving conditions.")]
    public class Coil_Cooling_Water
    {
        
        private void DetailedAnalysis;
        
        private void SimpleAnalysis;
        
        private void CounterFlow;
        
        private void CrossFlow;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_inlet_water_temperature")]
public string design_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_inlet_air_temperature")]
public string design_inlet_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_outlet_air_temperature")]
public string design_outlet_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_inlet_air_humidity_ratio")]
public string design_inlet_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_outlet_air_humidity_ratio")]
public string design_outlet_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_analysis")]
public TypeofanalysisType type_of_analysis
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofanalysisType)SimpleAnalysis;

[JsonProperty("heat_exchanger_configuration")]
public HeatexchangerconfigurationType heat_exchanger_configuration
{
    get
    {
    }
    set
    {
    }
}
 = (HeatexchangerconfigurationType)CounterFlow;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_temperature_difference")]
public float design_water_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TypeofanalysisType
        {
        }
        
        public enum HeatexchangerconfigurationType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:Water:DetailedGeometry")]
    [Description("Chilled water cooling coil, detailed flat fin coil model for continuous plate fin" +
        "s, with inputs for detailed coil geometry specifications.")]
    public class Coil_Cooling_Water_DetailedGeometry
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_water_flow_rate")]
public string maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("tube_outside_surface_area")]
public string tube_outside_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("total_tube_inside_area")]
public string total_tube_inside_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("fin_surface_area")]
public string fin_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_airflow_area")]
public string minimum_airflow_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("coil_depth")]
public string coil_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("fin_diameter")]
public string fin_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("fin_thickness")]
public float fin_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0015;

[JsonProperty("tube_inside_diameter")]
public float tube_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01445;

[JsonProperty("tube_outside_diameter")]
public float tube_outside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0159;

[JsonProperty("tube_thermal_conductivity")]
public float tube_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)386;

[JsonProperty("fin_thermal_conductivity")]
public float fin_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)204;

[JsonProperty("fin_spacing")]
public float fin_spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0018;

[JsonProperty("tube_depth_spacing")]
public float tube_depth_spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.026;

[JsonProperty("number_of_tube_rows")]
public float number_of_tube_rows
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("number_of_tubes_per_row")]
public string number_of_tubes_per_row
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_temperature_difference")]
public float design_water_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Cooling:DX")]
    [Description(@"New general DX cooling coil supporting on or more speeds and one or or operating  modes. Includes DX evaporator coil, compressor, and condenser. Object is currently only supported by the AIRLOOPHVAC:UNITARYSYSTEM object. Remaining Coil:Cooling:DX* objects will be deprecated at a future date, after which, this object will replace all other Coil:Cooling:DX* objects.")]
    public class Coil_Cooling_DX
    {
        

[JsonProperty("evaporator_inlet_node_name")]
public string evaporator_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_outlet_node_name")]
public string evaporator_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_zone_name")]
public string condenser_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_object_name")]
public string performance_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_supply_water_storage_tank_name")]
public string evaporative_condenser_supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Cooling:DX:CurveFit:Performance")]
    [Description("DX cooling coil performance specification referencing one or more operating modes" +
        ". Mode 1 is always the base design operating mode. Additional modes are optional" +
        " states such as subcool reheat for humidity control.")]
    public class Coil_Cooling_DX_CurveFit_Performance
    {
        
        private void Continuous;
        
        private void Discrete;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("unit_internal_static_air_pressure")]
public float unit_internal_static_air_pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolmethodType)Discrete;

[JsonProperty("evaporative_condenser_basin_heater_capacity")]
public float evaporative_condenser_basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("evaporative_condenser_basin_heater_setpoint_temperature")]
public float evaporative_condenser_basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("evaporative_condenser_basin_heater_operating_schedule_name")]
public string evaporative_condenser_basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_fuel_type")]
public CompressorfueltypeType compressor_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (CompressorfueltypeType)Electricity;

[JsonProperty("base_operating_mode")]
public string base_operating_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("alternative_operating_mode_1")]
public string alternative_operating_mode_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("alternative_operating_mode_2")]
public string alternative_operating_mode_2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CapacitycontrolmethodType
        {
        }
        
        public enum CompressorfueltypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:CurveFit:OperatingMode")]
    [Description("DX cooling coil performance for a single operating mode which may have one or mor" +
        "e speeds.")]
    public class Coil_Cooling_DX_CurveFit_OperatingMode
    {
        
        private void No;
        
        private void Yes;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        

[JsonProperty("rated_gross_total_cooling_capacity")]
public string rated_gross_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_evaporator_air_flow_rate")]
public string rated_evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_condenser_air_flow_rate")]
public string rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public float ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_capacity_time_constant")]
public float latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public float nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("apply_latent_degradation_to_speeds_greater_than_1")]
public ApplylatentdegradationtospeedsgreaterthanType apply_latent_degradation_to_speeds_greater_than_1
{
    get
    {
    }
    set
    {
    }
}
 = (ApplylatentdegradationtospeedsgreaterthanType)No;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("nominal_evaporative_condenser_pump_power")]
public string nominal_evaporative_condenser_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("nominal_speed_number")]
public float nominal_speed_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_name")]
public string speed_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_name")]
public string speed_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_name")]
public string speed_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_name")]
public string speed_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_name")]
public string speed_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_name")]
public string speed_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_name")]
public string speed_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_name")]
public string speed_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_name")]
public string speed_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_name")]
public string speed_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ApplylatentdegradationtospeedsgreaterthanType
        {
        }
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:CurveFit:Speed")]
    [Description("DX cooling coil performance for a single speed within a single operating mode.")]
    public class Coil_Cooling_DX_CurveFit_Speed
    {
        

[JsonProperty("gross_total_cooling_capacity_fraction")]
public float gross_total_cooling_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_flow_rate_fraction")]
public float evaporator_air_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_flow_rate_fraction")]
public float condenser_air_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_sensible_heat_ratio")]
public string gross_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gross_cooling_cop")]
public float gross_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("active_fraction_of_coil_face_area")]
public float active_fraction_of_coil_face_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("rated_evaporator_fan_power_per_volume_flow_rate")]
public float rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("evaporative_condenser_pump_power_fraction")]
public float evaporative_condenser_pump_power_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("total_cooling_capacity_modifier_function_of_temperature_curve_name")]
public string total_cooling_capacity_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_modifier_function_of_air_flow_fraction_curve_name")]
public string total_cooling_capacity_modifier_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string energy_input_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_modifier_function_of_air_flow_fraction_curve_name")]
public string energy_input_ratio_modifier_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_waste_heat_fraction_of_power_input")]
public float rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("waste_heat_modifier_function_of_temperature_curve_name")]
public string waste_heat_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Cooling:DX:SingleSpeed")]
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed. Optional inputs for moisture evaporation f" +
        "rom wet coil when compressor cycles off with continuous fan operation.")]
    public class Coil_Cooling_DX_SingleSpeed
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_sensible_heat_ratio")]
public string gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_cooling_cop")]
public float gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_evaporator_fan_power_per_volume_flow_rate")]
public float rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public float nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public float ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_capacity_time_constant")]
public float latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("evaporative_condenser_air_flow_rate")]
public string evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("report_ashrae_standard_127_performance_ratings")]
public ReportashraestandardperformanceratingsType report_ashrae_standard_127_performance_ratings
{
    get
    {
    }
    set
    {
    }
}
 = (ReportashraestandardperformanceratingsType)No;

[JsonProperty("zone_name_for_condenser_placement")]
public string zone_name_for_condenser_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
        
        [Description("when this input field is specified as Yes then the program calculates the net coo" +
            "ling capacity and total electric power input of DX cooling coils per ANSI/ASHRAE" +
            " 127.")]
        public enum ReportashraestandardperformanceratingsType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:TwoSpeed")]
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-speed (or variable-speed). Requires two sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    public class Coil_Cooling_DX_TwoSpeed
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_gross_rated_total_cooling_capacity")]
public string high_speed_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_rated_sensible_heat_ratio")]
public string high_speed_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_gross_rated_cooling_cop")]
public float high_speed_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("high_speed_rated_air_flow_rate")]
public string high_speed_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unit_internal_static_air_pressure")]
public float unit_internal_static_air_pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_gross_rated_total_cooling_capacity")]
public string low_speed_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_gross_rated_sensible_heat_ratio")]
public string low_speed_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_gross_rated_cooling_cop")]
public float low_speed_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("low_speed_rated_air_flow_rate")]
public string low_speed_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_total_cooling_capacity_function_of_temperature_curve_name")]
public string low_speed_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_energy_input_ratio_function_of_temperature_curve_name")]
public string low_speed_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("high_speed_evaporative_condenser_effectiveness")]
public float high_speed_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("high_speed_evaporative_condenser_air_flow_rate")]
public string high_speed_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_evaporative_condenser_pump_rated_power_consumption")]
public string high_speed_evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_evaporative_condenser_effectiveness")]
public float low_speed_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("low_speed_evaporative_condenser_air_flow_rate")]
public string low_speed_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_evaporative_condenser_pump_rated_power_consumption")]
public string low_speed_evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_sensible_heat_ratio_function_of_temperature_curve_name")]
public string low_speed_sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name_for_condenser_placement")]
public string zone_name_for_condenser_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:MultiSpeed")]
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric or engine-driven compressor and condenser fan), multi-speed (or variable-speed). Optional moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data and will interpolate between speeds. Modeled as a single coil (multi-speed compressor or multiple compressors with row split or intertwined coil).")]
    public class Coil_Cooling_DX_MultiSpeed
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("apply_part_load_fraction_to_speeds_greater_than_1")]
public ApplypartloadfractiontospeedsgreaterthanType apply_part_load_fraction_to_speeds_greater_than_1
{
    get
    {
    }
    set
    {
    }
}
 = (ApplypartloadfractiontospeedsgreaterthanType)No;

[JsonProperty("apply_latent_degradation_to_speeds_greater_than_1")]
public ApplylatentdegradationtospeedsgreaterthanType apply_latent_degradation_to_speeds_greater_than_1
{
    get
    {
    }
    set
    {
    }
}
 = (ApplylatentdegradationtospeedsgreaterthanType)No;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_gross_rated_total_cooling_capacity")]
public string speed_1_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_gross_rated_sensible_heat_ratio")]
public string speed_1_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_gross_rated_cooling_cop")]
public float speed_1_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("speed_1_rated_air_flow_rate")]
public string speed_1_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_rated_evaporator_fan_power_per_volume_flow_rate")]
public float speed_1_rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_1_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_part_load_fraction_correlation_curve_name")]
public string speed_1_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_nominal_time_for_condensate_removal_to_begin")]
public float speed_1_nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public float speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_1_maximum_cycling_rate")]
public float speed_1_maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_1_latent_capacity_time_constant")]
public float speed_1_latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_1_rated_waste_heat_fraction_of_power_input")]
public float speed_1_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string speed_1_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_evaporative_condenser_effectiveness")]
public float speed_1_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("speed_1_evaporative_condenser_air_flow_rate")]
public string speed_1_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_rated_evaporative_condenser_pump_power_consumption")]
public string speed_1_rated_evaporative_condenser_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_gross_rated_total_cooling_capacity")]
public string speed_2_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_gross_rated_sensible_heat_ratio")]
public string speed_2_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_gross_rated_cooling_cop")]
public float speed_2_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("speed_2_rated_air_flow_rate")]
public string speed_2_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_rated_evaporator_fan_power_per_volume_flow_rate")]
public float speed_2_rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_2_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_part_load_fraction_correlation_curve_name")]
public string speed_2_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_nominal_time_for_condensate_removal_to_begin")]
public float speed_2_nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public float speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_2_maximum_cycling_rate")]
public float speed_2_maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_2_latent_capacity_time_constant")]
public float speed_2_latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_2_rated_waste_heat_fraction_of_power_input")]
public float speed_2_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string speed_2_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_evaporative_condenser_effectiveness")]
public float speed_2_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("speed_2_evaporative_condenser_air_flow_rate")]
public string speed_2_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_rated_evaporative_condenser_pump_power_consumption")]
public string speed_2_rated_evaporative_condenser_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_gross_rated_total_cooling_capacity")]
public string speed_3_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_gross_rated_sensible_heat_ratio")]
public string speed_3_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_gross_rated_cooling_cop")]
public float speed_3_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("speed_3_rated_air_flow_rate")]
public string speed_3_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_rated_evaporator_fan_power_per_volume_flow_rate")]
public float speed_3_rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_3_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_part_load_fraction_correlation_curve_name")]
public string speed_3_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_nominal_time_for_condensate_removal_to_begin")]
public float speed_3_nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public float speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_3_maximum_cycling_rate")]
public float speed_3_maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_3_latent_capacity_time_constant")]
public float speed_3_latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_3_rated_waste_heat_fraction_of_power_input")]
public float speed_3_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string speed_3_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_evaporative_condenser_effectiveness")]
public float speed_3_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("speed_3_evaporative_condenser_air_flow_rate")]
public string speed_3_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_rated_evaporative_condenser_pump_power_consumption")]
public string speed_3_rated_evaporative_condenser_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_gross_rated_total_cooling_capacity")]
public string speed_4_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_gross_rated_sensible_heat_ratio")]
public string speed_4_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_gross_rated_cooling_cop")]
public float speed_4_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("speed_4_rated_air_flow_rate")]
public string speed_4_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_rated_evaporator_fan_power_per_volume_flow_rate")]
public float speed_4_rated_evaporator_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_4_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_part_load_fraction_correlation_curve_name")]
public string speed_4_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_nominal_time_for_condensate_removal_to_begin")]
public float speed_4_nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capaci" +
    "ty")]
public float speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_4_maximum_cycling_rate")]
public float speed_4_maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_4_latent_capacity_time_constant")]
public float speed_4_latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("speed_4_rated_waste_heat_fraction_of_power_input")]
public float speed_4_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string speed_4_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_evaporative_condenser_effectiveness")]
public float speed_4_evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("speed_4_evaporative_condenser_air_flow_rate")]
public string speed_4_evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_rated_evaporative_condenser_pump_power_consumption")]
public string speed_4_rated_evaporative_condenser_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name_for_condenser_placement")]
public string zone_name_for_condenser_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
        
        public enum ApplypartloadfractiontospeedsgreaterthanType
        {
        }
        
        public enum ApplylatentdegradationtospeedsgreaterthanType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:VariableSpeed")]
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), variable-speed. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    public class Coil_Cooling_DX_VariableSpeed
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        

[JsonProperty("indoor_air_inlet_node_name")]
public string indoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_outlet_node_name")]
public string indoor_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("nominal_speed_level")]
public float nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("gross_rated_total_cooling_capacity_at_selected_nominal_speed_level")]
public string gross_rated_total_cooling_capacity_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string rated_air_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("nominal_time_for_condensate_to_begin_leaving_the_coil")]
public float nominal_time_for_condensate_to_begin_leaving_the_coil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity")]
public float initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("energy_part_load_fraction_curve_name")]
public string energy_part_load_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_1_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_1_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_cooling_cop")]
public float speed_1_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public float speed_1_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_condenser_air_flow_rate")]
public float speed_1_reference_unit_rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_1_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_2_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_2_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_cooling_cop")]
public float speed_2_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public float speed_2_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_condenser_air_flow_rate")]
public float speed_2_reference_unit_rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_2_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_3_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_3_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_cooling_cop")]
public float speed_3_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public float speed_3_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_condenser_air_flow_rate")]
public float speed_3_reference_unit_rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_3_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_4_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_4_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_cooling_cop")]
public float speed_4_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public float speed_4_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_condenser_air_flow_rate")]
public float speed_4_reference_unit_rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_4_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_5_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_5_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_cooling_cop")]
public float speed_5_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public float speed_5_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_condenser_air_flow_rate")]
public float speed_5_reference_unit_rated_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_5_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_5_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_6_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_6_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_cooling_cop")]
public float speed_6_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public float speed_6_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_condenser_air_flow_rate")]
public float speed_6_reference_unit_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_6_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_6_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_7_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_7_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_cooling_cop")]
public float speed_7_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public float speed_7_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_condenser_flow_rate")]
public float speed_7_reference_unit_condenser_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_7_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_7_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_8_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_8_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_cooling_cop")]
public float speed_8_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public float speed_8_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_condenser_air_flow_rate")]
public float speed_8_reference_unit_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_8_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_8_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_9_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_9_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_cooling_cop")]
public float speed_9_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public float speed_9_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_condenser_air_flow_rate")]
public float speed_9_reference_unit_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_9_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_9_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_10_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_10_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_cooling_cop")]
public float speed_10_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public float speed_10_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_condenser_air_flow_rate")]
public float speed_10_reference_unit_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling")]
public float speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_10_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_10_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:TwoStageWithHumidityControlMode")]
    [Description(@"Direct expansion (DX) cooling coil and condensing unit (includes electric compressor and condenser fan), two-stage with humidity control mode (e.g. sub-cool or hot gas reheat). Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Requires two to four sets of performance data, see CoilPerformance:DX:Cooling. Stages are modeled as a face-split coil.")]
    public class Coil_Cooling_DX_TwoStageWithHumidityControlMode
    {
        
        private void CoilPerformance:DX:Cooling;
        
        private void CoilPerformance:DX:Cooling;
        
        private void CoilPerformance:DX:Cooling;
        
        private void CoilPerformance:DX:Cooling;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("number_of_capacity_stages")]
public float number_of_capacity_stages
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_enhanced_dehumidification_modes")]
public float number_of_enhanced_dehumidification_modes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("normal_mode_stage_1_coil_performance_object_type")]
public NormalmodestagecoilperformanceobjecttypeType normal_mode_stage_1_coil_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normal_mode_stage_1_coil_performance_name")]
public string normal_mode_stage_1_coil_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normal_mode_stage_1_2_coil_performance_object_type")]
public NormalmodestagecoilperformanceobjecttypeType normal_mode_stage_1_2_coil_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normal_mode_stage_1_2_coil_performance_name")]
public string normal_mode_stage_1_2_coil_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_mode_1_stage_1_coil_performance_object_type")]
public DehumidificationmodestagecoilperformanceobjecttypeType dehumidification_mode_1_stage_1_coil_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_mode_1_stage_1_coil_performance_name")]
public string dehumidification_mode_1_stage_1_coil_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_mode_1_stage_1_2_coil_performance_object_type")]
public DehumidificationmodestagecoilperformanceobjecttypeType dehumidification_mode_1_stage_1_2_coil_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_mode_1_stage_1_2_coil_performance_name")]
public string dehumidification_mode_1_stage_1_2_coil_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-25;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum NormalmodestagecoilperformanceobjecttypeType
        {
        }
        
        public enum NormalmodestagecoilperformanceobjecttypeType
        {
        }
        
        public enum DehumidificationmodestagecoilperformanceobjecttypeType
        {
        }
        
        public enum DehumidificationmodestagecoilperformanceobjecttypeType
        {
        }
    }
    
    [JsonProperty("CoilPerformance:DX:Cooling")]
    [Description(@"Used to specify DX cooling coil performance for one mode of operation for a Coil:Cooling:DX:TwoStageWithHumidityControlMode object which may reference one to four CoilPerformance:DX:Cooling objects depending on the specified number of stages and dehumidification modes. In nearly all cases, the Rated Air Flow Rate will be the same for all performance objects associated with a given coil. If bypass is specified, the Rated Air Flow Rate includes both the bypassed flow and the flow through the active part of the coil.")]
    public class CoilPerformance_DX_Cooling
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_sensible_heat_ratio")]
public string gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_cooling_cop")]
public float gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_air_flow_bypassed_around_coil")]
public float fraction_of_air_flow_bypassed_around_coil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("total_cooling_capacity_function_of_temperature_curve_name")]
public string total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_function_of_flow_fraction_curve_name")]
public string total_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public float nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public float ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_capacity_time_constant")]
public float latent_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("evaporative_condenser_air_flow_rate")]
public string evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("sensible_heat_ratio_function_of_temperature_curve_name")]
public string sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow")]
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) cooling coil. Used with Zon" +
        "eHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is modeled separatel" +
        "y, see AirConditioner:VariableRefrigerantFlow.")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_sensible_heat_ratio")]
public string gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_ratio_modifier_function_of_temperature_curve_name")]
public string cooling_capacity_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_modifier_curve_function_of_flow_fraction_name")]
public string cooling_capacity_modifier_curve_function_of_flow_fraction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_inlet_node")]
public string coil_air_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_outlet_node")]
public string coil_air_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("name_of_water_storage_tank_for_condensate_collection")]
public string name_of_water_storage_tank_for_condensate_collection
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow")]
    [Description("Variable refrigerant flow (VRF) direct expansion (DX) heating coil (air-to-air he" +
        "at pump). Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing un" +
        "it is modeled separately, see AirConditioner:VariableRefrigerantFlow.")]
    public class Coil_Heating_DX_VariableRefrigerantFlow
    {
        

[JsonProperty("availability_schedule")]
public string availability_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_capacity")]
public string gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_inlet_node")]
public string coil_air_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_outlet_node")]
public string coil_air_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_ratio_modifier_function_of_temperature_curve_name")]
public string heating_capacity_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_modifier_function_of_flow_fraction_curve_name")]
public string heating_capacity_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at cooling mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    public class Coil_Cooling_DX_VariableRefrigerantFlow_FluidTemperatureControl
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_inlet_node")]
public string coil_air_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_outlet_node")]
public string coil_air_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_total_cooling_capacity")]
public string rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_sensible_heat_ratio")]
public string rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_unit_reference_superheating")]
public float indoor_unit_reference_superheating
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("indoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string indoor_unit_evaporating_temperature_function_of_superheating_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("name_of_water_storage_tank_for_condensate_collection")]
public string name_of_water_storage_tank_for_condensate_collection
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl")]
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control. It describes the the indoor unit coil of the system at heating mode. Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Outdoor unit is modeled separately, see AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    public class Coil_Heating_DX_VariableRefrigerantFlow_FluidTemperatureControl
    {
        

[JsonProperty("availability_schedule")]
public string availability_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_inlet_node")]
public string coil_air_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_air_outlet_node")]
public string coil_air_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_total_heating_capacity")]
public string rated_total_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_unit_reference_subcooling")]
public float indoor_unit_reference_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("indoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string indoor_unit_condensing_temperature_function_of_subcooling_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:Water")]
    [Description("Hot water heating coil, NTU-effectiveness model, assumes a cross-flow heat exchan" +
        "ger. Two options for capacity inputs: UA and water flow rate or capacity and des" +
        "ign temperatures.")]
    public class Coil_Heating_Water
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("u_factor_times_area_value")]
public string u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_water_flow_rate")]
public string maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)UFactorTimesAreaAndDesignWaterFlowRate;

[JsonProperty("rated_capacity")]
public string rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_inlet_water_temperature")]
public float rated_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)82.2;

[JsonProperty("rated_inlet_air_temperature")]
public float rated_inlet_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16.6;

[JsonProperty("rated_outlet_water_temperature")]
public float rated_outlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)71.1;

[JsonProperty("rated_outlet_air_temperature")]
public float rated_outlet_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)32.2;

[JsonProperty("rated_ratio_for_air_and_water_convection")]
public float rated_ratio_for_air_and_water_convection
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("design_water_temperature_difference")]
public float design_water_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum PerformanceinputmethodType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:Steam")]
    [Description("Steam heating coil. Condenses and sub-cools steam at loop pressure and discharges" +
        " condensate through steam traps to low pressure condensate line.")]
    public class Coil_Heating_Steam
    {
        
        private void TemperatureSetpointControl;
        
        private void ZoneLoadControl;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_steam_flow_rate")]
public string maximum_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("degree_of_subcooling")]
public float degree_of_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("degree_of_loop_subcooling")]
public float degree_of_loop_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_control_type")]
public CoilcontroltypeType coil_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Use ZoneLoadControl if the coil is contained within another component such as an " +
            "air terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpoi" +
            "ntControl if the coil is located directly in an air loop branch or outdoor air e" +
            "quipment list.")]
        public enum CoilcontroltypeType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:Electric")]
    [Description(@"Electric heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    public class Coil_Heating_Electric
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency")]
public float efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:Electric:MultiStage")]
    [Description(@"Electric heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    public class Coil_Heating_Electric_MultiStage
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_stages")]
public float number_of_stages
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_1_efficiency")]
public float stage_1_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_1_nominal_capacity")]
public string stage_1_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_efficiency")]
public float stage_2_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_nominal_capacity")]
public string stage_2_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_efficiency")]
public float stage_3_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_nominal_capacity")]
public string stage_3_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_efficiency")]
public float stage_4_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_nominal_capacity")]
public string stage_4_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:Fuel")]
    [Description(@"Gas or other fuel heating coil. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    public class Coil_Heating_Fuel
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)NaturalGas;

[JsonProperty("burner_efficiency")]
public float burner_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_electric_load")]
public float parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_fuel_load")]
public float parasitic_fuel_load
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:Gas:MultiStage")]
    [Description(@"Gas heating coil, multi-stage. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as an air terminal unit, zone HVAC equipment, or unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    public class Coil_Heating_Gas_MultiStage
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_gas_load")]
public float parasitic_gas_load
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_stages")]
public float number_of_stages
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_1_gas_burner_efficiency")]
public float stage_1_gas_burner_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_1_nominal_capacity")]
public string stage_1_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_1_parasitic_electric_load")]
public float stage_1_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_gas_burner_efficiency")]
public float stage_2_gas_burner_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_nominal_capacity")]
public string stage_2_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_parasitic_electric_load")]
public float stage_2_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_gas_burner_efficiency")]
public float stage_3_gas_burner_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_nominal_capacity")]
public string stage_3_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_parasitic_electric_load")]
public float stage_3_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_gas_burner_efficiency")]
public float stage_4_gas_burner_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_nominal_capacity")]
public string stage_4_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_parasitic_electric_load")]
public float stage_4_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:Desuperheater")]
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. If the coil is located directly in an air loop branch or outdoor air equipment list, then it is controlled on leaving air temperature and the Temperature Setpoint Node Name must be specified. If the coil is contained within another component such as a unitary system, then the coil is controlled by the parent component and the setpoint node name is not entered.")]
    public class Coil_Heating_Desuperheater
    {
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:TwoSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void Refrigeration:CompressorRack;
        
        private void Refrigeration:Condenser:AirCooled;
        
        private void Refrigeration:Condenser:EvaporativeCooled;
        
        private void Refrigeration:Condenser:WaterCooled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_reclaim_recovery_efficiency")]
public float heat_reclaim_recovery_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_source_object_type")]
public HeatingsourceobjecttypeType heating_source_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_source_name")]
public string heating_source_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_electric_load")]
public float parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatingsourceobjecttypeType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:DX:SingleSpeed")]
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), single-speed, with defrost controls" +
        ".")]
    public class Coil_Heating_DX_SingleSpeed
    {
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_capacity")]
public string gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_cop")]
public float gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_supply_fan_power_per_volume_flow_rate")]
public float rated_supply_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_flow_fraction_curve_name")]
public string heating_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_temperature_curve_name")]
public string energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_input_ratio_function_of_flow_fraction_curve_name")]
public string energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public float outdoor_dry_bulb_temperature_to_turn_on_compressor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)ReverseCycle;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("region_number_for_calculating_hspf")]
public float region_number_for_calculating_hspf
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("evaporator_air_inlet_node_name")]
public string evaporator_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name_for_evaporator_placement")]
public string zone_name_for_evaporator_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_coil_air_flow_rate")]
public string secondary_coil_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_coil_fan_flow_scaling_factor")]
public float secondary_coil_fan_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("nominal_sensible_heat_ratio_of_secondary_coil")]
public float nominal_sensible_heat_ratio_of_secondary_coil
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DefroststrategyType
        {
        }
        
        public enum DefrostcontrolType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:DX:MultiSpeed")]
    [Description(@"Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (includes electric or engine-driven compressor and outdoor fan), multi-speed (or variable-speed), with defrost controls. Requires two to four sets of performance data and will interpolate between speeds.")]
    public class Coil_Heating_DX_MultiSpeed
    {
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void No;
        
        private void Yes;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public float outdoor_dry_bulb_temperature_to_turn_on_compressor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)ReverseCycle;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("apply_part_load_fraction_to_speeds_greater_than_1")]
public ApplypartloadfractiontospeedsgreaterthanType apply_part_load_fraction_to_speeds_greater_than_1
{
    get
    {
    }
    set
    {
    }
}
 = (ApplypartloadfractiontospeedsgreaterthanType)No;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("region_number_for_calculating_hspf")]
public float region_number_for_calculating_hspf
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_gross_rated_heating_capacity")]
public string speed_1_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_gross_rated_heating_cop")]
public float speed_1_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_rated_air_flow_rate")]
public string speed_1_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_rated_supply_air_fan_power_per_volume_flow_rate")]
public float speed_1_rated_supply_air_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string speed_1_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_heating_capacity_function_of_flow_fraction_curve_name")]
public string speed_1_heating_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_part_load_fraction_correlation_curve_name")]
public string speed_1_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_rated_waste_heat_fraction_of_power_input")]
public float speed_1_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string speed_1_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_gross_rated_heating_capacity")]
public string speed_2_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_gross_rated_heating_cop")]
public float speed_2_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_rated_air_flow_rate")]
public string speed_2_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_rated_supply_air_fan_power_per_volume_flow_rate")]
public float speed_2_rated_supply_air_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string speed_2_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_heating_capacity_function_of_flow_fraction_curve_name")]
public string speed_2_heating_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_part_load_fraction_correlation_curve_name")]
public string speed_2_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_rated_waste_heat_fraction_of_power_input")]
public float speed_2_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string speed_2_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_gross_rated_heating_capacity")]
public string speed_3_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_gross_rated_heating_cop")]
public float speed_3_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_rated_air_flow_rate")]
public string speed_3_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_rated_supply_air_fan_power_per_volume_flow_rate")]
public float speed_3_rated_supply_air_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string speed_3_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_heating_capacity_function_of_flow_fraction_curve_name")]
public string speed_3_heating_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_part_load_fraction_correlation_curve_name")]
public string speed_3_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_rated_waste_heat_fraction_of_power_input")]
public float speed_3_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string speed_3_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_gross_rated_heating_capacity")]
public string speed_4_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_gross_rated_heating_cop")]
public float speed_4_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_rated_air_flow_rate")]
public string speed_4_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_rated_supply_air_fan_power_per_volume_flow_rate")]
public float speed_4_rated_supply_air_fan_power_per_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)773.3;

[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string speed_4_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_heating_capacity_function_of_flow_fraction_curve_name")]
public string speed_4_heating_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_part_load_fraction_correlation_curve_name")]
public string speed_4_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_rated_waste_heat_fraction_of_power_input")]
public float speed_4_rated_waste_heat_fraction_of_power_input
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string speed_4_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name_for_evaporator_placement")]
public string zone_name_for_evaporator_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_secondary_coil_air_flow_rate")]
public string speed_1_secondary_coil_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_secondary_coil_fan_flow_scaling_factor")]
public float speed_1_secondary_coil_fan_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("speed_1_nominal_sensible_heat_ratio_of_secondary_coil")]
public float speed_1_nominal_sensible_heat_ratio_of_secondary_coil
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string speed_1_sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string speed_1_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_secondary_coil_air_flow_rate")]
public string speed_2_secondary_coil_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_secondary_coil_fan_flow_scaling_factor")]
public float speed_2_secondary_coil_fan_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("speed_2_nominal_sensible_heat_ratio_of_secondary_coil")]
public float speed_2_nominal_sensible_heat_ratio_of_secondary_coil
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string speed_2_sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string speed_2_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_secondary_coil_air_flow_rate")]
public string speed_3_secondary_coil_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_secondary_coil_fan_flow_scaling_factor")]
public float speed_3_secondary_coil_fan_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("speed_3_nominal_sensible_heat_ratio_of_secondary_coil")]
public float speed_3_nominal_sensible_heat_ratio_of_secondary_coil
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string speed_3_sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string speed_3_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_secondary_coil_air_flow_rate")]
public string speed_4_secondary_coil_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_secondary_coil_fan_flow_scaling_factor")]
public float speed_4_secondary_coil_fan_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("speed_4_nominal_sensible_heat_ratio_of_secondary_coil")]
public float speed_4_nominal_sensible_heat_ratio_of_secondary_coil
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_sensible_heat_ratio_modifier_function_of_temperature_curve_name")]
public string speed_4_sensible_heat_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name")]
public string speed_4_sensible_heat_ratio_modifier_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DefroststrategyType
        {
        }
        
        public enum DefrostcontrolType
        {
        }
        
        public enum ApplypartloadfractiontospeedsgreaterthanType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:DX:VariableSpeed")]
    [Description("Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit (in" +
        "cludes electric compressor and outdoor fan), variable-speed, with defrost contro" +
        "ls. Requires two to ten sets of performance data and will interpolate between sp" +
        "eeds.")]
    public class Coil_Heating_DX_VariableSpeed
    {
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        

[JsonProperty("indoor_air_inlet_node_name")]
public string indoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_outlet_node_name")]
public string indoor_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("nominal_speed_level")]
public float nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("rated_heating_capacity_at_selected_nominal_speed_level")]
public string rated_heating_capacity_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string rated_air_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("energy_part_load_fraction_curve_name")]
public string energy_part_load_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_energy_input_ratio_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("outdoor_dry_bulb_temperature_to_turn_on_compressor")]
public float outdoor_dry_bulb_temperature_to_turn_on_compressor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)ReverseCycle;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("speed_1_reference_unit_gross_rated_heating_capacity")]
public float speed_1_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_heating_cop")]
public float speed_1_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public float speed_1_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string speed_1_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_heating_capacity")]
public float speed_2_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_heating_cop")]
public float speed_2_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public float speed_2_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string speed_2_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_heating_capacity")]
public float speed_3_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_heating_cop")]
public float speed_3_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public float speed_3_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string speed_3_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_heating_capacity")]
public float speed_4_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_heating_cop")]
public float speed_4_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public float speed_4_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string speed_4_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_4_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_heating_capacity")]
public float speed_5_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_heating_cop")]
public float speed_5_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public float speed_5_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_heating_capacity_function_of_temperature_curve_name")]
public string speed_5_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_5_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_5_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_heating_capacity")]
public float speed_6_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_heating_cop")]
public float speed_6_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public float speed_6_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_heating_capacity_function_of_temperature_curve_name")]
public string speed_6_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_6_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_6_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_heating_capacity")]
public float speed_7_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_heating_cop")]
public float speed_7_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public float speed_7_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_heating_capacity_function_of_temperature_curve_name")]
public string speed_7_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_7_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_7_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_heating_capacity")]
public float speed_8_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_heating_cop")]
public float speed_8_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public float speed_8_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_heating_capacity_function_of_temperature_curve_name")]
public string speed_8_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_8_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_8_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_heating_capacity")]
public float speed_9_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_heating_cop")]
public float speed_9_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public float speed_9_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_heating_capacity_function_of_temperature_curve_name")]
public string speed_9_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_9_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_9_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_heating_capacity")]
public float speed_10_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_heating_cop")]
public float speed_10_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public float speed_10_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_heating_capacity_function_of_temperature_curve_name")]
public string speed_10_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_10_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_10_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DefroststrategyType
        {
        }
        
        public enum DefrostcontrolType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:WaterToAirHeatPump:ParameterEstimation")]
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    public class Coil_Cooling_WaterToAirHeatPump_ParameterEstimation
    {
        
        private void Reciprocating;
        
        private void Rotary;
        
        private void Scroll;
        

[JsonProperty("compressor_type")]
public CompressortypeType compressor_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_type")]
public string refrigerant_type
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)R22;

[JsonProperty("design_source_side_flow_rate")]
public float design_source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cooling_coil_capacity")]
public float nominal_cooling_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public float nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public float ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("high_pressure_cutoff")]
public float high_pressure_cutoff
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_pressure_cutoff")]
public float low_pressure_cutoff
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_total_heat_transfer_coefficient")]
public float load_side_total_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outside_surface_heat_transfer_coefficient")]
public float load_side_outside_surface_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("superheat_temperature_at_the_evaporator_outlet")]
public float superheat_temperature_at_the_evaporator_outlet
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_power_losses")]
public float compressor_power_losses
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_efficiency")]
public float compressor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_piston_displacement")]
public float compressor_piston_displacement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_suction_discharge_pressure_drop")]
public float compressor_suction_discharge_pressure_drop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_clearance_factor")]
public float compressor_clearance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_volume_flow_rate")]
public float refrigerant_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("volume_ratio")]
public float volume_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leak_rate_coefficient")]
public float leak_rate_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_coefficient")]
public float source_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_resistance1")]
public float source_side_heat_transfer_resistance1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_resistance2")]
public float source_side_heat_transfer_resistance2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Parameters 1-5 are as named below. Parameters 6-10 depend on the type of compress" +
            "or and fluid. Refer to the InputOutputReference on the parameters required")]
        public enum CompressortypeType
        {
        }
    }
    
    [JsonProperty("Coil:Heating:WaterToAirHeatPump:ParameterEstimation")]
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), single-speed, parameter estimation model. Parameter estimation model is a deterministic model that requires a consistent set of parameters to describe the operating conditions of the heat pump components.")]
    public class Coil_Heating_WaterToAirHeatPump_ParameterEstimation
    {
        
        private void Reciprocating;
        
        private void Rotary;
        
        private void Scroll;
        

[JsonProperty("compressor_type")]
public CompressortypeType compressor_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_type")]
public string refrigerant_type
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)R22;

[JsonProperty("design_source_side_flow_rate")]
public float design_source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_capacity")]
public float gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_pressure_cutoff")]
public float high_pressure_cutoff
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_pressure_cutoff")]
public float low_pressure_cutoff
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_total_heat_transfer_coefficient")]
public float load_side_total_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("superheat_temperature_at_the_evaporator_outlet")]
public float superheat_temperature_at_the_evaporator_outlet
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_power_losses")]
public float compressor_power_losses
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_efficiency")]
public float compressor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_piston_displacement")]
public float compressor_piston_displacement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_suction_discharge_pressure_drop")]
public float compressor_suction_discharge_pressure_drop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_clearance_factor")]
public float compressor_clearance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_volume_flow_rate")]
public float refrigerant_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("volume_ratio")]
public float volume_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leak_rate_coefficient")]
public float leak_rate_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_coefficient")]
public float source_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_resistance1")]
public float source_side_heat_transfer_resistance1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_resistance2")]
public float source_side_heat_transfer_resistance2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Parameters 1-4 are as named below. Parameters 5-9 depend on the type of compresso" +
            "r. Refer to the InputOutputReference on the parameters required")]
        public enum CompressortypeType
        {
        }
    }
    
    [JsonProperty("Coil:Cooling:WaterToAirHeatPump:EquationFit")]
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), single-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance.")]
    public class Coil_Cooling_WaterToAirHeatPump_EquationFit
    {
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_flow_rate")]
public string rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_sensible_cooling_capacity")]
public string gross_rated_sensible_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_cooling_cop")]
public float gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_cooling_capacity_curve_name")]
public string total_cooling_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_cooling_capacity_curve_name")]
public string sensible_cooling_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_power_consumption_curve_name")]
public string cooling_power_consumption_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_time_for_condensate_removal_to_begin")]
public float nominal_time_for_condensate_removal_to_begin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity")]
public float ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit")]
    [Description(@"Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Optional inputs for moisture evaporation from wet coil when compressor cycles off with continuous fan operation. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds. Modeled as a single coil with variable-speed compressor.")]
    public class Coil_Cooling_WaterToAirHeatPump_VariableSpeedEquationFit
    {
        

[JsonProperty("water_to_refrigerant_hx_water_inlet_node_name")]
public string water_to_refrigerant_hx_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_to_refrigerant_hx_water_outlet_node_name")]
public string water_to_refrigerant_hx_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_inlet_node_name")]
public string indoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_outlet_node_name")]
public string indoor_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("nominal_speed_level")]
public float nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("gross_rated_total_cooling_capacity_at_selected_nominal_speed_level")]
public string gross_rated_total_cooling_capacity_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string rated_air_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_water_flow_rate_at_selected_nominal_speed_level")]
public string rated_water_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("nominal_time_for_condensate_to_begin_leaving_the_coil")]
public float nominal_time_for_condensate_to_begin_leaving_the_coil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity")]
public float initial_moisture_evaporation_rate_divided_by_steady_state_ac_latent_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("flag_for_using_hot_gas_reheat_0_or_1")]
public float flag_for_using_hot_gas_reheat_0_or_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("energy_part_load_fraction_curve_name")]
public string energy_part_load_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_1_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_1_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_cooling_cop")]
public float speed_1_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public float speed_1_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public float speed_1_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_1_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string speed_1_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_2_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_2_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_cooling_cop")]
public float speed_2_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public float speed_2_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public float speed_2_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_2_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string speed_2_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_3_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_3_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_cooling_cop")]
public float speed_3_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public float speed_3_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public float speed_3_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_3_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string speed_3_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_4_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_4_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_cooling_cop")]
public float speed_4_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public float speed_4_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public float speed_4_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_4_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string speed_4_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_5_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_5_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_cooling_cop")]
public float speed_5_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public float speed_5_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public float speed_5_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_5_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_5_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_waste_heat_function_of_temperature_curve_name")]
public string speed_5_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_6_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_6_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_cooling_cop")]
public float speed_6_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public float speed_6_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public float speed_6_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_6_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_6_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_waste_heat_function_of_temperature_curve_name")]
public string speed_6_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_7_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_7_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_cooling_cop")]
public float speed_7_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public float speed_7_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public float speed_7_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_7_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_7_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_waste_heat_function_of_temperature_curve_name")]
public string speed_7_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_8_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_8_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_cooling_cop")]
public float speed_8_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public float speed_8_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public float speed_8_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_8_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_8_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_waste_heat_function_of_temperature_curve_name")]
public string speed_8_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_9_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_9_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_cooling_cop")]
public float speed_9_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public float speed_9_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public float speed_9_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_9_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_9_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_waste_heat_function_of_temperature_curve_name")]
public string speed_9_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_total_cooling_capacity")]
public float speed_10_reference_unit_gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_sensible_heat_ratio")]
public float speed_10_reference_unit_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_cooling_cop")]
public float speed_10_reference_unit_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public float speed_10_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public float speed_10_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_cooling_capacity_function_of_temperature_curve_name")]
public string speed_10_total_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_10_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_waste_heat_function_of_temperature_curve_name")]
public string speed_10_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:WaterToAirHeatPump:EquationFit")]
    [Description("Direct expansion (DX) heating coil for water-to-air heat pump (includes electric " +
        "compressor), single-speed, equation-fit model. Equation-fit model uses normalize" +
        "d curves to describe the heat pump performance.")]
    public class Coil_Heating_WaterToAirHeatPump_EquationFit
    {
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_flow_rate")]
public string rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_capacity")]
public string gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_cop")]
public float gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_curve_name")]
public string heating_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_power_consumption_curve_name")]
public string heating_power_consumption_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit")]
    [Description(@"Direct expansion (DX) heating coil for water-to-air heat pump (includes electric compressor), variable-speed, equation-fit model. Equation-fit model uses normalized curves to describe the heat pump performance. Requires two to ten sets of performance data and will interpolate between speeds.")]
    public class Coil_Heating_WaterToAirHeatPump_VariableSpeedEquationFit
    {
        

[JsonProperty("water_to_refrigerant_hx_water_inlet_node_name")]
public string water_to_refrigerant_hx_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_to_refrigerant_hx_water_outlet_node_name")]
public string water_to_refrigerant_hx_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_inlet_node_name")]
public string indoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_air_outlet_node_name")]
public string indoor_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("nominal_speed_level")]
public float nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("rated_heating_capacity_at_selected_nominal_speed_level")]
public string rated_heating_capacity_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_air_flow_rate_at_selected_nominal_speed_level")]
public string rated_air_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_water_flow_rate_at_selected_nominal_speed_level")]
public string rated_water_flow_rate_at_selected_nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("energy_part_load_fraction_curve_name")]
public string energy_part_load_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_heating_capacity")]
public float speed_1_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_gross_rated_heating_cop")]
public float speed_1_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_air_flow")]
public float speed_1_reference_unit_rated_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public float speed_1_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_heating_capacity_function_of_temperature_curve_name")]
public string speed_1_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_1_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_1_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_waste_heat_function_of_temperature_curve_name")]
public string speed_1_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_heating_capacity")]
public float speed_2_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_gross_rated_heating_cop")]
public float speed_2_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public float speed_2_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public float speed_2_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_heating_capacity_function_of_temperature_curve_name")]
public string speed_2_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_2_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_2_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_waste_heat_function_of_temperature_curve_name")]
public string speed_2_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_heating_capacity")]
public float speed_3_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_gross_rated_heating_cop")]
public float speed_3_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public float speed_3_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public float speed_3_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_heating_capacity_function_of_temperature_curve_name")]
public string speed_3_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_3_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_3_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_waste_heat_function_of_temperature_curve_name")]
public string speed_3_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_heating_capacity")]
public float speed_4_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_gross_rated_heating_cop")]
public float speed_4_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public float speed_4_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public float speed_4_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_heating_capacity_function_of_temperature_curve_name")]
public string speed_4_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_4_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_4_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_waste_heat_function_of_temperature_curve_name")]
public string speed_4_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_heating_capacity")]
public float speed_5_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_gross_rated_heating_cop")]
public float speed_5_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public float speed_5_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public float speed_5_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_heating_capacity_function_of_temperature_curve_name")]
public string speed_5_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_5_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_5_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_waste_heat_function_of_temperature_curve_name")]
public string speed_5_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_heating_capacity")]
public float speed_6_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_gross_rated_heating_cop")]
public float speed_6_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public float speed_6_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public float speed_6_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_heating_capacity_function_of_temperature_curve_name")]
public string speed_6_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_6_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_6_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_waste_heat_function_of_temperature_curve_name")]
public string speed_6_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_heating_capacity")]
public float speed_7_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_gross_rated_heating_cop")]
public float speed_7_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public float speed_7_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public float speed_7_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_heating_capacity_function_of_temperature_curve_name")]
public string speed_7_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_7_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_7_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_waste_heat_function_of_temperature_curve_name")]
public string speed_7_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_heating_capacity")]
public float speed_8_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_gross_rated_heating_cop")]
public float speed_8_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public float speed_8_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public float speed_8_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_heating_capacity_function_of_temperature_curve_name")]
public string speed_8_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_8_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_8_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_waste_heat_function_of_temperature_curve_name")]
public string speed_8_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_heating_capacity")]
public float speed_9_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_gross_rated_heating_cop")]
public float speed_9_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public float speed_9_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public float speed_9_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_heating_capacity_function_of_temperature_curve_name")]
public string speed_9_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_9_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_9_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_waste_heat_function_of_temperature_curve_name")]
public string speed_9_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_heating_capacity")]
public float speed_10_reference_unit_gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_gross_rated_heating_cop")]
public float speed_10_reference_unit_gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public float speed_10_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public float speed_10_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_heating_capacity_function_of_temperature_curve_name")]
public string speed_10_heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_heating_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_10_heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_temperature_curve_name")]
public string speed_10_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name")]
public string speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions")]
public float speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_waste_heat_function_of_temperature_curve_name")]
public string speed_10_waste_heat_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Pumped")]
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:PumpedCondens" +
        "er system.")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Pumped
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void DryBulbTemperature;
        
        private void WetBulbTemperature;
        

[JsonProperty("rated_heating_capacity")]
public float rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_cop")]
public float rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio")]
public float rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public float rated_evaporator_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)19.7;

[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public float rated_evaporator_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13.5;

[JsonProperty("rated_condenser_inlet_water_temperature")]
public float rated_condenser_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)57.5;

[JsonProperty("rated_evaporator_air_flow_rate")]
public string rated_evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_condenser_water_flow_rate")]
public string rated_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EvaporatorfanpowerincludedinratedcopType evaporator_fan_power_included_in_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorfanpowerincludedinratedcopType)Yes;

[JsonProperty("condenser_pump_power_included_in_rated_cop")]
public CondenserpumppowerincludedinratedcopType condenser_pump_power_included_in_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserpumppowerincludedinratedcopType)No;

[JsonProperty("condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop")]
public CondenserpumpheatincludedinratedheatingcapacityandratedcopType condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserpumpheatincludedinratedheatingcapacityandratedcopType)No;

[JsonProperty("condenser_water_pump_power")]
public float condenser_water_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_of_condenser_pump_heat_to_water")]
public float fraction_of_condenser_pump_heat_to_water
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("evaporator_air_inlet_node_name")]
public string evaporator_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_outlet_node_name")]
public string evaporator_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_inlet_node_name")]
public string condenser_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_outlet_node_name")]
public string condenser_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public float maximum_ambient_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public EvaporatorairtemperaturetypeforcurveobjectsType evaporator_air_temperature_type_for_curve_objects
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorairtemperaturetypeforcurveobjectsType)WetBulbTemperature;

[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_air_flow_fraction_curve_name")]
public string heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_water_flow_fraction_curve_name")]
public string heating_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_cop_function_of_temperature_curve_name")]
public string heating_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_cop_function_of_air_flow_fraction_curve_name")]
public string heating_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_cop_function_of_water_flow_fraction_curve_name")]
public string heating_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
            "field impacts the calculation of compressor electric power.")]
        public enum EvaporatorfanpowerincludedinratedcopType
        {
        }
        
        [Description("Select Yes if the condenser pump power is included in the rated COP. This choice " +
            "field impacts the calculation of compressor electric power.")]
        public enum CondenserpumppowerincludedinratedcopType
        {
        }
        
        [Description("Select Yes if the condenser pump heat is included in the rated heating capacity a" +
            "nd rated COP. This choice field impacts the calculation of water heating capacit" +
            "y.")]
        public enum CondenserpumpheatincludedinratedheatingcapacityandratedcopType
        {
        }
        
        [Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
            "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
            "sed to evaluate these curves.")]
        public enum EvaporatorairtemperaturetypeforcurveobjectsType
        {
        }
    }
    
    [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
    [Description("Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX) sy" +
        "stem which includes a water heating coil, evaporator air coil, evaporator fan, e" +
        "lectric compressor, and water pump. Part of a WaterHeater:HeatPump:WrappedConden" +
        "ser system.")]
    public class Coil_WaterHeating_AirToWaterHeatPump_Wrapped
    {
        
        private void No;
        
        private void Yes;
        
        private void DryBulbTemperature;
        
        private void WetBulbTemperature;
        

[JsonProperty("rated_heating_capacity")]
public float rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_cop")]
public float rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio")]
public float rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public float rated_evaporator_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)19.7;

[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public float rated_evaporator_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13.5;

[JsonProperty("rated_condenser_water_temperature")]
public float rated_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)57.5;

[JsonProperty("rated_evaporator_air_flow_rate")]
public string rated_evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EvaporatorfanpowerincludedinratedcopType evaporator_fan_power_included_in_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorfanpowerincludedinratedcopType)Yes;

[JsonProperty("evaporator_air_inlet_node_name")]
public string evaporator_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_outlet_node_name")]
public string evaporator_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public float maximum_ambient_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public EvaporatorairtemperaturetypeforcurveobjectsType evaporator_air_temperature_type_for_curve_objects
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorairtemperaturetypeforcurveobjectsType)WetBulbTemperature;

[JsonProperty("heating_capacity_function_of_temperature_curve_name")]
public string heating_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_air_flow_fraction_curve_name")]
public string heating_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_cop_function_of_temperature_curve_name")]
public string heating_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_cop_function_of_air_flow_fraction_curve_name")]
public string heating_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
            "field impacts the calculation of compressor electric power.")]
        public enum EvaporatorfanpowerincludedinratedcopType
        {
        }
        
        [Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
            "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
            "sed to evaluate these curves.")]
        public enum EvaporatorairtemperaturetypeforcurveobjectsType
        {
        }
    }
    
    [JsonProperty("Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed")]
    [Description(@"vairlable-speed Heat pump water heater (VSHPWH) heating coil, air-to-water direct-expansion (DX) system which includes a variable-speed water heating coil, evaporator air coil, evaporator fan, electric compressor, and water pump. Part of a WaterHeater:HeatPump system.")]
    public class Coil_WaterHeating_AirToWaterHeatPump_VariableSpeed
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void DryBulbTemperature;
        
        private void WetBulbTemperature;
        

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("nominal_speed_level")]
public float nominal_speed_level
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("rated_water_heating_capacity")]
public float rated_water_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_evaporator_inlet_air_dry_bulb_temperature")]
public float rated_evaporator_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)19.7;

[JsonProperty("rated_evaporator_inlet_air_wet_bulb_temperature")]
public float rated_evaporator_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13.5;

[JsonProperty("rated_condenser_inlet_water_temperature")]
public float rated_condenser_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)57.5;

[JsonProperty("rated_evaporator_air_flow_rate")]
public string rated_evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_condenser_water_flow_rate")]
public string rated_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_fan_power_included_in_rated_cop")]
public EvaporatorfanpowerincludedinratedcopType evaporator_fan_power_included_in_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorfanpowerincludedinratedcopType)Yes;

[JsonProperty("condenser_pump_power_included_in_rated_cop")]
public CondenserpumppowerincludedinratedcopType condenser_pump_power_included_in_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserpumppowerincludedinratedcopType)No;

[JsonProperty("condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop")]
public CondenserpumpheatincludedinratedheatingcapacityandratedcopType condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserpumpheatincludedinratedheatingcapacityandratedcopType)No;

[JsonProperty("fraction_of_condenser_pump_heat_to_water")]
public float fraction_of_condenser_pump_heat_to_water
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("evaporator_air_inlet_node_name")]
public string evaporator_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_outlet_node_name")]
public string evaporator_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_inlet_node_name")]
public string condenser_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_outlet_node_name")]
public string condenser_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("crankcase_heater_capacity")]
public float crankcase_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_ambient_temperature_for_crankcase_heater_operation")]
public float maximum_ambient_temperature_for_crankcase_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("evaporator_air_temperature_type_for_curve_objects")]
public EvaporatorairtemperaturetypeforcurveobjectsType evaporator_air_temperature_type_for_curve_objects
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporatorairtemperaturetypeforcurveobjectsType)WetBulbTemperature;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_1")]
public float rated_water_heating_capacity_at_speed_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_1")]
public float rated_water_heating_cop_at_speed_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_1")]
public float rated_sensible_heat_ratio_at_speed_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_1_reference_unit_rated_air_flow_rate")]
public float speed_1_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_rated_water_flow_rate")]
public float speed_1_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_1_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_1_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_1_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_1_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_cop_function_of_temperature_curve_name")]
public string speed_1_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_cop_function_of_air_flow_fraction_curve_name")]
public string speed_1_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_1_cop_function_of_water_flow_fraction_curve_name")]
public string speed_1_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_2")]
public float rated_water_heating_capacity_at_speed_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_2")]
public float rated_water_heating_cop_at_speed_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_2")]
public float rated_sensible_heat_ratio_at_speed_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_2_reference_unit_rated_air_flow_rate")]
public float speed_2_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_rated_water_flow_rate")]
public float speed_2_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_2_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_2_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_2_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_2_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_cop_function_of_temperature_curve_name")]
public string speed_2_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_cop_function_of_air_flow_fraction_curve_name")]
public string speed_2_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_2_cop_function_of_water_flow_fraction_curve_name")]
public string speed_2_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_3")]
public float rated_water_heating_capacity_at_speed_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_3")]
public float rated_water_heating_cop_at_speed_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_3")]
public float rated_sensible_heat_ratio_at_speed_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_3_reference_unit_rated_air_flow_rate")]
public float speed_3_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_rated_water_flow_rate")]
public float speed_3_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_3_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_3_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_3_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_3_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_cop_function_of_temperature_curve_name")]
public string speed_3_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_cop_function_of_air_flow_fraction_curve_name")]
public string speed_3_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_3_cop_function_of_water_flow_fraction_curve_name")]
public string speed_3_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_4")]
public float rated_water_heating_capacity_at_speed_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_4")]
public float rated_water_heating_cop_at_speed_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_4")]
public float rated_sensible_heat_ratio_at_speed_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_4_reference_unit_rated_air_flow_rate")]
public float speed_4_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_rated_water_flow_rate")]
public float speed_4_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_4_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_4_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_4_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_4_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_cop_function_of_temperature_curve_name")]
public string speed_4_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_cop_function_of_air_flow_fraction_curve_name")]
public string speed_4_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_4_cop_function_of_water_flow_fraction_curve_name")]
public string speed_4_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_5")]
public float rated_water_heating_capacity_at_speed_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_5")]
public float rated_water_heating_cop_at_speed_5
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_5")]
public float rated_sensible_heat_ratio_at_speed_5
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_5_reference_unit_rated_air_flow_rate")]
public float speed_5_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_rated_water_flow_rate")]
public float speed_5_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_5_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_5_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_5_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_5_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_cop_function_of_temperature_curve_name")]
public string speed_5_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_cop_function_of_air_flow_fraction_curve_name")]
public string speed_5_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_5_cop_function_of_water_flow_fraction_curve_name")]
public string speed_5_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_6")]
public float rated_water_heating_capacity_at_speed_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_6")]
public float rated_water_heating_cop_at_speed_6
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_6")]
public float rated_sensible_heat_ratio_at_speed_6
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_6_reference_unit_rated_air_flow_rate")]
public float speed_6_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_rated_water_flow_rate")]
public float speed_6_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_6_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_6_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_6_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_6_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_cop_function_of_temperature_curve_name")]
public string speed_6_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_cop_function_of_air_flow_fraction_curve_name")]
public string speed_6_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_6_cop_function_of_water_flow_fraction_curve_name")]
public string speed_6_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_7")]
public float rated_water_heating_capacity_at_speed_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_7")]
public float rated_water_heating_cop_at_speed_7
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_7")]
public float rated_sensible_heat_ratio_at_speed_7
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_7_reference_unit_rated_air_flow_rate")]
public float speed_7_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_rated_water_flow_rate")]
public float speed_7_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_7_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_7_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_7_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_7_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_cop_function_of_temperature_curve_name")]
public string speed_7_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_cop_function_of_air_flow_fraction_curve_name")]
public string speed_7_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_7_cop_function_of_water_flow_fraction_curve_name")]
public string speed_7_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_8")]
public float rated_water_heating_capacity_at_speed_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_8")]
public float rated_water_heating_cop_at_speed_8
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_8")]
public float rated_sensible_heat_ratio_at_speed_8
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_8_reference_unit_rated_air_flow_rate")]
public float speed_8_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_rated_water_flow_rate")]
public float speed_8_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_8_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_8_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_8_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_8_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_cop_function_of_temperature_curve_name")]
public string speed_8_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_cop_function_of_air_flow_fraction_curve_name")]
public string speed_8_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_8_cop_function_of_water_flow_fraction_curve_name")]
public string speed_8_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_9")]
public float rated_water_heating_capacity_at_speed_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_9")]
public float rated_water_heating_cop_at_speed_9
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_9")]
public float rated_sensible_heat_ratio_at_speed_9
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_9_reference_unit_rated_air_flow_rate")]
public float speed_9_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_rated_water_flow_rate")]
public float speed_9_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_9_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_9_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_9_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_9_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_cop_function_of_temperature_curve_name")]
public string speed_9_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_cop_function_of_air_flow_fraction_curve_name")]
public string speed_9_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_9_cop_function_of_water_flow_fraction_curve_name")]
public string speed_9_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_capacity_at_speed_10")]
public float rated_water_heating_capacity_at_speed_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_heating_cop_at_speed_10")]
public float rated_water_heating_cop_at_speed_10
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("rated_sensible_heat_ratio_at_speed_10")]
public float rated_sensible_heat_ratio_at_speed_10
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("speed_10_reference_unit_rated_air_flow_rate")]
public float speed_10_reference_unit_rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_rated_water_flow_rate")]
public float speed_10_reference_unit_rated_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_reference_unit_water_pump_input_power_at_rated_conditions")]
public float speed_10_reference_unit_water_pump_input_power_at_rated_conditions
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_wh_capacity_function_of_temperature_curve_name")]
public string speed_10_total_wh_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_wh_capacity_function_of_air_flow_fraction_curve_name")]
public string speed_10_total_wh_capacity_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_total_wh_capacity_function_of_water_flow_fraction_curve_name")]
public string speed_10_total_wh_capacity_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_cop_function_of_temperature_curve_name")]
public string speed_10_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_cop_function_of_air_flow_fraction_curve_name")]
public string speed_10_cop_function_of_air_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_10_cop_function_of_water_flow_fraction_curve_name")]
public string speed_10_cop_function_of_water_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select Yes if the evaporator fan power is included in the rated COP. This choice " +
            "field impacts the calculation of compressor electric power.")]
        public enum EvaporatorfanpowerincludedinratedcopType
        {
        }
        
        [Description("Select Yes if the condenser pump power is included in the rated COP. This choice " +
            "field impacts the calculation of compressor electric power.")]
        public enum CondenserpumppowerincludedinratedcopType
        {
        }
        
        [Description("Select Yes if the condenser pump heat is included in the rated heating capacity a" +
            "nd rated COP. This choice field impacts the calculation of water heating capacit" +
            "y.")]
        public enum CondenserpumpheatincludedinratedheatingcapacityandratedcopType
        {
        }
        
        [Description("Determines temperature type for heating capacity curves and heating COP curves. T" +
            "his input determines whether the inlet air dry-bulb or wet-bulb temperature is u" +
            "sed to evaluate these curves.")]
        public enum EvaporatorairtemperaturetypeforcurveobjectsType
        {
        }
    }
    
    [JsonProperty("Coil:WaterHeating:Desuperheater")]
    [Description(@"Desuperheater air heating coil. The heating energy provided by this coil is reclaimed from the superheated refrigerant gas leaving a compressor and does not impact the performance of the compressor. This coil must be used with a water heater tank, see Water Heater:Mixed.")]
    public class Coil_WaterHeating_Desuperheater
    {
        
        private void WaterHeater:Mixed;
        
        private void WaterHeater:Stratified;
        
        private void Coil:Cooling:DX:MultiSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:TwoSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void Coil:Cooling:WaterToAirHeatPump:EquationFit;
        
        private void Refrigeration:CompressorRack;
        
        private void Refrigeration:Condenser:AirCooled;
        
        private void Refrigeration:Condenser:EvaporativeCooled;
        
        private void Refrigeration:Condenser:WaterCooled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dead_band_temperature_difference")]
public float dead_band_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("rated_heat_reclaim_recovery_efficiency")]
public float rated_heat_reclaim_recovery_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_inlet_water_temperature")]
public float rated_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_outdoor_air_temperature")]
public float rated_outdoor_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_inlet_water_temperature_for_heat_reclaim")]
public float maximum_inlet_water_temperature_for_heat_reclaim
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_reclaim_efficiency_function_of_temperature_curve_name")]
public string heat_reclaim_efficiency_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_object_type")]
public TankobjecttypeType tank_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (TankobjecttypeType)WaterHeater:Mixed;

[JsonProperty("tank_name")]
public string tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_source_object_type")]
public HeatingsourceobjecttypeType heating_source_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_source_name")]
public string heating_source_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_flow_rate")]
public float water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_pump_power")]
public float water_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_of_pump_heat_to_water")]
public float fraction_of_pump_heat_to_water
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("on_cycle_parasitic_electric_load")]
public float on_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_electric_load")]
public float off_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Specify the type of water heater tank used by this desuperheater water heating co" +
            "il.")]
        public enum TankobjecttypeType
        {
        }
        
        [Description("The type of DX system that is providing waste heat for reclaim.")]
        public enum HeatingsourceobjecttypeType
        {
        }
    }
    
    [JsonProperty("CoilSystem:Cooling:DX")]
    [Description("Virtual container component that consists of a DX cooling coil and its associated" +
        " controls. This control object supports several different types of DX cooling co" +
        "ils and may be placed directly in an air loop branch or outdoor air equipment li" +
        "st.")]
    public class CoilSystem_Cooling_DX
    {
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed:ThermalStorage;
        
        private void Coil:Cooling:DX:TwoSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_cooling_coil_system_inlet_node_name")]
public string dx_cooling_coil_system_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_cooling_coil_system_outlet_node_name")]
public string dx_cooling_coil_system_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_cooling_coil_system_sensor_node_name")]
public string dx_cooling_coil_system_sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("run_on_sensible_load")]
public RunonsensibleloadType run_on_sensible_load
{
    get
    {
    }
    set
    {
    }
}
 = (RunonsensibleloadType)Yes;

[JsonProperty("run_on_latent_load")]
public RunonlatentloadType run_on_latent_load
{
    get
    {
    }
    set
    {
    }
}
 = (RunonlatentloadType)No;

[JsonProperty("use_outdoor_air_dx_cooling_coil")]
public UseoutdoorairdxcoolingcoilType use_outdoor_air_dx_cooling_coil
{
    get
    {
    }
    set
    {
    }
}
 = (UseoutdoorairdxcoolingcoilType)No;

[JsonProperty("outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature")]
public float outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
        
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. If no sensible load exists, and Run on Latent Load = Yes, and a latent load exists, the unit will operate to meet the latent load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid for all coil types. For all dehumidification controls, the max humidity setpoint on the Sensor Node is used. SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum, or SetpointManager:MultiZone:MaximumHumidity:Average, and SetpointManager:OutdoorAirPretreat (optional) objects.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description("If Yes, unit will run if there is a sensible load. If No, unit will not run if th" +
            "ere is only a sensible load. Dehumidification controls will be active if specifi" +
            "ed.")]
        public enum RunonsensibleloadType
        {
        }
        
        [Description("If Yes, unit will run if there is a latent load. even if there is no sensible loa" +
            "d. If No, unit will not run only if there is a latent load. Dehumidification con" +
            "trols will be active if specified.")]
        public enum RunonlatentloadType
        {
        }
        
        [Description(@"This input field is designed for use with DX cooling coils with low air flow to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow to capacity ratio range may also use this input field. If Yes, the DX cooling coil runs as 100% DOAS DX coil or low flow to capacity ratio range. If No, the DX cooling coil runs as a regular DX coil. If left blank the default is regular DX coil.")]
        public enum UseoutdoorairdxcoolingcoilType
        {
        }
    }
    
    [JsonProperty("CoilSystem:Heating:DX")]
    [Description("Virtual container component that consists of a DX heating coil (heat pump) and it" +
        "s associated controls. This control object supports two different types of DX he" +
        "ating coils and may be placed directly in an air loop branch or outdoor air equi" +
        "pment list.")]
    public class CoilSystem_Heating_DX
    {
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:DX:VariableSpeed;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("CoilSystem:Cooling:Water:HeatExchangerAssisted")]
    [Description(@"Virtual component consisting of a chilled-water cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    public class CoilSystem_Cooling_Water_HeatExchangerAssisted
    {
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        

[JsonProperty("heat_exchanger_object_type")]
public HeatexchangerobjecttypeType heat_exchanger_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_name")]
public string heat_exchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatexchangerobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("CoilSystem:Cooling:DX:HeatExchangerAssisted")]
    [Description(@"Virtual component consisting of a direct expansion (DX) cooling coil and an air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the cooling coil and reuses this energy to reheat the supply air leaving the cooling coil. This heat exchange process improves the latent removal performance of the cooling coil (lower sensible heat ratio).")]
    public class CoilSystem_Cooling_DX_HeatExchangerAssisted
    {
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void HeatExchanger:Desiccant:BalancedFlow;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        

[JsonProperty("heat_exchanger_object_type")]
public HeatexchangerobjecttypeType heat_exchanger_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_name")]
public string heat_exchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatexchangerobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("CoilSystem:IntegratedHeatPump:AirSource")]
    [Description("This object is used for air-source integrated heat pump, a collection of its work" +
        "ing modes.")]
    public class CoilSystem_IntegratedHeatPump_AirSource
    {
        

[JsonProperty("supply_hot_water_flow_sensor_node_name")]
public string supply_hot_water_flow_sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("space_cooling_coil_name")]
public string space_cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("space_heating_coil_name")]
public string space_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dedicated_water_heating_coil_name")]
public string dedicated_water_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("scwh_coil_name")]
public string scwh_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("scdwh_cooling_coil_name")]
public string scdwh_cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("scdwh_water_heating_coil_name")]
public string scdwh_water_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shdwh_heating_coil_name")]
public string shdwh_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shdwh_water_heating_coil_name")]
public string shdwh_water_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indoor_temperature_limit_for_scwh_mode")]
public float indoor_temperature_limit_for_scwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("ambient_temperature_limit_for_scwh_mode")]
public float ambient_temperature_limit_for_scwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)27;

[JsonProperty("indoor_temperature_above_which_wh_has_higher_priority")]
public float indoor_temperature_above_which_wh_has_higher_priority
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("ambient_temperature_above_which_wh_has_higher_priority")]
public float ambient_temperature_above_which_wh_has_higher_priority
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("flag_to_indicate_load_control_in_scwh_mode")]
public float flag_to_indicate_load_control_in_scwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_speed_level_for_scwh_mode")]
public float minimum_speed_level_for_scwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("maximum_water_flow_volume_before_switching_from_scdwh_to_scwh_mode")]
public float maximum_water_flow_volume_before_switching_from_scdwh_to_scwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_speed_level_for_scdwh_mode")]
public float minimum_speed_level_for_scdwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("maximum_running_time_before_allowing_electric_resistance_heat_use_during_shdwh_mo" +
    "de")]
public float maximum_running_time_before_allowing_electric_resistance_heat_use_during_shdwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)360;

[JsonProperty("minimum_speed_level_for_shdwh_mode")]
public float minimum_speed_level_for_shdwh_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("Coil:Cooling:DX:SingleSpeed:ThermalStorage")]
    [Description("Direct expansion (DX) cooling coil and condensing unit (includes electric compres" +
        "sor and condenser fan), single-speed with packaged integrated thermal storage fo" +
        "r cooling.")]
    public class Coil_Cooling_DX_SingleSpeed_ThermalStorage
    {
        
        private void EMSControlled;
        
        private void ScheduledModes;
        
        private void Ice;
        
        private void UserDefinedFluidType;
        
        private void Water;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operating_mode_control_method")]
public OperatingmodecontrolmethodType operating_mode_control_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_mode_control_schedule_name")]
public string operation_mode_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_type")]
public StoragetypeType storage_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("user_defined_fluid_type")]
public string user_defined_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_storage_volume")]
public string fluid_storage_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ice_storage_capacity")]
public string ice_storage_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_capacity_sizing_factor")]
public float storage_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_ambient_temperature_node_name")]
public string storage_tank_ambient_temperature_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_to_ambient_u_value_times_area_heat_transfer_coefficient")]
public float storage_tank_to_ambient_u_value_times_area_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_storage_tank_rating_temperature")]
public float fluid_storage_tank_rating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_evaporator_air_flow_rate")]
public string rated_evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_inlet_node_name")]
public string evaporator_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_outlet_node_name")]
public string evaporator_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_available")]
public CoolingonlymodeavailableType cooling_only_mode_available
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_rated_total_evaporator_cooling_capacity")]
public string cooling_only_mode_rated_total_evaporator_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_rated_sensible_heat_ratio")]
public float cooling_only_mode_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("cooling_only_mode_rated_cop")]
public float cooling_only_mode_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve" +
    "_name")]
public string cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_cur" +
    "ve_name")]
public string cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name")]
public string cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_part_load_fraction_correlation_curve_name")]
public string cooling_only_mode_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_available")]
public CoolingandchargemodeavailableType cooling_and_charge_mode_available
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_rated_total_evaporator_cooling_capacity")]
public string cooling_and_charge_mode_rated_total_evaporator_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_capacity_sizing_factor")]
public float cooling_and_charge_mode_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("cooling_and_charge_mode_rated_storage_charging_capacity")]
public string cooling_and_charge_mode_rated_storage_charging_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_capacity_sizing_factor")]
public float cooling_and_charge_mode_storage_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("cooling_and_charge_mode_rated_sensible_heat_ratio")]
public float cooling_and_charge_mode_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("cooling_and_charge_mode_cooling_rated_cop")]
public float cooling_and_charge_mode_cooling_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("cooling_and_charge_mode_charging_rated_cop")]
public float cooling_and_charge_mode_charging_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature" +
    "_curve_name")]
public string cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fracti" +
    "on_curve_name")]
public string cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_cur" +
    "ve_name")]
public string cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_c" +
    "urve_name")]
public string cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name")]
public string cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_nam" +
    "e")]
public string cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_" +
    "curve_name")]
public string cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_" +
    "name")]
public string cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curv" +
    "e_name")]
public string cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name")]
public string cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_available")]
public CoolinganddischargemodeavailableType cooling_and_discharge_mode_available
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity")]
public string cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_evaporator_capacity_sizing_factor")]
public float cooling_and_discharge_mode_evaporator_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_and_discharge_mode_rated_storage_discharging_capacity")]
public string cooling_and_discharge_mode_rated_storage_discharging_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor")]
public float cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_and_discharge_mode_rated_sensible_heat_ratio")]
public float cooling_and_discharge_mode_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("cooling_and_discharge_mode_cooling_rated_cop")]
public float cooling_and_discharge_mode_cooling_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("cooling_and_discharge_mode_discharging_rated_cop")]
public float cooling_and_discharge_mode_discharging_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperat" +
    "ure_curve_name")]
public string cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fra" +
    "ction_curve_name")]
public string cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_" +
    "curve_name")]
public string cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fractio" +
    "n_curve_name")]
public string cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name")]
public string cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_temperature_cur" +
    "ve_name")]
public string cooling_and_discharge_mode_storage_discharge_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_flow_fraction_c" +
    "urve_name")]
public string cooling_and_discharge_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporato" +
    "r_plr_curve_name")]
public string cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_cur" +
    "ve_name")]
public string cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_c" +
    "urve_name")]
public string cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_na" +
    "me")]
public string cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name" +
    "")]
public string cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_na" +
    "me")]
public string cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charge_only_mode_available")]
public ChargeonlymodeavailableType charge_only_mode_available
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charge_only_mode_rated_storage_charging_capacity")]
public string charge_only_mode_rated_storage_charging_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charge_only_mode_capacity_sizing_factor")]
public float charge_only_mode_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("charge_only_mode_charging_rated_cop")]
public float charge_only_mode_charging_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name")]
public string charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name")]
public string charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_available")]
public DischargeonlymodeavailableType discharge_only_mode_available
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_rated_storage_discharging_capacity")]
public string discharge_only_mode_rated_storage_discharging_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_capacity_sizing_factor")]
public float discharge_only_mode_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("discharge_only_mode_rated_sensible_heat_ratio")]
public float discharge_only_mode_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_rated_cop")]
public float discharge_only_mode_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name" +
    "")]
public string discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_na" +
    "me")]
public string discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name")]
public string discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name")]
public string discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_part_load_fraction_correlation_curve_name")]
public string discharge_only_mode_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name")]
public string discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name")]
public string discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_electric_power")]
public float ancillary_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_weather_operation_minimum_outdoor_air_temperature")]
public float cold_weather_operation_minimum_outdoor_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_weather_operation_ancillary_power")]
public float cold_weather_operation_ancillary_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_outlet_node_name")]
public string condenser_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_design_air_flow_rate")]
public string condenser_design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_flow_sizing_factor")]
public float condenser_air_flow_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_availability_schedule_name")]
public string basin_heater_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_plant_connection_inlet_node_name")]
public string storage_tank_plant_connection_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_plant_connection_outlet_node_name")]
public string storage_tank_plant_connection_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_plant_connection_design_flow_rate")]
public float storage_tank_plant_connection_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_plant_connection_heat_transfer_effectiveness")]
public float storage_tank_plant_connection_heat_transfer_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("storage_tank_minimum_operating_limit_fluid_temperature")]
public float storage_tank_minimum_operating_limit_fluid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_tank_maximum_operating_limit_fluid_temperature")]
public float storage_tank_maximum_operating_limit_fluid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OperatingmodecontrolmethodType
        {
        }
        
        public enum StoragetypeType
        {
        }
        
        public enum CoolingonlymodeavailableType
        {
        }
        
        public enum CoolingandchargemodeavailableType
        {
        }
        
        public enum CoolinganddischargemodeavailableType
        {
        }
        
        public enum ChargeonlymodeavailableType
        {
        }
        
        public enum DischargeonlymodeavailableType
        {
        }
        
        public enum CondensertypeType
        {
        }
    }
}
namespace EnergyPlus.ComplianceObjects
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Compliance:Building")]
    [Description("Building level inputs related to compliance to building standards, building codes" +
        ", and beyond energy code programs.")]
    public class Compliance_Building
    {
        

[JsonProperty("building_rotation_for_appendix_g")]
public float building_rotation_for_appendix_g
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
}
namespace EnergyPlus.CondenserEquipmentandHeatExchangers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("CoolingTower:SingleSpeed")]
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a single-speed fan drawing air through the tower (induced-draft configuration). Added fluid bypass as an additional capacity control. 8/2008. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    public class CoolingTower_SingleSpeed
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        
        private void FanCycling;
        
        private void FluidBypass;
        
        private void MaximalCell;
        
        private void MinimalCell;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_fan_power")]
public string design_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_u_factor_times_area_value")]
public string design_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_regime_air_flow_rate")]
public string free_convection_regime_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public float free_convection_regime_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string free_convection_regime_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public float free_convection_u_factor_times_area_value_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)UFactorTimesAreaAndDesignWaterFlowRate;

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public float heat_rejection_capacity_and_nominal_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("nominal_capacity")]
public float nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_capacity")]
public string free_convection_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public float free_convection_nominal_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public float design_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public float design_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25.6;

[JsonProperty("design_approach_temperature")]
public string design_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_range_temperature")]
public string design_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control")]
public CapacitycontrolType capacity_control
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolType)FanCycling;

[JsonProperty("number_of_cells")]
public float number_of_cells
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cell_control")]
public CellcontrolType cell_control
{
    get
    {
    }
    set
    {
    }
}
 = (CellcontrolType)MinimalCell;

[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public float cell_minimum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public float cell_maximum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("User can define tower thermal performance by specifying the tower UA, the Design " +
            "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
            " capacity")]
        public enum PerformanceinputmethodType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
        
        public enum CapacitycontrolType
        {
        }
        
        public enum CellcontrolType
        {
        }
    }
    
    [JsonProperty("CoolingTower:TwoSpeed")]
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a two-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    public class CoolingTower_TwoSpeed
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        
        private void MaximalCell;
        
        private void MinimalCell;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_air_flow_rate")]
public string high_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_fan_power")]
public string high_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string high_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate")]
public string low_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public float low_fan_speed_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("low_fan_speed_fan_power")]
public string low_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public float low_fan_speed_fan_power_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.16;

[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string low_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public float low_fan_speed_u_factor_times_area_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("free_convection_regime_air_flow_rate")]
public string free_convection_regime_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public float free_convection_regime_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string free_convection_regime_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public float free_convection_u_factor_times_area_value_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)UFactorTimesAreaAndDesignWaterFlowRate;

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public float heat_rejection_capacity_and_nominal_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("high_speed_nominal_capacity")]
public float high_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_nominal_capacity")]
public string low_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_nominal_capacity_sizing_factor")]
public float low_speed_nominal_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("free_convection_nominal_capacity")]
public string free_convection_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public float free_convection_nominal_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public float design_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public float design_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25.6;

[JsonProperty("design_approach_temperature")]
public string design_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_range_temperature")]
public string design_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cells")]
public float number_of_cells
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cell_control")]
public CellcontrolType cell_control
{
    get
    {
    }
    set
    {
    }
}
 = (CellcontrolType)MinimalCell;

[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public float cell_minimum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public float cell_maximum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("User can define tower thermal performance by specifying the tower UA, the Design " +
            "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
            " capacity")]
        public enum PerformanceinputmethodType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
        
        public enum CellcontrolType
        {
        }
    }
    
    [JsonProperty("CoolingTower:VariableSpeed:Merkel")]
    [Description(@"This tower model is based on Merkel's theory, which is also the basis for the tower model in ASHRAE's HVAC1 Toolkit. The open wet cooling tower is modeled as a counter flow heat exchanger with a variable-speed fan drawing air through the tower (induced-draft configuration). For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    public class CoolingTower_VariableSpeed_Merkel
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        
        private void MaximalCell;
        
        private void MinimalCell;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)NominalCapacity;

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public float heat_rejection_capacity_and_nominal_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_nominal_capacity")]
public string free_convection_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_nominal_capacity_sizing_factor")]
public float free_convection_nominal_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate_per_unit_of_nominal_capacity")]
public float design_water_flow_rate_per_unit_of_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5.382E-08;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate_per_unit_of_nominal_capacity")]
public float design_air_flow_rate_per_unit_of_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.76316E-05;

[JsonProperty("minimum_air_flow_rate_ratio")]
public float minimum_air_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("design_fan_power")]
public string design_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_fan_power_per_unit_of_nominal_capacity")]
public float design_fan_power_per_unit_of_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0105;

[JsonProperty("fan_power_modifier_function_of_air_flow_rate_ratio_curve_name")]
public string fan_power_modifier_function_of_air_flow_rate_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_regime_air_flow_rate")]
public string free_convection_regime_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_regime_air_flow_rate_sizing_factor")]
public float free_convection_regime_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string design_air_flow_rate_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_convection_regime_u_factor_times_area_value")]
public string free_convection_regime_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("free_convection_u_factor_times_area_value_sizing_factor")]
public float free_convection_u_factor_times_area_value_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("u_factor_times_area_modifier_function_of_air_flow_ratio_curve_name")]
public string u_factor_times_area_modifier_function_of_air_flow_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("u_factor_times_area_modifier_function_of_wetbulb_temperature_difference_curve_nam" +
    "e")]
public string u_factor_times_area_modifier_function_of_wetbulb_temperature_difference_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("u_factor_times_area_modifier_function_of_water_flow_ratio_curve_name")]
public string u_factor_times_area_modifier_function_of_water_flow_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_inlet_air_dry_bulb_temperature")]
public float design_inlet_air_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public float design_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25.6;

[JsonProperty("design_approach_temperature")]
public string design_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_range_temperature")]
public string design_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cells")]
public float number_of_cells
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cell_control")]
public CellcontrolType cell_control
{
    get
    {
    }
    set
    {
    }
}
 = (CellcontrolType)MinimalCell;

[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public float cell_minimum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public float cell_maximum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("User can define tower thermal performance by specifying the tower UA, the Design " +
            "Air Flow Rate and the Design Water Flow Rate, or by specifying the tower nominal" +
            " capacity")]
        public enum PerformanceinputmethodType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
        
        public enum CellcontrolType
        {
        }
    }
    
    [JsonProperty("CoolingTower:VariableSpeed")]
    [Description(@"This open wet tower model is based on purely empirical algorithms derived from manufacturer's performance data or field measurements. The user can select from two existing algorithms (CoolTools or YorkCalc), or they can enter their own correlation for approach temperature by using a variable speed tower model coefficient object. For a multi-cell tower, the capacity and air/water flow rate inputs are for the entire tower.")]
    public class CoolingTower_VariableSpeed
    {
        
        private void CoolToolsCrossFlow;
        
        private void CoolToolsUserDefined;
        
        private void YorkCalc;
        
        private void YorkCalcUserDefined;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        
        private void MaximalCell;
        
        private void MinimalCell;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("model_type")]
public ModeltypeType model_type
{
    get
    {
    }
    set
    {
    }
}
 = (ModeltypeType)YorkCalc;

[JsonProperty("model_coefficient_name")]
public string model_coefficient_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_inlet_air_wet_bulb_temperature")]
public float design_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25.6;

[JsonProperty("design_approach_temperature")]
public float design_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.9;

[JsonProperty("design_range_temperature")]
public float design_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5.6;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_fan_power")]
public string design_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_ratio_function_of_air_flow_rate_ratio_curve_name")]
public string fan_power_ratio_function_of_air_flow_rate_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_rate_ratio")]
public float minimum_air_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("fraction_of_tower_capacity_in_free_convection_regime")]
public float fraction_of_tower_capacity_in_free_convection_regime
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.125;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cells")]
public float number_of_cells
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cell_control")]
public CellcontrolType cell_control
{
    get
    {
    }
    set
    {
    }
}
 = (CellcontrolType)MinimalCell;

[JsonProperty("cell_minimum_water_flow_rate_fraction")]
public float cell_minimum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("cell_maximum_water_flow_rate_fraction")]
public float cell_maximum_water_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("Determines the coefficients and form of the equation for calculating approach tem" +
            "perature")]
        public enum ModeltypeType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
        
        public enum CellcontrolType
        {
        }
    }
    
    [JsonProperty("CoolingTowerPerformance:CoolTools")]
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as Cool" +
        "ToolsUserDefined in the object CoolingTower:VariableSpeed.")]
    public class CoolingTowerPerformance_CoolTools
    {
        

[JsonProperty("minimum_inlet_air_wet_bulb_temperature")]
public float minimum_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_inlet_air_wet_bulb_temperature")]
public float maximum_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_range_temperature")]
public float minimum_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_range_temperature")]
public float maximum_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_approach_temperature")]
public float minimum_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_approach_temperature")]
public float maximum_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_water_flow_rate_ratio")]
public float minimum_water_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_water_flow_rate_ratio")]
public float maximum_water_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1")]
public float coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2")]
public float coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3")]
public float coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_4")]
public float coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_5")]
public float coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_6")]
public float coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_7")]
public float coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_8")]
public float coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_9")]
public float coefficient_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_10")]
public float coefficient_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_11")]
public float coefficient_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_12")]
public float coefficient_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_13")]
public float coefficient_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_14")]
public float coefficient_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_15")]
public float coefficient_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_16")]
public float coefficient_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_17")]
public float coefficient_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_18")]
public float coefficient_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_19")]
public float coefficient_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_20")]
public float coefficient_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_21")]
public float coefficient_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_22")]
public float coefficient_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_23")]
public float coefficient_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_24")]
public float coefficient_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_25")]
public float coefficient_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_26")]
public float coefficient_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_27")]
public float coefficient_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_28")]
public float coefficient_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_29")]
public float coefficient_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_30")]
public float coefficient_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_31")]
public float coefficient_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_32")]
public float coefficient_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_33")]
public float coefficient_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_34")]
public float coefficient_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_35")]
public float coefficient_35
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("CoolingTowerPerformance:YorkCalc")]
    [Description("This object is used to define coefficients for the approach temperature correlati" +
        "on for a variable speed cooling tower when tower Model Type is specified as York" +
        "CalcUserDefined in the object CoolingTower:VariableSpeed.")]
    public class CoolingTowerPerformance_YorkCalc
    {
        

[JsonProperty("minimum_inlet_air_wet_bulb_temperature")]
public float minimum_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_inlet_air_wet_bulb_temperature")]
public float maximum_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_range_temperature")]
public float minimum_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_range_temperature")]
public float maximum_range_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_approach_temperature")]
public float minimum_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_approach_temperature")]
public float maximum_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_water_flow_rate_ratio")]
public float minimum_water_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_water_flow_rate_ratio")]
public float maximum_water_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_liquid_to_gas_ratio")]
public float maximum_liquid_to_gas_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1")]
public float coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2")]
public float coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3")]
public float coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_4")]
public float coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_5")]
public float coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_6")]
public float coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_7")]
public float coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_8")]
public float coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_9")]
public float coefficient_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_10")]
public float coefficient_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_11")]
public float coefficient_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_12")]
public float coefficient_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_13")]
public float coefficient_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_14")]
public float coefficient_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_15")]
public float coefficient_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_16")]
public float coefficient_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_17")]
public float coefficient_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_18")]
public float coefficient_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_19")]
public float coefficient_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_20")]
public float coefficient_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_21")]
public float coefficient_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_22")]
public float coefficient_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_23")]
public float coefficient_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_24")]
public float coefficient_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_25")]
public float coefficient_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_26")]
public float coefficient_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_27")]
public float coefficient_27
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EvaporativeFluidCooler:SingleSpeed")]
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    public class EvaporativeFluidCooler_SingleSpeed
    {
        
        private void StandardDesignCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        
        private void UserSpecifiedDesignCapacity;
        
        private void FanCycling;
        
        private void FluidBypass;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate_fan_power")]
public string design_air_flow_rate_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_spray_water_flow_rate")]
public float design_spray_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public float heat_rejection_capacity_and_nominal_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("standard_design_capacity")]
public float standard_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string design_air_flow_rate_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("user_specified_design_capacity")]
public float user_specified_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_water_temperature")]
public float design_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_temperature")]
public float design_entering_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_wet_bulb_temperature")]
public float design_entering_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control")]
public CapacitycontrolType capacity_control
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolType)FanCycling;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporationlossmodeType)SaturatedExit;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = (BlowdowncalculationmodeType)ConcentrationRatio;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
            "A and the Design Water Flow Rate, or by specifying the fluid cooler Standard Des" +
            "ign Capacity or by specifying Design Capacity for Non standard conditions.")]
        public enum PerformanceinputmethodType
        {
        }
        
        public enum CapacitycontrolType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
    }
    
    [JsonProperty("EvaporativeFluidCooler:TwoSpeed")]
    [Description("This model is based on Merkel\'s theory, which is also the basis for the cooling t" +
        "ower model in EnergyPlus. The Evaporative fluid cooler is modeled as a counter f" +
        "low heat exchanger.")]
    public class EvaporativeFluidCooler_TwoSpeed
    {
        
        private void StandardDesignCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        
        private void UserSpecifiedDesignCapacity;
        
        private void LossFactor;
        
        private void SaturatedExit;
        
        private void ConcentrationRatio;
        
        private void ScheduledRate;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_air_flow_rate")]
public string high_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_fan_power")]
public string high_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate")]
public string low_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public float low_fan_speed_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("low_fan_speed_fan_power")]
public string low_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public float low_fan_speed_fan_power_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.16;

[JsonProperty("design_spray_water_flow_rate")]
public float design_spray_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_rejection_capacity_and_nominal_capacity_sizing_ratio")]
public float heat_rejection_capacity_and_nominal_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("high_speed_standard_design_capacity")]
public float high_speed_standard_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_standard_design_capacity")]
public string low_speed_standard_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_standard_capacity_sizing_factor")]
public float low_speed_standard_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string high_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string low_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public float low_fan_speed_u_factor_times_area_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_user_specified_design_capacity")]
public float high_speed_user_specified_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_user_specified_design_capacity")]
public string low_speed_user_specified_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_user_specified_design_capacity_sizing_factor")]
public float low_speed_user_specified_design_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("design_entering_water_temperature")]
public float design_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_temperature")]
public float design_entering_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_wet_bulb_temperature")]
public float design_entering_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_sizing_factor")]
public float high_speed_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("evaporation_loss_mode")]
public EvaporationlossmodeType evaporation_loss_mode
{
    get
    {
    }
    set
    {
    }
}
 = (EvaporationlossmodeType)SaturatedExit;

[JsonProperty("evaporation_loss_factor")]
public float evaporation_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drift_loss_percent")]
public float drift_loss_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("blowdown_calculation_mode")]
public BlowdowncalculationmodeType blowdown_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = (BlowdowncalculationmodeType)ConcentrationRatio;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("blowdown_makeup_water_usage_schedule_name")]
public string blowdown_makeup_water_usage_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
            "A and the Design Water Flow Rate, or by specifying the fluid cooler Standard Des" +
            "ign Capacity or by specifying Design Capacity for Non standard conditions.")]
        public enum PerformanceinputmethodType
        {
        }
        
        public enum EvaporationlossmodeType
        {
        }
        
        public enum BlowdowncalculationmodeType
        {
        }
    }
    
    [JsonProperty("FluidCooler:SingleSpeed")]
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with single-speed fans (induced draft configuration).")]
    public class FluidCooler_SingleSpeed
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)NominalCapacity;

[JsonProperty("design_air_flow_rate_u_factor_times_area_value")]
public string design_air_flow_rate_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public float nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_water_temperature")]
public float design_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_temperature")]
public float design_entering_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_wetbulb_temperature")]
public float design_entering_air_wetbulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate")]
public string design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_flow_rate_fan_power")]
public string design_air_flow_rate_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
            "A and the Design Water Flow Rate, or by specifying the fluid cooler nominal capa" +
            "city")]
        public enum PerformanceinputmethodType
        {
        }
    }
    
    [JsonProperty("FluidCooler:TwoSpeed")]
    [Description("The fluid cooler is modeled as a cross flow heat exchanger (both streams unmixed)" +
        " with two-speed fans (induced draft configuration).")]
    public class FluidCooler_TwoSpeed
    {
        
        private void NominalCapacity;
        
        private void UFactorTimesAreaAndDesignWaterFlowRate;
        

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)NominalCapacity;

[JsonProperty("high_fan_speed_u_factor_times_area_value")]
public string high_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_u_factor_times_area_value")]
public string low_fan_speed_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_u_factor_times_area_sizing_factor")]
public float low_fan_speed_u_factor_times_area_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("high_speed_nominal_capacity")]
public float high_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_nominal_capacity")]
public string low_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_nominal_capacity_sizing_factor")]
public float low_speed_nominal_capacity_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("design_entering_water_temperature")]
public float design_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_temperature")]
public float design_entering_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_wet_bulb_temperature")]
public float design_entering_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_air_flow_rate")]
public string high_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_fan_speed_fan_power")]
public string high_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate")]
public string low_fan_speed_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_air_flow_rate_sizing_factor")]
public float low_fan_speed_air_flow_rate_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("low_fan_speed_fan_power")]
public string low_fan_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_fan_speed_fan_power_sizing_factor")]
public float low_fan_speed_fan_power_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.16;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("User can define fluid cooler thermal performance by specifying the fluid cooler U" +
            "A and the Design Water Flow Rate, or by specifying the fluid cooler nominal capa" +
            "city")]
        public enum PerformanceinputmethodType
        {
        }
    }
    
    [JsonProperty("GroundHeatExchanger:System")]
    [Description("Models vertical ground heat exchangers systems using the response factor approach" +
        " developed by Eskilson. Response factors are calculated using a finite line sour" +
        "ce model assuming uniform heat flux at the borehole wall.")]
    public class GroundHeatExchanger_System
    {
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ground_thermal_conductivity")]
public float ground_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ground_thermal_heat_capacity")]
public float ground_thermal_heat_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ghe_vertical_responsefactors_object_name")]
public string ghe_vertical_responsefactors_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ghe_vertical_array_object_name")]
public string ghe_vertical_array_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_well_locations")]
public string vertical_well_locations
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
    }
    
    [JsonProperty("GroundHeatExchanger:Vertical:Properties")]
    [Description("Properties for vertical ground heat exchanger systems")]
    public class GroundHeatExchanger_Vertical_Properties
    {
        

[JsonProperty("depth_of_top_of_borehole")]
public float depth_of_top_of_borehole
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("borehole_length")]
public float borehole_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("borehole_diameter")]
public float borehole_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("grout_thermal_conductivity")]
public float grout_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("grout_thermal_heat_capacity")]
public float grout_thermal_heat_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_thermal_conductivity")]
public float pipe_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_thermal_heat_capacity")]
public float pipe_thermal_heat_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_outer_diameter")]
public float pipe_outer_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_thickness")]
public float pipe_thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("u_tube_distance")]
public float u_tube_distance
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatExchanger:Vertical:Array")]
    public class GroundHeatExchanger_Vertical_Array
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string ghe_vertical_properties_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_boreholes_in_x_direction")]
public float number_of_boreholes_in_x_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_boreholes_in_y_direction")]
public float number_of_boreholes_in_y_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("borehole_spacing")]
public float borehole_spacing
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatExchanger:Vertical:Single")]
    public class GroundHeatExchanger_Vertical_Single
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string ghe_vertical_properties_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("x_location")]
public float x_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("y_location")]
public float y_location
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatExchanger:ResponseFactors")]
    [Description("Response factor definitions from third-party tool, commonly referred to a \"g-func" +
        "tions\"")]
    public class GroundHeatExchanger_ResponseFactors
    {
        

[JsonProperty("ghe_vertical_properties_object_name")]
public string ghe_vertical_properties_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_boreholes")]
public float number_of_boreholes
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("g_function_reference_ratio")]
public float g_function_reference_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0005;

[JsonProperty("g_functions")]
public string g_functions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatExchanger:Pond")]
    [Description("A model of a shallow pond with immersed pipe loops. Typically used in hybrid geot" +
        "hermal systems and included in the condenser loop. This component may also be us" +
        "ed as a simple solar collector.")]
    public class GroundHeatExchanger_Pond
    {
        

[JsonProperty("fluid_inlet_node_name")]
public string fluid_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_outlet_node_name")]
public string fluid_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pond_depth")]
public float pond_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pond_area")]
public float pond_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_inside_diameter")]
public float hydronic_tubing_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_outside_diameter")]
public float hydronic_tubing_outside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_thermal_conductivity")]
public float hydronic_tubing_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ground_thermal_conductivity")]
public float ground_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_tubing_circuits")]
public float number_of_tubing_circuits
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length_of_each_tubing_circuit")]
public float length_of_each_tubing_circuit
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatExchanger:Surface")]
    [Description(@"A hydronic surface/panel consisting of a multi-layer construction with embedded rows of tubes. Typically used in hybrid geothermal systems and included in the condenser loop. This component may also be used as a simple solar collector. The bottom surface may be defined as ground-coupled or exposed to wind (eg. bridge deck).")]
    public class GroundHeatExchanger_Surface
    {
        
        private void Exposed;
        
        private void Ground;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_inlet_node_name")]
public string fluid_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_outlet_node_name")]
public string fluid_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_inside_diameter")]
public float hydronic_tubing_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_tubing_circuits")]
public float number_of_tubing_circuits
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tube_spacing")]
public float hydronic_tube_spacing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_length")]
public float surface_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_width")]
public float surface_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lower_surface_environment")]
public LowersurfaceenvironmentType lower_surface_environment
{
    get
    {
    }
    set
    {
    }
}
 = (LowersurfaceenvironmentType)Ground;
        
        public enum LowersurfaceenvironmentType
        {
        }
    }
    
    [JsonProperty("GroundHeatExchanger:HorizontalTrench")]
    [Description("This models a horizontal heat exchanger placed in a series of trenches The model " +
        "uses the PipingSystem:Underground underlying algorithms, but provides a more usa" +
        "ble input interface.")]
    public class GroundHeatExchanger_HorizontalTrench
    {
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("trench_length_in_pipe_axial_direction")]
public float trench_length_in_pipe_axial_direction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("number_of_trenches")]
public float number_of_trenches
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("horizontal_spacing_between_pipes")]
public float horizontal_spacing_between_pipes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("pipe_inner_diameter")]
public float pipe_inner_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.016;

[JsonProperty("pipe_outer_diameter")]
public float pipe_outer_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.026;

[JsonProperty("burial_depth")]
public float burial_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.08;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)962;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2576;

[JsonProperty("pipe_thermal_conductivity")]
public float pipe_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3895;

[JsonProperty("pipe_density")]
public float pipe_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)641;

[JsonProperty("pipe_specific_heat")]
public float pipe_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2405;

[JsonProperty("soil_moisture_content_percent")]
public float soil_moisture_content_percent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("soil_moisture_content_percent_at_saturation")]
public float soil_moisture_content_percent_at_saturation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evapotranspiration_ground_cover_parameter")]
public float evapotranspiration_ground_cover_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
    }
    
    [JsonProperty("GroundHeatExchanger:Slinky")]
    [Description(@"This models a slinky horizontal heat exchanger placed in a series of trenches The model uses the model developed by: Xiong, Z., D.E. Fisher, and J.D. Spitler. 2015. Development and Validation of a Slinky Ground Heat Exchanger Model. Applied Energy 141: 57-69.")]
    public class GroundHeatExchanger_Slinky
    {
        
        private void Horizontal;
        
        private void Vertical;
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002;

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.08;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)962;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2576;

[JsonProperty("pipe_thermal_conductivity")]
public float pipe_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("pipe_density")]
public float pipe_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)641;

[JsonProperty("pipe_specific_heat")]
public float pipe_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2405;

[JsonProperty("pipe_outer_diameter")]
public float pipe_outer_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02667;

[JsonProperty("pipe_thickness")]
public float pipe_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002413;

[JsonProperty("heat_exchanger_configuration")]
public HeatexchangerconfigurationType heat_exchanger_configuration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_diameter")]
public float coil_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("coil_pitch")]
public float coil_pitch
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("trench_depth")]
public float trench_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.8;

[JsonProperty("trench_length")]
public float trench_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("number_of_trenches")]
public float number_of_trenches
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("horizontal_spacing_between_pipes")]
public float horizontal_spacing_between_pipes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_length_of_simulation")]
public float maximum_length_of_simulation
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This is the orientation of the heat exchanger")]
        public enum HeatexchangerconfigurationType
        {
        }
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
    }
    
    [JsonProperty("HeatExchanger:FluidToFluid")]
    [Description("A fluid/fluid heat exchanger designed to couple the supply side of one loop to th" +
        "e demand side of another loop Loops can be either plant or condenser loops but n" +
        "o air side connections are allowed")]
    public class HeatExchanger_FluidToFluid
    {
        
        private void CounterFlow;
        
        private void CrossFlowBothMixed;
        
        private void CrossFlowBothUnMixed;
        
        private void CrossFlowSupplyMixedDemandUnMixed;
        
        private void CrossFlowSupplyUnMixedDemandMixed;
        
        private void Ideal;
        
        private void ParallelFlow;
        
        private void CoolingDifferentialOnOff;
        
        private void CoolingSetpointModulated;
        
        private void CoolingSetpointOnOff;
        
        private void CoolingSetpointOnOffWithComponentOverride;
        
        private void DualDeadbandSetpointModulated;
        
        private void DualDeadbandSetpointOnOff;
        
        private void HeatingSetpointModulated;
        
        private void HeatingSetpointOnOff;
        
        private void OperationSchemeModulated;
        
        private void OperationSchemeOnOff;
        
        private void UncontrolledOn;
        
        private void FreeCooling;
        
        private void HeatRecovery;
        
        private void HeatRecoveryForCooling;
        
        private void HeatRecoveryForHeating;
        
        private void HeatRejection;
        
        private void LoopToLoop;
        
        private void DryBulbTemperature;
        
        private void Loop;
        
        private void WetBulbTemperature;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_demand_side_inlet_node_name")]
public string loop_demand_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_demand_side_outlet_node_name")]
public string loop_demand_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_demand_side_design_flow_rate")]
public string loop_demand_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_supply_side_inlet_node_name")]
public string loop_supply_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_supply_side_outlet_node_name")]
public string loop_supply_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_supply_side_design_flow_rate")]
public string loop_supply_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchange_model_type")]
public HeatexchangemodeltypeType heat_exchange_model_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatexchangemodeltypeType)Ideal;

[JsonProperty("heat_exchanger_u_factor_times_area_value")]
public string heat_exchanger_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)UncontrolledOn;

[JsonProperty("heat_exchanger_setpoint_node_name")]
public string heat_exchanger_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_temperature_difference_to_activate_heat_exchanger")]
public float minimum_temperature_difference_to_activate_heat_exchanger
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("heat_transfer_metering_end_use_type")]
public HeattransfermeteringendusetypeType heat_transfer_metering_end_use_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeattransfermeteringendusetypeType)LoopToLoop;

[JsonProperty("component_override_loop_supply_side_inlet_node_name")]
public string component_override_loop_supply_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_override_loop_demand_side_inlet_node_name")]
public string component_override_loop_demand_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_override_cooling_control_temperature_mode")]
public ComponentoverridecoolingcontroltemperaturemodeType component_override_cooling_control_temperature_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ComponentoverridecoolingcontroltemperaturemodeType)Loop;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("operation_minimum_temperature_limit")]
public float operation_minimum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_maximum_temperature_limit")]
public float operation_maximum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatexchangemodeltypeType
        {
        }
        
        public enum ControltypeType
        {
        }
        
        [Description("This field controls end use reporting for heat transfer meters")]
        public enum HeattransfermeteringendusetypeType
        {
        }
        
        [Description("This field is only used if Control Type is set to CoolingSetpointOnOffWithCompone" +
            "ntOverride")]
        public enum ComponentoverridecoolingcontroltemperaturemodeType
        {
        }
    }
}
namespace EnergyPlus.Controllers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Controller:WaterCoil")]
    [Description(@"Controller for a water coil which is located directly in an air loop branch or outdoor air equipment list. Controls the coil water flow to meet the specified leaving air setpoint(s). Used with Coil:Heating:Water, Coil:Cooling:Water, Coil:Cooling:Water:DetailedGeometry, and CoilSystem:Cooling:Water:HeatexchangerAssisted.")]
    public class Controller_WaterCoil
    {
        
        private void HumidityRatio;
        
        private void Temperature;
        
        private void TemperatureAndHumidityRatio;
        
        private void Normal;
        
        private void Reverse;
        
        private void Flow;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("action")]
public ActionType action
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuator_variable")]
public ActuatorvariableType actuator_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuator_node_name")]
public string actuator_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_convergence_tolerance")]
public string controller_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_actuated_flow")]
public string maximum_actuated_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_actuated_flow")]
public float minimum_actuated_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("keys HumidityRatio or TemperatureAndHumidityRatio requires a ZoneControl:Humidist" +
            "at object along with SetpointManager:SingleZone:Humidity:Maximum, SetpointManage" +
            "r:MultiZone:MaximumHumidity:Average, or SetpointManager:Multizone:Humidity:Maxim" +
            "um object")]
        public enum ControlvariableType
        {
        }
        
        [Description("Leave blank to have this automatically selected from coil type. Chilled water coi" +
            "ls should be reverse action Hot water coils should be normal action")]
        public enum ActionType
        {
        }
        
        public enum ActuatorvariableType
        {
        }
    }
    
    [JsonProperty("Controller:OutdoorAir")]
    [Description("Controller to set the outdoor air flow rate for an air loop. Control options incl" +
        "ude fixed, proportional, scheduled, economizer, and demand-controlled ventilatio" +
        "n.")]
    public class Controller_OutdoorAir
    {
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void MinimumFlowWithBypass;
        
        private void ModulateFlow;
        
        private void LockoutWithCompressor;
        
        private void LockoutWithHeating;
        
        private void NoLockout;
        
        private void FixedMinimum;
        
        private void ProportionalMinimum;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void BypassWhenOAFlowGreaterThanMinimum;
        
        private void BypassWhenWithinEconomizerLimits;
        

[JsonProperty("relief_air_outlet_node_name")]
public string relief_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_node_name")]
public string return_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_air_node_name")]
public string mixed_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuator_node_name")]
public string actuator_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_control_type")]
public EconomizercontroltypeType economizer_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizercontroltypeType)NoEconomizer;

[JsonProperty("economizer_control_action_type")]
public EconomizercontrolactiontypeType economizer_control_action_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizercontrolactiontypeType)ModulateFlow;

[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public float economizer_maximum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_enthalpy")]
public float economizer_maximum_limit_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electronic_enthalpy_limit_curve_name")]
public string electronic_enthalpy_limit_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public float economizer_minimum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lockout_type")]
public LockouttypeType lockout_type
{
    get
    {
    }
    set
    {
    }
}
 = (LockouttypeType)NoLockout;

[JsonProperty("minimum_limit_type")]
public MinimumlimittypeType minimum_limit_type
{
    get
    {
    }
    set
    {
    }
}
 = (MinimumlimittypeType)ProportionalMinimum;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_fraction_of_outdoor_air_schedule_name")]
public string minimum_fraction_of_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_fraction_of_outdoor_air_schedule_name")]
public string maximum_fraction_of_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mechanical_ventilation_controller_name")]
public string mechanical_ventilation_controller_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("time_of_day_economizer_control_schedule_name")]
public string time_of_day_economizer_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_humidity_control")]
public HighhumiditycontrolType high_humidity_control
{
    get
    {
    }
    set
    {
    }
}
 = (HighhumiditycontrolType)No;

[JsonProperty("humidistat_control_zone_name")]
public string humidistat_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_humidity_outdoor_air_flow_ratio")]
public float high_humidity_outdoor_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("control_high_indoor_humidity_based_on_outdoor_humidity_ratio")]
public ControlhighindoorhumiditybasedonoutdoorhumidityratioType control_high_indoor_humidity_based_on_outdoor_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (ControlhighindoorhumiditybasedonoutdoorhumidityratioType)Yes;

[JsonProperty("heat_recovery_bypass_control_type")]
public HeatrecoverybypasscontroltypeType heat_recovery_bypass_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverybypasscontroltypeType)BypassWhenWithinEconomizerLimits;
        
        public enum EconomizercontroltypeType
        {
        }
        
        public enum EconomizercontrolactiontypeType
        {
        }
        
        public enum LockouttypeType
        {
        }
        
        public enum MinimumlimittypeType
        {
        }
        
        [Description(@"Optional field to enable modified outdoor air flow rates based on zone relative humidity. Select Yes to modify outdoor air flow rate based on a zone humidistat. Select No to disable this feature. If the field Economizer Control Type = NoEconomizer, then this option is disabled.")]
        public enum HighhumiditycontrolType
        {
        }
        
        [Description(@"If No is selected, the outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint. If Yes is selected, the outdoor air flow rate is modified any time the indoor relative humidity is above the humidistat setpoint and the outdoor humidity ratio is less than the indoor humidity ratio. This field is only used when the field High Humidity Control = Yes.")]
        public enum ControlhighindoorhumiditybasedonoutdoorhumidityratioType
        {
        }
        
        [Description(@"BypassWhenWithinEconomizerLimits specifies that heat recovery is active only when the economizer is off because conditions are outside the economizer control limits BypassWhenOAFlowGreaterThanMinimum specifies enhanced economizer controls to allow heat recovery when economizer is active (within limits) but the outdoor air flow rate is at the minimum.")]
        public enum HeatrecoverybypasscontroltypeType
        {
        }
    }
    
    [JsonProperty("Controller:MechanicalVentilation")]
    [Description(@"This object is used in conjunction with Controller:OutdoorAir to specify outdoor ventilation air based on outdoor air specified in the DesignSpecification:OutdoorAir object The Controller:OutdoorAir object is associated with a specific air loop, so the outdoor air flow rates specified in Controller:MechanicalVentilation correspond to the zones attached to that specific air loop. Duplicate groups of Zone name, Design Specification Outdoor Air Object Name, and Design Specification Zone Air Distribution Object Name to increase allowable number of entries")]
    public class Controller_MechanicalVentilation
    {
        
        private void No;
        
        private void Yes;
        
        private void IndoorAirQualityProcedure;
        
        private void IndoorAirQualityProcedureCombined;
        
        private void IndoorAirQualityProcedureGenericContaminant;
        
        private void ProportionalControlBasedOnDesignOARate;
        
        private void ProportionalControlBasedOnDesignOccupancy;
        
        private void ProportionalControlBasedOnOccupancySchedule;
        
        private void VentilationRateProcedure;
        
        private void ZoneSum;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_controlled_ventilation")]
public DemandcontrolledventilationType demand_controlled_ventilation
{
    get
    {
    }
    set
    {
    }
}
 = (DemandcontrolledventilationType)No;

[JsonProperty("system_outdoor_air_method")]
public SystemoutdoorairmethodType system_outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (SystemoutdoorairmethodType)VentilationRateProcedure;

[JsonProperty("zone_maximum_outdoor_air_fraction")]
public float zone_maximum_outdoor_air_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("zone_specifications")]
public string zone_specifications
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DemandcontrolledventilationType
        {
        }
        
        public enum SystemoutdoorairmethodType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:ControllerList")]
    [Description("List controllers in order of control sequence")]
    public class AirLoopHVAC_ControllerList
    {
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        
        private void Controller:OutdoorAir;
        
        private void Controller:WaterCoil;
        

[JsonProperty("controller_1_object_type")]
public ControllerobjecttypeType controller_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_1_name")]
public string controller_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_2_object_type")]
public ControllerobjecttypeType controller_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_2_name")]
public string controller_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_3_object_type")]
public ControllerobjecttypeType controller_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_3_name")]
public string controller_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_4_object_type")]
public ControllerobjecttypeType controller_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_4_name")]
public string controller_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_5_object_type")]
public ControllerobjecttypeType controller_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_5_name")]
public string controller_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_6_object_type")]
public ControllerobjecttypeType controller_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_6_name")]
public string controller_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_7_object_type")]
public ControllerobjecttypeType controller_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_7_name")]
public string controller_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_8_object_type")]
public ControllerobjecttypeType controller_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_8_name")]
public string controller_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
        
        public enum ControllerobjecttypeType
        {
        }
    }
}
namespace EnergyPlus.Daylighting
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Daylighting:Controls")]
    [Description("Dimming of overhead electric lighting is determined from each reference point. Gl" +
        "are from daylighting is also calculated.")]
    public class Daylighting_Controls
    {
        
        private void DElight;
        
        private void SplitFlux;
        
        private void Continuous;
        
        private void ContinuousOff;
        
        private void Stepped;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("daylighting_method")]
public DaylightingmethodType daylighting_method
{
    get
    {
    }
    set
    {
    }
}
 = (DaylightingmethodType)SplitFlux;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lighting_control_type")]
public LightingcontroltypeType lighting_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (LightingcontroltypeType)Continuous;

[JsonProperty("minimum_input_power_fraction_for_continuous_or_continuousoff_dimming_control")]
public float minimum_input_power_fraction_for_continuous_or_continuousoff_dimming_control
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("minimum_light_output_fraction_for_continuous_or_continuousoff_dimming_control")]
public float minimum_light_output_fraction_for_continuous_or_continuousoff_dimming_control
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("number_of_stepped_control_steps")]
public float number_of_stepped_control_steps
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("probability_lighting_will_be_reset_when_needed_in_manual_stepped_control")]
public float probability_lighting_will_be_reset_when_needed_in_manual_stepped_control
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("glare_calculation_daylighting_reference_point_name")]
public string glare_calculation_daylighting_reference_point_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("glare_calculation_azimuth_angle_of_view_direction_clockwise_from_zone_y_axis")]
public float glare_calculation_azimuth_angle_of_view_direction_clockwise_from_zone_y_axis
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_allowable_discomfort_glare_index")]
public float maximum_allowable_discomfort_glare_index
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("delight_gridding_resolution")]
public float delight_gridding_resolution
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_data")]
public string control_data
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DaylightingmethodType
        {
        }
        
        public enum LightingcontroltypeType
        {
        }
    }
    
    [JsonProperty("Daylighting:ReferencePoint")]
    [Description("Used by Daylighting:Controls to identify the reference point coordinates for each" +
        " sensor. Reference points are given in coordinates specified in the GlobalGeomet" +
        "ryRules object Daylighting Reference Point CoordinateSystem field")]
    public class Daylighting_ReferencePoint
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("x_coordinate_of_reference_point")]
public float x_coordinate_of_reference_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("y_coordinate_of_reference_point")]
public float y_coordinate_of_reference_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("z_coordinate_of_reference_point")]
public float z_coordinate_of_reference_point
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;
    }
    
    [JsonProperty("Daylighting:DELight:ComplexFenestration")]
    [Description("Used for DElight Complex Fenestration of all types")]
    public class Daylighting_DELight_ComplexFenestration
    {
        

[JsonProperty("complex_fenestration_type")]
public string complex_fenestration_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("window_name")]
public string window_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fenestration_rotation")]
public float fenestration_rotation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("DaylightingDevice:Tubular")]
    [Description("Defines a tubular daylighting device (TDD) consisting of three components: a dome" +
        ", a pipe, and a diffuser. The dome and diffuser are defined separately using the" +
        " FenestrationSurface:Detailed object.")]
    public class DaylightingDevice_Tubular
    {
        

[JsonProperty("dome_name")]
public string dome_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diffuser_name")]
public string diffuser_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diameter")]
public float diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_length")]
public float total_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_thermal_resistance")]
public float effective_thermal_resistance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.28;

[JsonProperty("transition_lengths")]
public string transition_lengths
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("DaylightingDevice:Shelf")]
    [Description("Defines a daylighting which can have an inside shelf, an outside shelf, or both. " +
        "The inside shelf is defined as a building surface and the outside shelf is defin" +
        "ed as a shading surface.")]
    public class DaylightingDevice_Shelf
    {
        

[JsonProperty("window_name")]
public string window_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inside_shelf_name")]
public string inside_shelf_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_shelf_name")]
public string outside_shelf_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_shelf_construction_name")]
public string outside_shelf_construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("view_factor_to_outside_shelf")]
public float view_factor_to_outside_shelf
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("DaylightingDevice:LightWell")]
    [Description("Applies only to exterior windows in daylighting-controlled zones or in zones that" +
        " share an interior window with a daylighting-controlled  zone. Generally used wi" +
        "th skylights.")]
    public class DaylightingDevice_LightWell
    {
        

[JsonProperty("exterior_window_name")]
public string exterior_window_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_of_well")]
public float height_of_well
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("perimeter_of_bottom_of_well")]
public float perimeter_of_bottom_of_well
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("area_of_bottom_of_well")]
public float area_of_bottom_of_well
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_reflectance_of_well_walls")]
public float visible_reflectance_of_well_walls
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Output:DaylightFactors")]
    [Description("Reports hourly daylight factors for each exterior window for four sky types (clea" +
        "r, turbid clear, intermediate, and overcast).")]
    public class Output_DaylightFactors
    {
        
        private void AllShadowCalculationDays;
        
        private void SizingDays;
        

[JsonProperty("reporting_days")]
public ReportingdaysType reporting_days
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ReportingdaysType
        {
        }
    }
    
    [JsonProperty("Output:IlluminanceMap")]
    [Description("reference points are given in coordinates specified in the GlobalGeometryRules ob" +
        "ject Daylighting Reference Point CoordinateSystem field")]
    public class Output_IlluminanceMap
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("z_height")]
public float z_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("x_minimum_coordinate")]
public float x_minimum_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("x_maximum_coordinate")]
public float x_maximum_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_x_grid_points")]
public float number_of_x_grid_points
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("y_minimum_coordinate")]
public float y_minimum_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("y_maximum_coordinate")]
public float y_maximum_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_y_grid_points")]
public float number_of_y_grid_points
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
    }
    
    [JsonProperty("OutputControl:IlluminanceMap:Style")]
    [Description(@"default style for the Daylighting Illuminance Map is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns""")]
    public class OutputControl_IlluminanceMap_Style
    {
        
        private void Comma;
        
        private void Fixed;
        
        private void Tab;
        

[JsonProperty("column_separator")]
public ColumnseparatorType column_separator
{
    get
    {
    }
    set
    {
    }
}
 = (ColumnseparatorType)Comma;
        
        public enum ColumnseparatorType
        {
        }
    }
}
namespace EnergyPlus.DemandLimitingControls
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("DemandManagerAssignmentList")]
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class DemandManagerAssignmentList
    {
        
        private void All;
        
        private void Sequential;
        

[JsonProperty("meter_name")]
public string meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_limit_schedule_name")]
public string demand_limit_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_limit_safety_fraction")]
public float demand_limit_safety_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("billing_period_schedule_name")]
public string billing_period_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("peak_period_schedule_name")]
public string peak_period_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_window_length")]
public float demand_window_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_manager_priority")]
public DemandmanagerpriorityType demand_manager_priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("manager_data")]
public string manager_data
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DemandmanagerpriorityType
        {
        }
    }
    
    [JsonProperty("DemandManager:ExteriorLights")]
    [Description("used for demand limiting Exterior:Lights objects.")]
    public class DemandManager_ExteriorLights
    {
        
        private void Fixed;
        
        private void Off;
        
        private void All;
        
        private void RotateMany;
        
        private void RotateOne;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_control")]
public LimitcontrolType limit_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_limit_duration")]
public float minimum_limit_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_limit_fraction")]
public float maximum_limit_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_step_change")]
public float limit_step_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("selection_control")]
public SelectioncontrolType selection_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotation_duration")]
public float rotation_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lights")]
public string lights
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LimitcontrolType
        {
        }
        
        public enum SelectioncontrolType
        {
        }
    }
    
    [JsonProperty("DemandManager:Lights")]
    [Description("used for demand limiting Lights objects.")]
    public class DemandManager_Lights
    {
        
        private void Fixed;
        
        private void Off;
        
        private void All;
        
        private void RotateMany;
        
        private void RotateOne;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_control")]
public LimitcontrolType limit_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_limit_duration")]
public float minimum_limit_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_limit_fraction")]
public float maximum_limit_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_step_change")]
public float limit_step_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("selection_control")]
public SelectioncontrolType selection_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotation_duration")]
public float rotation_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lights")]
public string lights
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LimitcontrolType
        {
        }
        
        public enum SelectioncontrolType
        {
        }
    }
    
    [JsonProperty("DemandManager:ElectricEquipment")]
    [Description("used for demand limiting ElectricEquipment objects.")]
    public class DemandManager_ElectricEquipment
    {
        
        private void Fixed;
        
        private void Off;
        
        private void All;
        
        private void RotateMany;
        
        private void RotateOne;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_control")]
public LimitcontrolType limit_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_limit_duration")]
public float minimum_limit_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_limit_fraction")]
public float maximum_limit_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_step_change")]
public float limit_step_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("selection_control")]
public SelectioncontrolType selection_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotation_duration")]
public float rotation_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment")]
public string equipment
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LimitcontrolType
        {
        }
        
        public enum SelectioncontrolType
        {
        }
    }
    
    [JsonProperty("DemandManager:Thermostats")]
    [Description("used for demand limiting ZoneControl:Thermostat objects.")]
    public class DemandManager_Thermostats
    {
        
        private void Fixed;
        
        private void Off;
        
        private void All;
        
        private void RotateMany;
        
        private void RotateOne;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reset_control")]
public ResetcontrolType reset_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_reset_duration")]
public float minimum_reset_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_setpoint_reset")]
public float maximum_heating_setpoint_reset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cooling_setpoint_reset")]
public float maximum_cooling_setpoint_reset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reset_step_change")]
public float reset_step_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("selection_control")]
public SelectioncontrolType selection_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotation_duration")]
public float rotation_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermostats")]
public string thermostats
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ResetcontrolType
        {
        }
        
        public enum SelectioncontrolType
        {
        }
    }
    
    [JsonProperty("DemandManager:Ventilation")]
    [Description("used for demand limiting Controller:OutdoorAir objects.")]
    public class DemandManager_Ventilation
    {
        
        private void FixedRate;
        
        private void Off;
        
        private void ReductionRatio;
        
        private void All;
        
        private void RotateMany;
        
        private void RotateOne;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_control")]
public LimitcontrolType limit_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_limit_duration")]
public float minimum_limit_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fixed_rate")]
public float fixed_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reduction_ratio")]
public float reduction_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("limit_step_change")]
public float limit_step_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("selection_control")]
public SelectioncontrolType selection_control
{
    get
    {
    }
    set
    {
    }
}
 = (SelectioncontrolType)All;

[JsonProperty("rotation_duration")]
public float rotation_duration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controllers")]
public string controllers
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LimitcontrolType
        {
        }
        
        public enum SelectioncontrolType
        {
        }
    }
}
namespace EnergyPlus.DetailedGroundHeatTransfer
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("GroundHeatTransfer:Control")]
    [Description("Object determines if the Slab and Basement preprocessors are going to be executed" +
        ".")]
    public class GroundHeatTransfer_Control
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("run_basement_preprocessor")]
public RunbasementpreprocessorType run_basement_preprocessor
{
    get
    {
    }
    set
    {
    }
}
 = (RunbasementpreprocessorType)No;

[JsonProperty("run_slab_preprocessor")]
public RunslabpreprocessorType run_slab_preprocessor
{
    get
    {
    }
    set
    {
    }
}
 = (RunslabpreprocessorType)No;
        
        public enum RunbasementpreprocessorType
        {
        }
        
        public enum RunslabpreprocessorType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:Materials")]
    [Description("Object gives an overall description of the slab ground heat transfer model.")]
    public class GroundHeatTransfer_Slab_Materials
    {
        

[JsonProperty("nmat_number_of_materials")]
public float nmat_number_of_materials
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("albedo_surface_albedo_no_snow")]
public float albedo_surface_albedo_no_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.16;

[JsonProperty("albedo_surface_albedo_snow")]
public float albedo_surface_albedo_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("epslw_surface_emissivity_no_snow")]
public float epslw_surface_emissivity_no_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.94;

[JsonProperty("epslw_surface_emissivity_snow")]
public float epslw_surface_emissivity_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.86;

[JsonProperty("z0_surface_roughness_no_snow")]
public float z0_surface_roughness_no_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.75;

[JsonProperty("z0_surface_roughness_snow")]
public float z0_surface_roughness_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("hin_indoor_hconv_downward_flow")]
public float hin_indoor_hconv_downward_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.13;

[JsonProperty("hin_indoor_hconv_upward")]
public float hin_indoor_hconv_upward
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)9.26;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:MatlProps")]
    [Description("This object contains the material properties for the materials used in the model." +
        " The fields are mostly self explanatory.")]
    public class GroundHeatTransfer_Slab_MatlProps
    {
        

[JsonProperty("rho_slab_material_density")]
public float rho_slab_material_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2300;

[JsonProperty("rho_soil_density")]
public float rho_soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1200;

[JsonProperty("cp_slab_cp")]
public float cp_slab_cp
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)650;

[JsonProperty("cp_soil_cp")]
public float cp_soil_cp
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1200;

[JsonProperty("tcon_slab_k")]
public float tcon_slab_k
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("tcon_soil_k")]
public float tcon_soil_k
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:BoundConds")]
    [Description("Supplies some of the boundary conditions used in the ground heat transfer calcula" +
        "tions.")]
    public class GroundHeatTransfer_Slab_BoundConds
    {
        
        private void FALSE;
        
        private void TRUE;
        
        private void FALSE;
        
        private void TRUE;
        
        private void FALSE;
        
        private void TRUE;
        

[JsonProperty("evtr_is_surface_evapotranspiration_modeled")]
public EvtrissurfaceevapotranspirationmodeledType evtr_is_surface_evapotranspiration_modeled
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fixbc_is_the_lower_boundary_at_a_fixed_temperature")]
public FixbcisthelowerboundaryatafixedtemperatureType fixbc_is_the_lower_boundary_at_a_fixed_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tdeepin")]
public float tdeepin
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("usrhflag_is_the_ground_surface_h_specified_by_the_user_")]
public UsrhflagisthegroundsurfacehspecifiedbytheuserType usrhflag_is_the_ground_surface_h_specified_by_the_user_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("userh_user_specified_ground_surface_heat_transfer_coefficient")]
public float userh_user_specified_ground_surface_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"This field specifies whether or not to use the evapotransporation model. The inclusion of evapotransporation in the calculation has the greatest effect in warm dry climates, primarily on the ground surface temperature. This field can be used to turn the evapotransporation off and on to check sensitivity to it.")]
        public enum EvtrissurfaceevapotranspirationmodeledType
        {
        }
        
        [Description("This field permits using a fixed temperature at the lower surface of the model in" +
            "stead of a zero heat flux condition. This change normally has a very small effec" +
            "t on the results. FALSE selects the zero flux lower boundary condition")]
        public enum FixbcisthelowerboundaryatafixedtemperatureType
        {
        }
        
        [Description(@"This field flags the use of a user specified heat transfer coefficient on the ground surface. This condition is used primarily for testing. For normal runs (USPHflag is FALSE) and the program calculates the heat transfer coefficient using the weather conditions.")]
        public enum UsrhflagisthegroundsurfacehspecifiedbytheuserType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:BldgProps")]
    [Description(@"Object provides information about the building and its operating conditions Monthly Average Temperature SetPoint fields specify the average indoor building set point temperatures for each month of the year. These fields are useful for simulating a building that is not temperature controlled for some of the year. In such a case, the average indoor set point temperatures can be obtained by first running the model in EnergyPlus with an insulated floor boundary condition, and then using the resulting monthly average zone temperatures in these fields.")]
    public class GroundHeatTransfer_Slab_BldgProps
    {
        

[JsonProperty("iyrs_number_of_years_to_iterate")]
public float iyrs_number_of_years_to_iterate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("shape_slab_shape")]
public float shape_slab_shape
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hbldg_building_height")]
public float hbldg_building_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tin1_january_indoor_average_temperature_setpoint")]
public float tin1_january_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin2_february_indoor_average_temperature_setpoint")]
public float tin2_february_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin3_march_indoor_average_temperature_setpoint")]
public float tin3_march_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin4_april_indoor_average_temperature_setpoint")]
public float tin4_april_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin5_may_indoor_average_temperature_setpoint")]
public float tin5_may_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin6_june_indoor_average_temperature_setpoint")]
public float tin6_june_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin7_july_indoor_average_temperature_setpoint")]
public float tin7_july_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin8_august_indoor_average_temperature_setpoint")]
public float tin8_august_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin9_september_indoor_average_temperature_setpoint")]
public float tin9_september_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin10_october_indoor_average_temperature_setpoint")]
public float tin10_october_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin11_november_indoor_average_temperature_setpoint")]
public float tin11_november_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tin12_december_indoor_average_temperature_setpoint")]
public float tin12_december_indoor_average_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("tinamp_daily_indoor_sine_wave_variation_amplitude")]
public float tinamp_daily_indoor_sine_wave_variation_amplitude
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("convtol_convergence_tolerance")]
public float convtol_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:Insulation")]
    [Description("This object supplies the information about insulation used around the slab. There" +
        " are two possible configurations: under the slab or vertical insulation around t" +
        "he slab.")]
    public class GroundHeatTransfer_Slab_Insulation
    {
        

[JsonProperty("rins_r_value_of_under_slab_insulation")]
public float rins_r_value_of_under_slab_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("dins_width_of_strip_of_under_slab_insulation")]
public float dins_width_of_strip_of_under_slab_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("rvins_r_value_of_vertical_insulation")]
public float rvins_r_value_of_vertical_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("zvins_depth_of_vertical_insulation")]
public float zvins_depth_of_vertical_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ivins_flag_is_there_vertical_insulation")]
public string ivins_flag_is_there_vertical_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:EquivalentSlab")]
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "Object uses the area - perimeter (area/perimeter) ratio to determine the size of" +
        " an equivalent rectangular slab. EnergyPlus users normally use this option.")]
    public class GroundHeatTransfer_Slab_EquivalentSlab
    {
        

[JsonProperty("apratio_the_area_to_perimeter_ratio_for_this_slab")]
public float apratio_the_area_to_perimeter_ratio_for_this_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slabdepth_thickness_of_slab_on_grade")]
public float slabdepth_thickness_of_slab_on_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("clearance_distance_from_edge_of_slab_to_domain_edge")]
public float clearance_distance_from_edge_of_slab_to_domain_edge
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("zclearance_distance_from_bottom_of_slab_to_domain_bottom")]
public float zclearance_distance_from_bottom_of_slab_to_domain_bottom
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:AutoGrid")]
    [Description("AutoGrid only necessary when EquivalentSlab option not chosen. Not normally neede" +
        "d by EnergyPlus users. This object permits user selection of rectangular slab di" +
        "mensions. NO SLAB DIMENSIONS LESS THAN 6 m.")]
    public class GroundHeatTransfer_Slab_AutoGrid
    {
        

[JsonProperty("slabx_x_dimension_of_the_building_slab")]
public float slabx_x_dimension_of_the_building_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slaby_y_dimension_of_the_building_slab")]
public float slaby_y_dimension_of_the_building_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slabdepth_thickness_of_slab_on_grade")]
public float slabdepth_thickness_of_slab_on_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("clearance_distance_from_edge_of_slab_to_domain_edge")]
public float clearance_distance_from_edge_of_slab_to_domain_edge
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("zclearance_distance_from_bottom_of_slab_to_domain_bottom")]
public float zclearance_distance_from_bottom_of_slab_to_domain_bottom
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:ManualGrid")]
    [Description("Manual Grid only necessary when using manual gridding (not recommended) Used only" +
        " in special cases when previous two objects are not used. User must input comple" +
        "te gridding information.")]
    public class GroundHeatTransfer_Slab_ManualGrid
    {
        

[JsonProperty("nx_number_of_cells_in_the_x_direction")]
public float nx_number_of_cells_in_the_x_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ny_number_of_cells_in_the_y_direction")]
public float ny_number_of_cells_in_the_y_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nz_number_of_cells_in_the_z_direction")]
public float nz_number_of_cells_in_the_z_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ibox_x_direction_cell_indicator_of_slab_edge")]
public float ibox_x_direction_cell_indicator_of_slab_edge
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("jbox_y_direction_cell_indicator_of_slab_edge")]
public float jbox_y_direction_cell_indicator_of_slab_edge
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:XFACE")]
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    public class GroundHeatTransfer_Slab_XFACE
    {
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:YFACE")]
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m,")]
    public class GroundHeatTransfer_Slab_YFACE
    {
    }
    
    [JsonProperty("GroundHeatTransfer:Slab:ZFACE")]
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    public class GroundHeatTransfer_Slab_ZFACE
    {
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:SimParameters")]
    [Description("Specifies certain parameters that control the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    public class GroundHeatTransfer_Basement_SimParameters
    {
        

[JsonProperty("f_multiplier_for_the_adi_solution")]
public float f_multiplier_for_the_adi_solution
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("iyrs_maximum_number_of_yearly_iterations_")]
public float iyrs_maximum_number_of_yearly_iterations_
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:MatlProps")]
    [Description("Specifies the material properties for the Basement preprocessor ground heat trans" +
        "fer simulation. Only the Foundation Wall, Floor Slab, Soil, and Gravel propertie" +
        "s are currently used.")]
    public class GroundHeatTransfer_Basement_MatlProps
    {
        

[JsonProperty("nmat_number_of_materials_in_this_domain")]
public float nmat_number_of_materials_in_this_domain
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("density_for_foundation_wall")]
public float density_for_foundation_wall
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2243;

[JsonProperty("density_for_floor_slab")]
public float density_for_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2243;

[JsonProperty("density_for_ceiling")]
public float density_for_ceiling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)311;

[JsonProperty("density_for_soil")]
public float density_for_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1500;

[JsonProperty("density_for_gravel")]
public float density_for_gravel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2000;

[JsonProperty("density_for_wood")]
public float density_for_wood
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)449;

[JsonProperty("specific_heat_for_foundation_wall")]
public float specific_heat_for_foundation_wall
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)880;

[JsonProperty("specific_heat_for_floor_slab")]
public float specific_heat_for_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)880;

[JsonProperty("specific_heat_for_ceiling")]
public float specific_heat_for_ceiling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1530;

[JsonProperty("specific_heat_for_soil")]
public float specific_heat_for_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)840;

[JsonProperty("specific_heat_for_gravel")]
public float specific_heat_for_gravel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)720;

[JsonProperty("specific_heat_for_wood")]
public float specific_heat_for_wood
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1530;

[JsonProperty("thermal_conductivity_for_foundation_wall")]
public float thermal_conductivity_for_foundation_wall
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.4;

[JsonProperty("thermal_conductivity_for_floor_slab")]
public float thermal_conductivity_for_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.4;

[JsonProperty("thermal_conductivity_for_ceiling")]
public float thermal_conductivity_for_ceiling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.09;

[JsonProperty("thermal_conductivity_for_soil")]
public float thermal_conductivity_for_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("thermal_conductivity_for_gravel")]
public float thermal_conductivity_for_gravel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.9;

[JsonProperty("thermal_conductivity_for_wood")]
public float thermal_conductivity_for_wood
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.12;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:Insulation")]
    [Description("Describes the insulation used on an exterior basement wall for the Basement prepr" +
        "ocessor ground heat transfer simulation.")]
    public class GroundHeatTransfer_Basement_Insulation
    {
        
        private void FALSE;
        
        private void TRUE;
        

[JsonProperty("rext_r_value_of_any_exterior_insulation")]
public float rext_r_value_of_any_exterior_insulation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("insfull_flag_is_the_wall_fully_insulated_")]
public InsfullflagisthewallfullyinsulatedType insfull_flag_is_the_wall_fully_insulated_
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("True for full insulation False for insulation half way down side wall from grade " +
            "line")]
        public enum InsfullflagisthewallfullyinsulatedType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:SurfaceProps")]
    [Description("Specifies the soil surface properties for the Basement preprocessor ground heat t" +
        "ransfer simulation.")]
    public class GroundHeatTransfer_Basement_SurfaceProps
    {
        
        private void FALSE;
        
        private void TRUE;
        

[JsonProperty("albedo_surface_albedo_for_no_snow_conditions")]
public float albedo_surface_albedo_for_no_snow_conditions
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.16;

[JsonProperty("albedo_surface_albedo_for_snow_conditions")]
public float albedo_surface_albedo_for_snow_conditions
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("epsln_surface_emissivity_no_snow")]
public float epsln_surface_emissivity_no_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.94;

[JsonProperty("epsln_surface_emissivity_with_snow")]
public float epsln_surface_emissivity_with_snow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.86;

[JsonProperty("veght_surface_roughness_no_snow_conditions")]
public float veght_surface_roughness_no_snow_conditions
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;

[JsonProperty("veght_surface_roughness_snow_conditions")]
public float veght_surface_roughness_snow_conditions
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("pet_flag_potential_evapotranspiration_on_")]
public PetflagpotentialevapotranspirationonType pet_flag_potential_evapotranspiration_on_
{
    get
    {
    }
    set
    {
    }
}
 = (PetflagpotentialevapotranspirationonType)FALSE;
        
        [Description("Typically, PET is False")]
        public enum PetflagpotentialevapotranspirationonType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:BldgData")]
    [Description("Specifies the surface and gravel thicknesses used for the Basement preprocessor g" +
        "round heat transfer simulation.")]
    public class GroundHeatTransfer_Basement_BldgData
    {
        

[JsonProperty("dwall_wall_thickness")]
public float dwall_wall_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("dslab_floor_slab_thickness")]
public float dslab_floor_slab_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("dgravxy_width_of_gravel_pit_beside_basement_wall")]
public float dgravxy_width_of_gravel_pit_beside_basement_wall
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("dgravzn_gravel_depth_extending_above_the_floor_slab")]
public float dgravzn_gravel_depth_extending_above_the_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("dgravzp_gravel_depth_below_the_floor_slab")]
public float dgravzp_gravel_depth_below_the_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:Interior")]
    [Description("Provides the information needed to simulate the inside boundary conditions for th" +
        "e Basement preprocessor ground heat transfer simulation.")]
    public class GroundHeatTransfer_Basement_Interior
    {
        
        private void FALSE;
        
        private void TRUE;
        

[JsonProperty("cond_flag_is_the_basement_conditioned_")]
public CondflagisthebasementconditionedType cond_flag_is_the_basement_conditioned_
{
    get
    {
    }
    set
    {
    }
}
 = (CondflagisthebasementconditionedType)TRUE;

[JsonProperty("hin_downward_convection_only_heat_transfer_coefficient")]
public float hin_downward_convection_only_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.92;

[JsonProperty("hin_upward_convection_only_heat_transfer_coefficient")]
public float hin_upward_convection_only_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4.04;

[JsonProperty("hin_horizontal_convection_only_heat_transfer_coefficient")]
public float hin_horizontal_convection_only_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.08;

[JsonProperty("hin_downward_combined_convection_and_radiation_heat_transfer_coefficient")]
public float hin_downward_combined_convection_and_radiation_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.13;

[JsonProperty("hin_upward_combined_convection_and_radiation_heat_transfer_coefficient")]
public float hin_upward_combined_convection_and_radiation_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)9.26;

[JsonProperty("hin_horizontal_combined_convection_and_radiation_heat_transfer_coefficient")]
public float hin_horizontal_combined_convection_and_radiation_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)8.29;
        
        [Description("for EnergyPlus this should be TRUE")]
        public enum CondflagisthebasementconditionedType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:ComBldg")]
    [Description("ComBldg contains the monthly average temperatures (C) and possibility of daily va" +
        "riation amplitude")]
    public class GroundHeatTransfer_Basement_ComBldg
    {
        

[JsonProperty("january_average_temperature")]
public float january_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("february_average_temperature")]
public float february_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("march_average_temperature")]
public float march_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("april_average_temperature")]
public float april_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("may_average_temperature")]
public float may_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("june_average_temperature")]
public float june_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("july_average_temperature")]
public float july_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("august_average_temperature")]
public float august_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("september_average_temperature")]
public float september_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("october_average_temperature")]
public float october_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("november_average_temperature")]
public float november_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("december_average_temperature")]
public float december_average_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)22;

[JsonProperty("daily_variation_sine_wave_amplitude")]
public float daily_variation_sine_wave_amplitude
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:EquivSlab")]
    [Description("Using an equivalent slab allows non-rectangular shapes to be modeled accurately. " +
        "The simulation default should be EquivSizing=True")]
    public class GroundHeatTransfer_Basement_EquivSlab
    {
        
        private void FALSE;
        
        private void TRUE;
        

[JsonProperty("apratio_the_area_to_perimeter_ratio_for_this_slab")]
public float apratio_the_area_to_perimeter_ratio_for_this_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equivsizing_flag")]
public EquivsizingflagType equivsizing_flag
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Will the dimensions of an equivalent slab be calculated (TRUE) or will the dimens" +
            "ions be input directly? (FALSE)] Only advanced special simulations should use FA" +
            "LSE.")]
        public enum EquivsizingflagType
        {
        }
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:EquivAutoGrid")]
    [Description("EquivAutoGrid necessary when EquivSizing=TRUE, TRUE is is the normal case.")]
    public class GroundHeatTransfer_Basement_EquivAutoGrid
    {
        

[JsonProperty("clearance_distance_from_outside_of_wall_to_edge_of_3_d_ground_domain")]
public float clearance_distance_from_outside_of_wall_to_edge_of_3_d_ground_domain
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("slabdepth_thickness_of_the_floor_slab")]
public float slabdepth_thickness_of_the_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("basedepth_depth_of_the_basement_wall_below_grade")]
public float basedepth_depth_of_the_basement_wall_below_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:AutoGrid")]
    [Description("AutoGrid only necessary when EquivSizing is false If the modeled building is not " +
        "a rectangle or square, Equivalent sizing MUST be used to get accurate results")]
    public class GroundHeatTransfer_Basement_AutoGrid
    {
        

[JsonProperty("clearance_distance_from_outside_of_wall_to_edge_")]
public float clearance_distance_from_outside_of_wall_to_edge_
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("slabx_x_dimension_of_the_building_slab")]
public float slabx_x_dimension_of_the_building_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slaby_y_dimension_of_the_building_slab")]
public float slaby_y_dimension_of_the_building_slab
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("concagheight_height_of_the_foundation_wall_above_grade")]
public float concagheight_height_of_the_foundation_wall_above_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("slabdepth_thickness_of_the_floor_slab")]
public float slabdepth_thickness_of_the_floor_slab
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("basedepth_depth_of_the_basement_wall_below_grade")]
public float basedepth_depth_of_the_basement_wall_below_grade
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:ManualGrid")]
    [Description("Manual Grid only necessary using manual gridding (not recommended)")]
    public class GroundHeatTransfer_Basement_ManualGrid
    {
        

[JsonProperty("nx_number_of_cells_in_the_x_direction_20_")]
public float nx_number_of_cells_in_the_x_direction_20_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ny_number_of_cells_in_the_y_direction_20_")]
public float ny_number_of_cells_in_the_y_direction_20_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nzag_number_of_cells_in_the_z_direction_above_grade_4_always_")]
public float nzag_number_of_cells_in_the_z_direction_above_grade_4_always_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nzbg_number_of_cells_in_z_direction_below_grade_10_35_")]
public float nzbg_number_of_cells_in_z_direction_below_grade_10_35_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ibase_x_direction_cell_indicator_of_slab_edge_5_20_")]
public float ibase_x_direction_cell_indicator_of_slab_edge_5_20_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("jbase_y_direction_cell_indicator_of_slab_edge_5_20_")]
public float jbase_y_direction_cell_indicator_of_slab_edge_5_20_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("kbase_z_direction_cell_indicator_of_the_top_of_the_floor_slab_5_20_")]
public float kbase_z_direction_cell_indicator_of_the_top_of_the_floor_slab_5_20_
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:XFACE")]
    [Description("This is only needed when using manual gridding (not recommended) XFACE: X Directi" +
        "on cell face coordinates: m")]
    public class GroundHeatTransfer_Basement_XFACE
    {
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:YFACE")]
    [Description("This is only needed when using manual gridding (not recommended) YFACE: Y Directi" +
        "on cell face coordinates: m")]
    public class GroundHeatTransfer_Basement_YFACE
    {
    }
    
    [JsonProperty("GroundHeatTransfer:Basement:ZFACE")]
    [Description("This is only needed when using manual gridding (not recommended) ZFACE: Z Directi" +
        "on cell face coordinates: m")]
    public class GroundHeatTransfer_Basement_ZFACE
    {
    }
}
namespace EnergyPlus.Economics
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("CurrencyType")]
    [Description("If CurrencyType is not specified, it will default to USD and produce $ in the rep" +
        "orts.")]
    public class CurrencyType
    {
        
        private void AFN;
        
        private void ALL;
        
        private void ANG;
        
        private void ARS;
        
        private void AUD;
        
        private void AWG;
        
        private void AZN;
        
        private void BAM;
        
        private void BBD;
        
        private void BGN;
        
        private void BMD;
        
        private void BND;
        
        private void BOB;
        
        private void BRL;
        
        private void BSD;
        
        private void BWP;
        
        private void BYR;
        
        private void BZD;
        
        private void CAD;
        
        private void CHF;
        
        private void CLP;
        
        private void CNY;
        
        private void COP;
        
        private void CRC;
        
        private void CUP;
        
        private void CZK;
        
        private void DKK;
        
        private void DOP;
        
        private void EEK;
        
        private void EGP;
        
        private void EUR;
        
        private void FJD;
        
        private void GBP;
        
        private void GHC;
        
        private void GIP;
        
        private void GTQ;
        
        private void GYD;
        
        private void HKD;
        
        private void HNL;
        
        private void HRK;
        
        private void HUF;
        
        private void IDR;
        
        private void ILS;
        
        private void IMP;
        
        private void INR;
        
        private void IRR;
        
        private void ISK;
        
        private void JEP;
        
        private void JMD;
        
        private void JPY;
        
        private void KGS;
        
        private void KHR;
        
        private void KPW;
        
        private void KRW;
        
        private void KYD;
        
        private void KZT;
        
        private void LAK;
        
        private void LBP;
        
        private void LKR;
        
        private void LRD;
        
        private void LTL;
        
        private void LVL;
        
        private void MKD;
        
        private void MNT;
        
        private void MUR;
        
        private void MXN;
        
        private void MYR;
        
        private void MZN;
        
        private void NAD;
        
        private void NGN;
        
        private void NIO;
        
        private void NOK;
        
        private void NPR;
        
        private void NZD;
        
        private void OMR;
        
        private void PAB;
        
        private void PEN;
        
        private void PHP;
        
        private void PKR;
        
        private void PLN;
        
        private void PYG;
        
        private void QAR;
        
        private void RON;
        
        private void RSD;
        
        private void RUB;
        
        private void SAR;
        
        private void SBD;
        
        private void SCR;
        
        private void SEK;
        
        private void SGD;
        
        private void SHP;
        
        private void SOS;
        
        private void SRD;
        
        private void SVC;
        
        private void SYP;
        
        private void THB;
        
        private void TRL;
        
        private void TRY;
        
        private void TTD;
        
        private void TVD;
        
        private void TWD;
        
        private void UAH;
        
        private void USD;
        
        private void UYU;
        
        private void UZS;
        
        private void VEF;
        
        private void VND;
        
        private void XCD;
        
        private void YER;
        
        private void ZAR;
        
        private void ZWD;
        

[JsonProperty("monetary_unit")]
public MonetaryunitType monetary_unit
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("The commonly used three letter currency code for the units of money for the count" +
            "ry or region. Based on ISO 4217 currency codes. Common currency codes are USD fo" +
            "r $ and EUR for Euros.")]
        public enum MonetaryunitType
        {
        }
    }
    
    [JsonProperty("ComponentCost:Adjustments")]
    [Description("Used to perform various modifications to the construction costs to arrive at an e" +
        "stimate for total project costs. This object allows extending the line item mode" +
        "l so that the overall costs of the project will reflect various profit and fees." +
        "")]
    public class ComponentCost_Adjustments
    {
        

[JsonProperty("miscellaneous_cost_per_conditioned_area")]
public float miscellaneous_cost_per_conditioned_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_and_engineering_fees")]
public float design_and_engineering_fees
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("contractor_fee")]
public float contractor_fee
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("contingency")]
public float contingency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("permits_bonding_and_insurance")]
public float permits_bonding_and_insurance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("commissioning_fee")]
public float commissioning_fee
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regional_adjustment_factor")]
public float regional_adjustment_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ComponentCost:Reference")]
    [Description(@"Used to allow comparing the current cost estimate to the results of a previous estimate for a reference building. This object parallels the ComponentCost:Adjustments object but adds a field for entering the cost line item model result for the reference building. The factors entered in this object are applied to the reference building while the factors listed in the ComponentCost:Adjustments object are applied to the current building model cost estimate.")]
    public class ComponentCost_Reference
    {
        

[JsonProperty("reference_building_line_item_costs")]
public float reference_building_line_item_costs
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_miscellaneous_cost_per_conditioned_area")]
public float reference_building_miscellaneous_cost_per_conditioned_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_design_and_engineering_fees")]
public float reference_building_design_and_engineering_fees
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_contractor_fee")]
public float reference_building_contractor_fee
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_contingency")]
public float reference_building_contingency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_permits_bonding_and_insurance")]
public float reference_building_permits_bonding_and_insurance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_commissioning_fee")]
public float reference_building_commissioning_fee
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_building_regional_adjustment_factor")]
public float reference_building_regional_adjustment_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ComponentCost:LineItem")]
    [Description("Each instance of this object creates a cost line item and will contribute to the " +
        "total for a cost estimate.")]
    public class ComponentCost_LineItem
    {
        
        private void Chiller:Electric;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:DX;
        
        private void Coil:Heating:Fuel;
        
        private void Construction;
        
        private void Daylighting:Controls;
        
        private void General;
        
        private void Generator:Photovoltaic;
        
        private void Lights;
        
        private void Shading:Zone:Detailed;
        

[JsonProperty("type")]
public string type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("line_item_type")]
public LineitemtypeType line_item_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("item_name")]
public string item_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("object_end_use_key")]
public string object_end_use_key
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_each")]
public float cost_per_each
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_area")]
public float cost_per_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_unit_of_output_capacity")]
public float cost_per_unit_of_output_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_unit_of_output_capacity_per_cop")]
public float cost_per_unit_of_output_capacity_per_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_volume")]
public float cost_per_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_volume_rate")]
public float cost_per_volume_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_energy_per_temperature_difference")]
public float cost_per_energy_per_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("quantity")]
public float quantity
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("extend choice-keys as Cases are added to code")]
        public enum LineitemtypeType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Tariff")]
    [Description(@"Defines the name of a utility cost tariff, the type of tariff, and other details about the overall tariff. Each other object that is part of the tariff model references the tariff name. See UtilityCost:Charge:Simple, UtilityCost:Charge:Block, UtilityCost:Ratchet, UtilityCost:Qualify, UtilityCost:Variable and UtilityCost:Computation objects.")]
    public class UtilityCost_Tariff
    {
        
        private void CCF;
        
        private void MCF;
        
        private void MJ;
        
        private void MMBtu;
        
        private void Therm;
        
        private void UserDefined;
        
        private void gal;
        
        private void kBtu;
        
        private void kWh;
        
        private void kgal;
        
        private void m3;
        
        private void Day;
        
        private void FullHour;
        
        private void HalfHour;
        
        private void QuarterHour;
        
        private void Week;
        
        private void BuyFromUtility;
        
        private void NetMetering;
        
        private void SellToUtility;
        

[JsonProperty("output_meter_name")]
public string output_meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conversion_factor_choice")]
public ConversionfactorchoiceType conversion_factor_choice
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_conversion_factor")]
public float energy_conversion_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_conversion_factor")]
public float demand_conversion_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("time_of_use_period_schedule_name")]
public string time_of_use_period_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season_schedule_name")]
public string season_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("month_schedule_name")]
public string month_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_window_length")]
public DemandwindowlengthType demand_window_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("monthly_charge_or_variable_name")]
public string monthly_charge_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_monthly_charge_or_variable_name")]
public string minimum_monthly_charge_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("real_time_pricing_charge_schedule_name")]
public string real_time_pricing_charge_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("customer_baseline_load_schedule_name")]
public string customer_baseline_load_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("group_name")]
public string group_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("buy_or_sell")]
public BuyorsellType buy_or_sell
{
    get
    {
    }
    set
    {
    }
}
 = (BuyorsellType)BuyFromUtility;
        
        [Description("A choice that allows several different predefined conversion factors to be used; " +
            "otherwise user defined conversion factors are used as defined in the next two fi" +
            "elds. If left blank m3 is used for water meters and kWh are used for all other m" +
            "eters.")]
        public enum ConversionfactorchoiceType
        {
        }
        
        [Description(@"The determination of demand can vary by utility. Some utilities use the peak instantaneous demand measured but most use a fifteen minute average demand or a one hour average demand. Some gas utilities measure demand as the use during the peak day or peak week.")]
        public enum DemandwindowlengthType
        {
        }
        
        [Description(@"Sets whether the tariff is used for buying selling or both to the utility. This should be allowed to default to buyFromUtility unless a power generation system is included in the building that may generate more power than the building needs during the year")]
        public enum BuyorsellType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Qualify")]
    [Description(@"The qualify object allows only tariffs to be selected based on limits which may apply such as maximum or minimum demand requirements. If the results of the simulation fall outside of the range of qualifications, that tariff is still calculated but the ""Qualified"" entry will say ""No"" and the UtilityCost:Qualify that caused its exclusion is shown. Multiple UtilityCost:Qualify objects can appear for the same tariff and they can be based on any variable.")]
    public class UtilityCost_Qualify
    {
        
        private void Maximum;
        
        private void Minimum;
        
        private void Annual;
        
        private void Fall;
        
        private void Spring;
        
        private void Summer;
        
        private void Winter;
        
        private void Consecutive;
        
        private void Count;
        

[JsonProperty("utility_cost_qualify_name")]
public string utility_cost_qualify_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_name")]
public string variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("qualify_type")]
public QualifytypeType qualify_type
{
    get
    {
    }
    set
    {
    }
}
 = (QualifytypeType)Maximum;

[JsonProperty("threshold_value_or_variable_name")]
public string threshold_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season")]
public SeasonType season
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("threshold_test")]
public ThresholdtestType threshold_test
{
    get
    {
    }
    set
    {
    }
}
 = (ThresholdtestType)Consecutive;

[JsonProperty("number_of_months")]
public float number_of_months
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum QualifytypeType
        {
        }
        
        [Description("If the UtilityCost:Qualify only applies to a season enter the season name. If thi" +
            "s field is left blank it defaults to Annual.")]
        public enum SeasonType
        {
        }
        
        [Description(@"Uses the number in Number of Months in one of two different ways depending on the Threshold  Test. If the Threshold Test is set to Count then the qualification is based on the count of the total number of months per year. If the Threshold Test is set to consecutive then the qualification is based on a consecutive number of months.")]
        public enum ThresholdtestType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Charge:Simple")]
    [Description(@"UtilityCost:Charge:Simple is one of the most often used objects for tariff calculation. It is used to compute energy and demand charges that are very simple. It may also be used for taxes, surcharges and any other charges that occur on a utility bill. Multiple UtilityCost:Charge:Simple objects may be defined for a single tariff and they will be added together.")]
    public class UtilityCost_Charge_Simple
    {
        
        private void Annual;
        
        private void Fall;
        
        private void Spring;
        
        private void Summer;
        
        private void Winter;
        
        private void Adjustment;
        
        private void Basis;
        
        private void DemandCharges;
        
        private void EnergyCharges;
        
        private void NotIncluded;
        
        private void ServiceCharges;
        
        private void Subtotal;
        
        private void Surcharge;
        
        private void Taxes;
        
        private void Total;
        

[JsonProperty("utility_cost_charge_simple_name")]
public string utility_cost_charge_simple_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_variable")]
public string source_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season")]
public SeasonType season
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("category_variable_name")]
public CategoryvariablenameType category_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cost_per_unit_value_or_variable_name")]
public string cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If this is set to annual the calculations are performed for the UtilityCost:Charg" +
            "e:Simple for the entire year (all months) otherwise it is calculated only for th" +
            "ose months in the season defined.")]
        public enum SeasonType
        {
        }
        
        [Description("This field shows where the charge should be added. The reason to enter this field" +
            " appropriately is so that the charge gets reported in a reasonable category. The" +
            " charge automatically gets added to the variable that is the category.")]
        public enum CategoryvariablenameType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Charge:Block")]
    [Description("Used to compute energy and demand charges (or any other charges) that are structu" +
        "red in blocks of charges. Multiple UtilityCost:Charge:Block objects may be defin" +
        "ed for a single tariff and they will be added together.")]
    public class UtilityCost_Charge_Block
    {
        
        private void Annual;
        
        private void Fall;
        
        private void Spring;
        
        private void Summer;
        
        private void Winter;
        
        private void Adjustment;
        
        private void Basis;
        
        private void DemandCharges;
        
        private void EnergyCharges;
        
        private void NotIncluded;
        
        private void ServiceCharges;
        
        private void Subtotal;
        
        private void Surcharge;
        
        private void Taxes;
        
        private void Total;
        

[JsonProperty("utility_cost_charge_block_name")]
public string utility_cost_charge_block_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_variable")]
public string source_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season")]
public SeasonType season
{
    get
    {
    }
    set
    {
    }
}
 = (SeasonType)Annual;

[JsonProperty("category_variable_name")]
public CategoryvariablenameType category_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("remaining_into_variable")]
public string remaining_into_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_multiplier_value_or_variable_name")]
public string block_size_multiplier_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_1_value_or_variable_name")]
public string block_size_1_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_1_cost_per_unit_value_or_variable_name")]
public string block_1_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_2_value_or_variable_name")]
public string block_size_2_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_2_cost_per_unit_value_or_variable_name")]
public string block_2_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_3_value_or_variable_name")]
public string block_size_3_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_3_cost_per_unit_value_or_variable_name")]
public string block_3_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_4_value_or_variable_name")]
public string block_size_4_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_4_cost_per_unit_value_or_variable_name")]
public string block_4_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_5_value_or_variable_name")]
public string block_size_5_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_5_cost_per_unit_value_or_variable_name")]
public string block_5_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_6_value_or_variable_name")]
public string block_size_6_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_6_cost_per_unit_value_or_variable_name")]
public string block_6_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_7_value_or_variable_name")]
public string block_size_7_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_7_cost_per_unit_value_or_variable_name")]
public string block_7_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_8_value_or_variable_name")]
public string block_size_8_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_8_cost_per_unit_value_or_variable_name")]
public string block_8_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_9_value_or_variable_name")]
public string block_size_9_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_9_cost_per_unit_value_or_variable_name")]
public string block_9_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_10_value_or_variable_name")]
public string block_size_10_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_10_cost_per_unit_value_or_variable_name")]
public string block_10_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_11_value_or_variable_name")]
public string block_size_11_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_11_cost_per_unit_value_or_variable_name")]
public string block_11_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_12_value_or_variable_name")]
public string block_size_12_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_12_cost_per_unit_value_or_variable_name")]
public string block_12_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_13_value_or_variable_name")]
public string block_size_13_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_13_cost_per_unit_value_or_variable_name")]
public string block_13_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_14_value_or_variable_name")]
public string block_size_14_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_14_cost_per_unit_value_or_variable_name")]
public string block_14_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_size_15_value_or_variable_name")]
public string block_size_15_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("block_15_cost_per_unit_value_or_variable_name")]
public string block_15_cost_per_unit_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If this is set to annual the calculations are performed for the UtilityCost:Charg" +
            "e:Block for the entire year (all months) otherwise it is calculated only for tho" +
            "se months in the season defined.")]
        public enum SeasonType
        {
        }
        
        [Description("This field shows where the charge should be added. The reason to enter this field" +
            " appropriately is so that the charge gets reported in a reasonable category. The" +
            " charge automatically gets added to the variable that is the category.")]
        public enum CategoryvariablenameType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Ratchet")]
    [Description(@"Allows the modeling of tariffs that include some type of seasonal ratcheting. Ratchets are most common when used with electric demand charges. A ratchet is when a utility requires that the demand charge for a month with a low demand may be increased to be more consistent with a month that set a higher demand charge.")]
    public class UtilityCost_Ratchet
    {
        
        private void Annual;
        
        private void Fall;
        
        private void Monthly;
        
        private void Spring;
        
        private void Summer;
        
        private void Winter;
        
        private void Annual;
        
        private void Fall;
        
        private void Spring;
        
        private void Summer;
        
        private void Winter;
        

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseline_source_variable")]
public string baseline_source_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("adjustment_source_variable")]
public string adjustment_source_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season_from")]
public SeasonfromType season_from
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("season_to")]
public SeasontoType season_to
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier_value_or_variable_name")]
public string multiplier_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("offset_value_or_variable_name")]
public string offset_value_or_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The name of the season that is being examined. The maximum value for all of the months in the named season is what is used with the multiplier and offset. This is most commonly Summer or Annual. When Monthly is used the adjustment source variable is used directly for all months.")]
        public enum SeasonfromType
        {
        }
        
        [Description(@"The name of the season when the ratchet would be calculated. This is most commonly Winter. The ratchet only is applied to the months in the named season. The resulting variable for months not in the Season To selection will contain the values as appear in the baseline source variable.")]
        public enum SeasontoType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Variable")]
    [Description("Allows for the direct entry of monthly values into a utility tariff variable.")]
    public class UtilityCost_Variable
    {
        
        private void Currency;
        
        private void Demand;
        
        private void Dimensionless;
        
        private void Energy;
        

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_type")]
public VariabletypeType variable_type
{
    get
    {
    }
    set
    {
    }
}
 = (VariabletypeType)Dimensionless;

[JsonProperty("january_value")]
public float january_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("february_value")]
public float february_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("march_value")]
public float march_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("april_value")]
public float april_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("may_value")]
public float may_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("june_value")]
public float june_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("july_value")]
public float july_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("august_value")]
public float august_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("september_value")]
public float september_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("october_value")]
public float october_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("november_value")]
public float november_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("december_value")]
public float december_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum VariabletypeType
        {
        }
    }
    
    [JsonProperty("UtilityCost:Computation")]
    [Description(@"The object lists a series of computations that are used to perform the utility bill calculation. The object is only used for complex tariffs that cannot be modeled any other way. For most utility tariffs, UtilityCost:Computation is unnecessary and should be avoided. If UtilityCost:Computation is used, it must contain references to all objects involved in the rate in the order that they should be computed.")]
    public class UtilityCost_Computation
    {
        

[JsonProperty("tariff_name")]
public string tariff_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_1")]
public string compute_step_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_2")]
public string compute_step_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_3")]
public string compute_step_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_4")]
public string compute_step_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_5")]
public string compute_step_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_6")]
public string compute_step_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_7")]
public string compute_step_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_8")]
public string compute_step_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_9")]
public string compute_step_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_10")]
public string compute_step_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_11")]
public string compute_step_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_12")]
public string compute_step_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_13")]
public string compute_step_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_14")]
public string compute_step_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_15")]
public string compute_step_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_16")]
public string compute_step_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_17")]
public string compute_step_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_18")]
public string compute_step_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_19")]
public string compute_step_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_20")]
public string compute_step_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_21")]
public string compute_step_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_22")]
public string compute_step_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_23")]
public string compute_step_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_24")]
public string compute_step_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_25")]
public string compute_step_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_26")]
public string compute_step_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_27")]
public string compute_step_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_28")]
public string compute_step_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_29")]
public string compute_step_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compute_step_30")]
public string compute_step_30
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("LifeCycleCost:Parameters")]
    [Description(@"Provides inputs related to the overall life-cycle analysis. It establishes many of the assumptions used in computing the present value. It is important that when comparing the results of multiple simulations that the fields in the LifeCycleCost:Parameters objects are the same for all the simulations. When this object is present the tabular report file will contain the Life-Cycle Cost Report.")]
    public class LifeCycleCost_Parameters
    {
        
        private void BeginningOfYear;
        
        private void EndOfYear;
        
        private void MidYear;
        
        private void ConstantDollar;
        
        private void CurrentDollar;
        
        private void April;
        
        private void August;
        
        private void December;
        
        private void February;
        
        private void January;
        
        private void July;
        
        private void June;
        
        private void March;
        
        private void May;
        
        private void November;
        
        private void October;
        
        private void September;
        
        private void April;
        
        private void August;
        
        private void December;
        
        private void February;
        
        private void January;
        
        private void July;
        
        private void June;
        
        private void March;
        
        private void May;
        
        private void November;
        
        private void October;
        
        private void September;
        
        private void ModifiedAcceleratedCostRecoverySystem-10year;
        
        private void ModifiedAcceleratedCostRecoverySystem-15year;
        
        private void ModifiedAcceleratedCostRecoverySystem-20year;
        
        private void ModifiedAcceleratedCostRecoverySystem-3year;
        
        private void ModifiedAcceleratedCostRecoverySystem-5year;
        
        private void ModifiedAcceleratedCostRecoverySystem-7year;
        
        private void None;
        
        private void StraightLine-27year;
        
        private void StraightLine-31year;
        
        private void StraightLine-39year;
        
        private void StraightLine-40year;
        

[JsonProperty("discounting_convention")]
public DiscountingconventionType discounting_convention
{
    get
    {
    }
    set
    {
    }
}
 = (DiscountingconventionType)EndOfYear;

[JsonProperty("inflation_approach")]
public InflationapproachType inflation_approach
{
    get
    {
    }
    set
    {
    }
}
 = (InflationapproachType)ConstantDollar;

[JsonProperty("real_discount_rate")]
public float real_discount_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_discount_rate")]
public float nominal_discount_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inflation")]
public float inflation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("base_date_month")]
public BasedatemonthType base_date_month
{
    get
    {
    }
    set
    {
    }
}
 = (BasedatemonthType)January;

[JsonProperty("base_date_year")]
public float base_date_year
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("service_date_month")]
public ServicedatemonthType service_date_month
{
    get
    {
    }
    set
    {
    }
}
 = (ServicedatemonthType)January;

[JsonProperty("service_date_year")]
public float service_date_year
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length_of_study_period_in_years")]
public float length_of_study_period_in_years
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tax_rate")]
public float tax_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("depreciation_method")]
public DepreciationmethodType depreciation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DepreciationmethodType)None;
        
        [Description("The field specifies if the discounting of future costs should be computed as occu" +
            "rring at the end of each year or the middle of each year or the beginning of eac" +
            "h year. The most common discounting convention uses the end of each year.")]
        public enum DiscountingconventionType
        {
        }
        
        [Description(@"This field is used to determine if the analysis should use constant dollars or current dollars which is related to how inflation is treated. If ConstantDollar is selected then the Real Discount Rate input is used and it excludes the rate of inflation. If CurrentDollar is selected then the Nominal Discount Rate input is used and it includes the rate of inflation.")]
        public enum InflationapproachType
        {
        }
        
        [Description("Enter the month that is the beginning of study period also known as the beginning" +
            " of the base period.")]
        public enum BasedatemonthType
        {
        }
        
        [Description(@"Enter the month that is the beginning of building occupancy. Energy costs computed by EnergyPlus are assumed to occur during the year following the service date. The service date must be the same or later than the Base Date. This field could also be referred to as part of beneficial occupancy date.")]
        public enum ServicedatemonthType
        {
        }
        
        [Description("For an analysis that includes income tax impacts this entry describes how capital" +
            " costs are depreciated. Only one depreciation method may be used for an analysis" +
            " and is applied to all capital expenditures.")]
        public enum DepreciationmethodType
        {
        }
    }
    
    [JsonProperty("LifeCycleCost:RecurringCosts")]
    [Description("Recurring costs are costs that repeat over time on a regular schedule during the " +
        "study period. If costs associated with equipment do repeat but not on a regular " +
        "schedule, use LifeCycleCost:NonrecurringCost objects instead.")]
    public class LifeCycleCost_RecurringCosts
    {
        
        private void Maintenance;
        
        private void MajorOverhaul;
        
        private void MinorOverhaul;
        
        private void Operation;
        
        private void OtherOperational;
        
        private void Repair;
        
        private void Replacement;
        
        private void BasePeriod;
        
        private void ServicePeriod;
        

[JsonProperty("category")]
public CategoryType category
{
    get
    {
    }
    set
    {
    }
}
 = (CategoryType)Maintenance;

[JsonProperty("cost")]
public float cost
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_of_costs")]
public StartofcostsType start_of_costs
{
    get
    {
    }
    set
    {
    }
}
 = (StartofcostsType)ServicePeriod;

[JsonProperty("years_from_start")]
public float years_from_start
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("months_from_start")]
public float months_from_start
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("repeat_period_years")]
public float repeat_period_years
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("repeat_period_months")]
public float repeat_period_months
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("annual_escalation_rate")]
public float annual_escalation_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CategoryType
        {
        }
        
        [Description("Enter when the costs start. The First Year of Cost is based on the number of year" +
            "s past the Start of Costs. For most maintenance costs the Start of Costs should " +
            "be Service Period.")]
        public enum StartofcostsType
        {
        }
    }
    
    [JsonProperty("LifeCycleCost:NonrecurringCost")]
    [Description("A non-recurring cost happens only once during the study period. For costs that oc" +
        "cur more than once during the study period on a regular schedule, use the LifeCy" +
        "cleCost:RecurringCost object.")]
    public class LifeCycleCost_NonrecurringCost
    {
        
        private void Construction;
        
        private void OtherCapital;
        
        private void Salvage;
        
        private void BasePeriod;
        
        private void ServicePeriod;
        

[JsonProperty("category")]
public CategoryType category
{
    get
    {
    }
    set
    {
    }
}
 = (CategoryType)Construction;

[JsonProperty("cost")]
public float cost
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_of_costs")]
public StartofcostsType start_of_costs
{
    get
    {
    }
    set
    {
    }
}
 = (StartofcostsType)ServicePeriod;

[JsonProperty("years_from_start")]
public float years_from_start
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("months_from_start")]
public float months_from_start
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CategoryType
        {
        }
        
        [Description("Enter when the costs start. The First Year of Cost is based on the number of year" +
            "s past the Start of Costs. For most non-recurring costs the Start of Costs shoul" +
            "d be Base Period which begins at the base month and year.")]
        public enum StartofcostsType
        {
        }
    }
    
    [JsonProperty("LifeCycleCost:UsePriceEscalation")]
    [Description("Life cycle cost escalation factors. The values for this object may be found in th" +
        "e annual supplement to NIST Handbook 135 in Tables Ca-1 to Ca-5 and are included" +
        " in an EnergyPlus dataset file.")]
    public class LifeCycleCost_UsePriceEscalation
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void ElectricityNet;
        
        private void ElectricityProduced;
        
        private void ElectricityPurchased;
        
        private void ElectricitySurplusSold;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Water;
        
        private void April;
        
        private void August;
        
        private void December;
        
        private void February;
        
        private void January;
        
        private void July;
        
        private void June;
        
        private void March;
        
        private void May;
        
        private void November;
        
        private void October;
        
        private void September;
        

[JsonProperty("lcc_price_escalation_name")]
public string lcc_price_escalation_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("resource")]
public ResourceType resource
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("escalation_start_year")]
public float escalation_start_year
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("escalation_start_month")]
public EscalationstartmonthType escalation_start_month
{
    get
    {
    }
    set
    {
    }
}
 = (EscalationstartmonthType)January;

[JsonProperty("escalations")]
public string escalations
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ResourceType
        {
        }
        
        [Description("This field and the Escalation Start Year define the time that corresponds to Year" +
            " 1 Escalation such as 2010 when the escalation rates are applied. This field and" +
            " the Escalation Start Year define the time that escalation begins.")]
        public enum EscalationstartmonthType
        {
        }
    }
    
    [JsonProperty("LifeCycleCost:UseAdjustment")]
    [Description(@"Used by advanced users to adjust the energy or water use costs for future years. This should not be used for compensating for inflation but should only be used to increase the costs of energy or water based on assumed changes to the actual usage, such as anticipated changes in the future function of the building. The adjustments begin at the start of the service period.")]
    public class LifeCycleCost_UseAdjustment
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void ElectricityNet;
        
        private void ElectricityProduced;
        
        private void ElectricityPurchased;
        
        private void ElectricitySurplusSold;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Water;
        

[JsonProperty("resource")]
public ResourceType resource
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multipliers")]
public string multipliers
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ResourceType
        {
        }
    }
}
namespace EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Generator:InternalCombustionEngine")]
    [Description("This generator model is the empirical model from the Building Loads and System Th" +
        "ermodynamics (BLAST) program. Engine performance curves are generated by fitting" +
        " catalog data to second order polynomial equations. Three sets of coefficients a" +
        "re required.")]
    public class Generator_InternalCombustionEngine
    {
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("rated_power_output")]
public float rated_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_circuit_node_name")]
public string electric_circuit_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shaft_power_curve_name")]
public string shaft_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("jacket_heat_recovery_curve_name")]
public string jacket_heat_recovery_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lube_heat_recovery_curve_name")]
public string lube_heat_recovery_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_exhaust_energy_curve_name")]
public string total_exhaust_energy_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_temperature_curve_name")]
public string exhaust_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public float coefficient_1_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public float coefficient_2_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public float maximum_exhaust_flow_per_unit_of_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_minimum_exhaust_temperature")]
public float design_minimum_exhaust_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public float design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)Diesel;

[JsonProperty("heat_recovery_maximum_temperature")]
public float heat_recovery_maximum_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80;
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Generator:CombustionTurbine")]
    [Description(@"This generator model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Generator performance curves are generated by fitting catalog data to second order polynomial equations. Three sets of coefficients are required.")]
    public class Generator_CombustionTurbine
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("rated_power_output")]
public float rated_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_circuit_node_name")]
public string electric_circuit_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_based_fuel_input_curve_name")]
public string part_load_based_fuel_input_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_based_fuel_input_curve_name")]
public string temperature_based_fuel_input_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_flow_curve_name")]
public string exhaust_flow_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_based_exhaust_temperature_curve_name")]
public string part_load_based_exhaust_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_based_exhaust_temperature_curve_name")]
public string temperature_based_exhaust_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_lube_energy_curve_name")]
public string heat_recovery_lube_energy_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public float coefficient_1_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public float coefficient_2_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public float maximum_exhaust_flow_per_unit_of_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_minimum_exhaust_temperature")]
public float design_minimum_exhaust_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_air_inlet_temperature")]
public float design_air_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public float design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)NaturalGas;

[JsonProperty("heat_recovery_maximum_temperature")]
public float heat_recovery_maximum_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Generator:MicroTurbine")]
    [Description("MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The " +
        "model calculates electrical power output, fuel use, standby and ancillary power." +
        " Energy recovery from exhaust air can be used to heat water.")]
    public class Generator_MicroTurbine
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void InternalControl;
        
        private void PlantControl;
        

[JsonProperty("reference_electrical_power_output")]
public float reference_electrical_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_full_load_electrical_power_output")]
public float minimum_full_load_electrical_power_output
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_full_load_electrical_power_output")]
public float maximum_full_load_electrical_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_electrical_efficiency_using_lower_heating_value")]
public float reference_electrical_efficiency_using_lower_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_combustion_air_inlet_temperature")]
public float reference_combustion_air_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("reference_combustion_air_inlet_humidity_ratio")]
public float reference_combustion_air_inlet_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00638;

[JsonProperty("reference_elevation")]
public float reference_elevation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("electrical_power_function_of_temperature_and_elevation_curve_name")]
public string electrical_power_function_of_temperature_and_elevation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_efficiency_function_of_temperature_curve_name")]
public string electrical_efficiency_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_efficiency_function_of_part_load_ratio_curve_name")]
public string electrical_efficiency_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)NaturalGas;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50000;

[JsonProperty("fuel_lower_heating_value")]
public float fuel_lower_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)45450;

[JsonProperty("standby_power")]
public float standby_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ancillary_power")]
public float ancillary_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ancillary_power_function_of_fuel_input_curve_name")]
public string ancillary_power_function_of_fuel_input_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string heat_recovery_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string heat_recovery_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_thermal_efficiency_using_lower_heat_value")]
public float reference_thermal_efficiency_using_lower_heat_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("reference_inlet_water_temperature")]
public float reference_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_flow_operating_mode")]
public HeatrecoverywaterflowoperatingmodeType heat_recovery_water_flow_operating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverywaterflowoperatingmodeType)PlantControl;

[JsonProperty("reference_heat_recovery_water_flow_rate")]
public float reference_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name")]
public string heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_efficiency_function_of_temperature_and_elevation_curve_name")]
public string thermal_efficiency_function_of_temperature_and_elevation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_rate_function_of_part_load_ratio_curve_name")]
public string heat_recovery_rate_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_rate_function_of_inlet_water_temperature_curve_name")]
public string heat_recovery_rate_function_of_inlet_water_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_rate_function_of_water_flow_rate_curve_name")]
public string heat_recovery_rate_function_of_water_flow_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_heat_recovery_water_flow_rate")]
public float minimum_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_heat_recovery_water_flow_rate")]
public float maximum_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_heat_recovery_water_temperature")]
public float maximum_heat_recovery_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("combustion_air_inlet_node_name")]
public string combustion_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("combustion_air_outlet_node_name")]
public string combustion_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_exhaust_air_mass_flow_rate")]
public float reference_exhaust_air_mass_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_flow_rate_function_of_temperature_curve_name")]
public string exhaust_air_flow_rate_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_flow_rate_function_of_part_load_ratio_curve_name")]
public string exhaust_air_flow_rate_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_exhaust_air_outlet_temperature")]
public float nominal_exhaust_air_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_temperature_function_of_temperature_curve_name")]
public string exhaust_air_temperature_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_temperature_function_of_part_load_ratio_curve_name")]
public string exhaust_air_temperature_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FueltypeType
        {
        }
        
        [Description(@"PlantControl means the heat recovery water flow rate is determined by the plant, but the user needs to supply a heat recovery water flow rate. InternalControl means the heat recovery water flow rate is controlled by this generator. If 'InternalControl' is selected, then the user needs to supply a reference heat recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.")]
        public enum HeatrecoverywaterflowoperatingmodeType
        {
        }
    }
    
    [JsonProperty("Generator:Photovoltaic")]
    [Description(@"Describes an array of photovoltaic (PV) modules. A series of different PV arrays can be connected to a single electric load center (and inverter) by listing them all in an ElectricLoadCenter:Generator object. PV performance is taken from the referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The array surface participates normally in all shading calculations.")]
    public class Generator_Photovoltaic
    {
        
        private void PhotovoltaicPerformance:EquivalentOne-Diode;
        
        private void PhotovoltaicPerformance:Sandia;
        
        private void PhotovoltaicPerformance:Simple;
        
        private void Decoupled;
        
        private void DecoupledUllebergDynamic;
        
        private void IntegratedExteriorVentedCavity;
        
        private void IntegratedSurfaceOutsideFace;
        
        private void IntegratedTranspiredCollector;
        
        private void PhotovoltaicThermalSolarCollector;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("photovoltaic_performance_object_type")]
public PhotovoltaicperformanceobjecttypeType photovoltaic_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("module_performance_name")]
public string module_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_transfer_integration_mode")]
public HeattransferintegrationmodeType heat_transfer_integration_mode
{
    get
    {
    }
    set
    {
    }
}
 = (HeattransferintegrationmodeType)Decoupled;

[JsonProperty("number_of_series_strings_in_parallel")]
public float number_of_series_strings_in_parallel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_modules_in_series")]
public float number_of_modules_in_series
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        public enum PhotovoltaicperformanceobjecttypeType
        {
        }
        
        public enum HeattransferintegrationmodeType
        {
        }
    }
    
    [JsonProperty("PhotovoltaicPerformance:Simple")]
    [Description(@"Describes a simple model of photovoltaics that may be useful for early phase design analysis. In this model the user has direct access to the efficiency with which surfaces convert incident solar radiation to electricity and need not specify arrays of specific modules.")]
    public class PhotovoltaicPerformance_Simple
    {
        
        private void Fixed;
        
        private void Scheduled;
        

[JsonProperty("fraction_of_surface_area_with_active_solar_cells")]
public float fraction_of_surface_area_with_active_solar_cells
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conversion_efficiency_input_mode")]
public ConversionefficiencyinputmodeType conversion_efficiency_input_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("value_for_cell_efficiency_if_fixed")]
public float value_for_cell_efficiency_if_fixed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_schedule_name")]
public string efficiency_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ConversionefficiencyinputmodeType
        {
        }
    }
    
    [JsonProperty("PhotovoltaicPerformance:EquivalentOne-Diode")]
    [Description("Describes the performance characteristics of Photovoltaic (PV) modules to be mode" +
        "led using an equivalent one-diode circuit. This model is also known as the 4- or" +
        " 5-parameter TRNSYS model for photovoltaics.")]
    public class PhotovoltaicPerformance_EquivalentOneDiode
    {
        
        private void AmorphousSilicon;
        
        private void CrystallineSilicon;
        

[JsonProperty("cell_type")]
public CelltypeType cell_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cells_in_series")]
public float number_of_cells_in_series
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)36;

[JsonProperty("active_area")]
public float active_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.89;

[JsonProperty("transmittance_absorptance_product")]
public float transmittance_absorptance_product
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.95;

[JsonProperty("semiconductor_bandgap")]
public float semiconductor_bandgap
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.12;

[JsonProperty("shunt_resistance")]
public float shunt_resistance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000000;

[JsonProperty("short_circuit_current")]
public float short_circuit_current
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.5;

[JsonProperty("open_circuit_voltage")]
public float open_circuit_voltage
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21.6;

[JsonProperty("reference_temperature")]
public float reference_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25;

[JsonProperty("reference_insolation")]
public float reference_insolation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("module_current_at_maximum_power")]
public float module_current_at_maximum_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5.9;

[JsonProperty("module_voltage_at_maximum_power")]
public float module_voltage_at_maximum_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)17;

[JsonProperty("temperature_coefficient_of_short_circuit_current")]
public float temperature_coefficient_of_short_circuit_current
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02;

[JsonProperty("temperature_coefficient_of_open_circuit_voltage")]
public float temperature_coefficient_of_open_circuit_voltage
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-0.079;

[JsonProperty("nominal_operating_cell_temperature_test_ambient_temperature")]
public float nominal_operating_cell_temperature_test_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("nominal_operating_cell_temperature_test_cell_temperature")]
public float nominal_operating_cell_temperature_test_cell_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;

[JsonProperty("nominal_operating_cell_temperature_test_insolation")]
public float nominal_operating_cell_temperature_test_insolation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)800;

[JsonProperty("module_heat_loss_coefficient")]
public float module_heat_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("total_heat_capacity")]
public float total_heat_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50000;
        
        public enum CelltypeType
        {
        }
    }
    
    [JsonProperty("PhotovoltaicPerformance:Sandia")]
    [Description("Describes performance input data needed for specific makes and models of producti" +
        "on PV panels using the empirical coefficients assembled by Sandia National Labor" +
        "atory.")]
    public class PhotovoltaicPerformance_Sandia
    {
        

[JsonProperty("active_area")]
public float active_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_cells_in_series")]
public float number_of_cells_in_series
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_cells_in_parallel")]
public float number_of_cells_in_parallel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("short_circuit_current")]
public float short_circuit_current
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("open_circuit_voltage")]
public float open_circuit_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("current_at_maximum_power_point")]
public float current_at_maximum_power_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("voltage_at_maximum_power_point")]
public float voltage_at_maximum_power_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_aisc")]
public float sandia_database_parameter_aisc
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_aimp")]
public float sandia_database_parameter_aimp
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c0")]
public float sandia_database_parameter_c0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c1")]
public float sandia_database_parameter_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_bvoc0")]
public float sandia_database_parameter_bvoc0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_mbvoc")]
public float sandia_database_parameter_mbvoc
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_bvmp0")]
public float sandia_database_parameter_bvmp0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_mbvmp")]
public float sandia_database_parameter_mbvmp
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diode_factor")]
public float diode_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c2")]
public float sandia_database_parameter_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c3")]
public float sandia_database_parameter_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a0")]
public float sandia_database_parameter_a0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a1")]
public float sandia_database_parameter_a1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a2")]
public float sandia_database_parameter_a2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a3")]
public float sandia_database_parameter_a3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a4")]
public float sandia_database_parameter_a4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b0")]
public float sandia_database_parameter_b0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b1")]
public float sandia_database_parameter_b1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b2")]
public float sandia_database_parameter_b2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b3")]
public float sandia_database_parameter_b3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b4")]
public float sandia_database_parameter_b4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b5")]
public float sandia_database_parameter_b5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_delta_tc_")]
public float sandia_database_parameter_delta_tc_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_fd")]
public float sandia_database_parameter_fd
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_a")]
public float sandia_database_parameter_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_b")]
public float sandia_database_parameter_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c4")]
public float sandia_database_parameter_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c5")]
public float sandia_database_parameter_c5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_ix0")]
public float sandia_database_parameter_ix0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_ixx0")]
public float sandia_database_parameter_ixx0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c6")]
public float sandia_database_parameter_c6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sandia_database_parameter_c7")]
public float sandia_database_parameter_c7
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Generator:PVWatts")]
    [Description(@"Describes a simple set of inputs for an array of photovoltaic (PV) modules as described in the PVWatts software. A series of different PVWatts arrays can be connected to a single electric load center (preferably through an ElectricLoadCenter:Inverter:PVWatts). Array tilt and azimuth can be either specified on this object or taken from a referenced building surface or shading surface. If a surface is specified, the array participates normally in all shading calculations.")]
    public class Generator_PVWatts
    {
        
        private void 5;
        
        private void Premium;
        
        private void Standard;
        
        private void ThinFilm;
        
        private void FixedOpenRack;
        
        private void FixedRoofMounted;
        
        private void OneAxis;
        
        private void OneAxisBacktracking;
        
        private void TwoAxis;
        
        private void Surface;
        
        private void TiltAzimuth;
        

[JsonProperty("pvwatts_version")]
public PvwattsversionType pvwatts_version
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dc_system_capacity")]
public float dc_system_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("module_type")]
public ModuletypeType module_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("array_type")]
public ArraytypeType array_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_losses")]
public float system_losses
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.14;

[JsonProperty("array_geometry_type")]
public ArraygeometrytypeType array_geometry_type
{
    get
    {
    }
    set
    {
    }
}
 = (ArraygeometrytypeType)TiltAzimuth;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ground_coverage_ratio")]
public float ground_coverage_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;
        
        public enum PvwattsversionType
        {
        }
        
        public enum ModuletypeType
        {
        }
        
        public enum ArraytypeType
        {
        }
        
        [Description("TiltAzimuth - The tilt and azimuth angles are specified in the next two fields. A" +
            "n unshaded array is assumed. Surface - The array geometry (tilt and azimuth) as " +
            "well as shading is determined from surface referenced.")]
        public enum ArraygeometrytypeType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Inverter:PVWatts")]
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains Generator:PVWatts objects. It im" +
        "plements the PVWatts inverter performance curves.")]
    public class ElectricLoadCenter_Inverter_PVWatts
    {
        

[JsonProperty("dc_to_ac_size_ratio")]
public float dc_to_ac_size_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("inverter_efficiency")]
public float inverter_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.96;
    }
    
    [JsonProperty("Generator:FuelCell")]
    [Description("This generator model is the FC model from IEA Annex 42")]
    public class Generator_FuelCell
    {
        

[JsonProperty("power_module_name")]
public string power_module_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_supply_name")]
public string air_supply_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_supply_name")]
public string fuel_supply_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_name")]
public string water_supply_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("auxiliary_heater_name")]
public string auxiliary_heater_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_name")]
public string heat_exchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_storage_name")]
public string electrical_storage_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inverter_name")]
public string inverter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cooler_name")]
public string stack_cooler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Generator:FuelCell:PowerModule")]
    [Description(@"Describe the core power module subsystem of a fuel cell power generator. This includes the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside. If the model has multiple FC generators that are of the exact same type, then only one of these objects is needed and all the Generator:FuelCell objects can reference it.")]
    public class Generator_FuelCell_PowerModule
    {
        
        private void Annex42;
        
        private void Normalized;
        
        private void ConstantRate;
        
        private void QuadraticFunctionOfFuelRate;
        
        private void UAForProcessGasTemperature;
        

[JsonProperty("efficiency_curve_mode")]
public EfficiencycurvemodeType efficiency_curve_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_curve_name")]
public string efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_efficiency")]
public float nominal_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_electrical_power")]
public float nominal_electrical_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_stops_at_start_of_simulation")]
public float number_of_stops_at_start_of_simulation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cycling_performance_degradation_coefficient")]
public float cycling_performance_degradation_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_run_hours_at_beginning_of_simulation")]
public float number_of_run_hours_at_beginning_of_simulation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("accumulated_run_time_degradation_coefficient")]
public float accumulated_run_time_degradation_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("run_time_degradation_initiation_time_threshold")]
public float run_time_degradation_initiation_time_threshold
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_up_transient_limit")]
public float power_up_transient_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_down_transient_limit")]
public float power_down_transient_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_up_time")]
public float start_up_time
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_up_fuel")]
public float start_up_fuel
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_up_electricity_consumption")]
public float start_up_electricity_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("start_up_electricity_produced")]
public float start_up_electricity_produced
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shut_down_time")]
public float shut_down_time
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shut_down_fuel")]
public float shut_down_fuel
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shut_down_electricity_consumption")]
public float shut_down_electricity_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_electricity_constant_term")]
public float ancillary_electricity_constant_term
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_electricity_linear_term")]
public float ancillary_electricity_linear_term
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_calculation_mode")]
public SkinlosscalculationmodeType skin_loss_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_skin_loss_rate")]
public float constant_skin_loss_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_u_factor_times_area_term")]
public float skin_loss_u_factor_times_area_term
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_quadratic_curve_name")]
public string skin_loss_quadratic_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dilution_air_flow_rate")]
public float dilution_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_heat_loss_to_dilution_air")]
public float stack_heat_loss_to_dilution_air
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dilution_inlet_air_node_name")]
public string dilution_inlet_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dilution_outlet_air_node_name")]
public string dilution_outlet_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_operating_point")]
public float minimum_operating_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_operating_point")]
public float maximum_operating_point
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum EfficiencycurvemodeType
        {
        }
        
        public enum SkinlosscalculationmodeType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:AirSupply")]
    [Description("Used to define details of the air supply subsystem for a fuel cell power generato" +
        "r.")]
    public class Generator_FuelCell_AirSupply
    {
        
        private void AirRatiobyStoics;
        
        private void QuadraticFunctionofElectricPower;
        
        private void QuadraticFunctionofFuelRate;
        
        private void NoRecovery;
        
        private void RecoverAuxiliaryBurner;
        
        private void RecoverBurnerInverterStorage;
        
        private void RecoverElectricalStorage;
        
        private void RecoverInverter;
        
        private void RecoverInverterandStorage;
        
        private void AmbientAir;
        
        private void UserDefinedConstituents;
        

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blower_power_curve_name")]
public string blower_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blower_heat_loss_factor")]
public float blower_heat_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_supply_rate_calculation_mode")]
public AirsupplyratecalculationmodeType air_supply_rate_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stoichiometric_ratio")]
public float stoichiometric_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_rate_function_of_electric_power_curve_name")]
public string air_rate_function_of_electric_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_rate_air_temperature_coefficient")]
public float air_rate_air_temperature_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_rate_function_of_fuel_rate_curve_name")]
public string air_rate_function_of_fuel_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_intake_heat_recovery_mode")]
public AirintakeheatrecoverymodeType air_intake_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_supply_constituent_mode")]
public AirsupplyconstituentmodeType air_supply_constituent_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_userdefined_constituents")]
public float number_of_userdefined_constituents
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_fractions")]
public string constituent_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AirsupplyratecalculationmodeType
        {
        }
        
        public enum AirintakeheatrecoverymodeType
        {
        }
        
        public enum AirsupplyconstituentmodeType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:WaterSupply")]
    [Description("Used to provide details of the water supply subsystem for a fuel cell power gener" +
        "ator. This water is used for steam reforming of the fuel and is not the same as " +
        "the water used for thermal heat recovery.")]
    public class Generator_FuelCell_WaterSupply
    {
        
        private void MainsWaterTemperature;
        
        private void TemperatureFromAirNode;
        
        private void TemperatureFromSchedule;
        
        private void TemperatureFromWaterNode;
        

[JsonProperty("reformer_water_flow_rate_function_of_fuel_rate_curve_name")]
public string reformer_water_flow_rate_function_of_fuel_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reformer_water_pump_power_function_of_fuel_rate_curve_name")]
public string reformer_water_pump_power_function_of_fuel_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_heat_loss_factor")]
public float pump_heat_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_temperature_modeling_mode")]
public WatertemperaturemodelingmodeType water_temperature_modeling_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_temperature_reference_node_name")]
public string water_temperature_reference_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_temperature_schedule_name")]
public string water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum WatertemperaturemodelingmodeType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:AuxiliaryHeater")]
    [Description(@"Intended for modeling an auxiliary heater for a fuel cell power generator, however this portion of the model is not yet available. The program still requires one of these objects be included even though the data are not yet used (so that internal data structures can be allocated).")]
    public class Generator_FuelCell_AuxiliaryHeater
    {
        
        private void AirInletForFuelCell;
        
        private void SurroundingZone;
        
        private void Watts;
        
        private void kmol/s;
        

[JsonProperty("excess_air_ratio")]
public float excess_air_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_power_constant_term")]
public float ancillary_power_constant_term
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_power_linear_term")]
public float ancillary_power_linear_term
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_u_factor_times_area_value")]
public float skin_loss_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_destination")]
public SkinlossdestinationType skin_loss_destination
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name_to_receive_skin_losses")]
public string zone_name_to_receive_skin_losses
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_units")]
public HeatingcapacityunitsType heating_capacity_units
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_capacity_in_watts")]
public float maximum_heating_capacity_in_watts
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_heating_capacity_in_watts")]
public float minimum_heating_capacity_in_watts
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_capacity_in_kmol_per_second")]
public float maximum_heating_capacity_in_kmol_per_second
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_heating_capacity_in_kmol_per_second")]
public float minimum_heating_capacity_in_kmol_per_second
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SkinlossdestinationType
        {
        }
        
        public enum HeatingcapacityunitsType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:ExhaustGasToWaterHeatExchanger")]
    [Description("Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator" +
        " used to recovery thermal energy")]
    public class Generator_FuelCell_ExhaustGasToWaterHeatExchanger
    {
        
        private void Condensing;
        
        private void EmpiricalUAeff;
        
        private void FixedEffectiveness;
        
        private void FundementalUAeff;
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string heat_recovery_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string heat_recovery_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_maximum_flow_rate")]
public float heat_recovery_water_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_outlet_air_node_name")]
public string exhaust_outlet_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_calculation_method")]
public HeatexchangercalculationmethodType heat_exchanger_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_1_heat_exchanger_effectiveness")]
public float method_1_heat_exchanger_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_2_parameter_hxs0")]
public float method_2_parameter_hxs0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_2_parameter_hxs1")]
public float method_2_parameter_hxs1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_2_parameter_hxs2")]
public float method_2_parameter_hxs2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_2_parameter_hxs3")]
public float method_2_parameter_hxs3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_2_parameter_hxs4")]
public float method_2_parameter_hxs4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_h0gas_coefficient")]
public float method_3_h0gas_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_ndotgasref_coefficient")]
public float method_3_ndotgasref_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_n_coefficient")]
public float method_3_n_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_gas_area")]
public float method_3_gas_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_h0_water_coefficient")]
public float method_3_h0_water_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_n_dot_water_ref_coefficient")]
public float method_3_n_dot_water_ref_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_m_coefficient")]
public float method_3_m_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_water_area")]
public float method_3_water_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_3_f_adjustment_factor")]
public float method_3_f_adjustment_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_4_hxl1_coefficient")]
public float method_4_hxl1_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_4_hxl2_coefficient")]
public float method_4_hxl2_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_4_condensation_threshold")]
public float method_4_condensation_threshold
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatexchangercalculationmethodType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:ElectricalStorage")]
    [Description("Used to describe the electrical storage subsystem for a fuel cell power generator" +
        ". The electrical storage model is a very simple \"constrained bucket\" model. Note" +
        " that this electrical storage is embedded within the FC device.")]
    public class Generator_FuelCell_ElectricalStorage
    {
        
        private void SimpleEfficiencyWithConstraints;
        

[JsonProperty("choice_of_model")]
public ChoiceofmodelType choice_of_model
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_charging_energetic_efficiency")]
public float nominal_charging_energetic_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_discharging_energetic_efficiency")]
public float nominal_discharging_energetic_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_maximum_capacity")]
public float simple_maximum_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_maximum_power_draw")]
public float simple_maximum_power_draw
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_maximum_power_store")]
public float simple_maximum_power_store
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_charge_state")]
public float initial_charge_state
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ChoiceofmodelType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:Inverter")]
    [Description("Used to describe the power condition unit subsystem of a fuel cell power generato" +
        "r. This object models an inverter system contained within a fuel cell system tha" +
        "t converts from direct current (DC) to alternating current (AC).")]
    public class Generator_FuelCell_Inverter
    {
        
        private void Constant;
        
        private void Quadratic;
        

[JsonProperty("inverter_efficiency_calculation_mode")]
public InverterefficiencycalculationmodeType inverter_efficiency_calculation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inverter_efficiency")]
public float inverter_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_function_of_dc_power_curve_name")]
public string efficiency_function_of_dc_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum InverterefficiencycalculationmodeType
        {
        }
    }
    
    [JsonProperty("Generator:FuelCell:StackCooler")]
    [Description("This object is optional and is used to define details needed to model the stack c" +
        "ooler on PEMFC.")]
    public class Generator_FuelCell_StackCooler
    {
        

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string heat_recovery_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string heat_recovery_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_stack_temperature")]
public float nominal_stack_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actual_stack_temperature")]
public float actual_stack_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_r0")]
public float coefficient_r0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_r1")]
public float coefficient_r1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_r2")]
public float coefficient_r2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_r3")]
public float coefficient_r3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_coolant_flow_rate")]
public float stack_coolant_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cooler_u_factor_times_area_value")]
public float stack_cooler_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fs_cogen_adjustment_factor")]
public float fs_cogen_adjustment_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cogeneration_exchanger_area")]
public float stack_cogeneration_exchanger_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cogeneration_exchanger_nominal_flow_rate")]
public float stack_cogeneration_exchanger_nominal_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient")]
public float stack_cogeneration_exchanger_nominal_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent")]
public float stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cooler_pump_power")]
public float stack_cooler_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_cooler_pump_heat_loss_fraction")]
public float stack_cooler_pump_heat_loss_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_air_cooler_fan_coefficient_f0")]
public float stack_air_cooler_fan_coefficient_f0
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_air_cooler_fan_coefficient_f1")]
public float stack_air_cooler_fan_coefficient_f1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_air_cooler_fan_coefficient_f2")]
public float stack_air_cooler_fan_coefficient_f2
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Generator:MicroCHP")]
    [Description(@"Small-scale combined heat and power (micro CHP) electric generator using the model developed by IEA/ECBCS Annex 42 see www.cogen-sim.net. The model was developed for both internal combustion and Stirling cycle engines, but might be used for other types of residential CHP devices.")]
    public class Generator_MicroCHP
    {
        

[JsonProperty("performance_parameters_name")]
public string performance_parameters_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_inlet_node_name")]
public string cooling_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_outlet_node_name")]
public string cooling_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_fuel_supply_name")]
public string generator_fuel_supply_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Generator:MicroCHP:NonNormalizedParameters")]
    [Description("This object is referenced by a Generator:MicroCHP object and provides the non-nor" +
        "malized parameters for the MicroCHP generator model.")]
    public class Generator_MicroCHP_NonNormalizedParameters
    {
        
        private void InternalControl;
        
        private void PlantControl;
        
        private void NominalEngineTemperature;
        
        private void TimeDelay;
        
        private void MandatoryCoolDown;
        
        private void OptionalCoolDown;
        

[JsonProperty("maximum_electric_power")]
public float maximum_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_electric_power")]
public float minimum_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_cooling_water_flow_rate")]
public float minimum_cooling_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cooling_water_temperature")]
public float maximum_cooling_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_efficiency_curve_name")]
public string electrical_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_efficiency_curve_name")]
public string thermal_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_flow_rate_mode")]
public CoolingwaterflowratemodeType cooling_water_flow_rate_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_flow_rate_curve_name")]
public string cooling_water_flow_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_flow_rate_curve_name")]
public string air_flow_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_net_electrical_power_rate_of_change")]
public float maximum_net_electrical_power_rate_of_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_fuel_flow_rate_of_change")]
public float maximum_fuel_flow_rate_of_change
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_u_factor_times_area_value")]
public float heat_exchanger_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_u_factor_times_area_value")]
public float skin_loss_u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("aggregated_thermal_mass_of_energy_conversion_portion_of_generator")]
public float aggregated_thermal_mass_of_energy_conversion_portion_of_generator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("aggregated_thermal_mass_of_heat_recovery_portion_of_generator")]
public float aggregated_thermal_mass_of_heat_recovery_portion_of_generator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("standby_power")]
public float standby_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("warm_up_mode")]
public WarmupmodeType warm_up_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("warm_up_fuel_flow_rate_coefficient")]
public float warm_up_fuel_flow_rate_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_engine_operating_temperature")]
public float nominal_engine_operating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("warm_up_power_coefficient")]
public float warm_up_power_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("warm_up_fuel_flow_rate_limit_ratio")]
public float warm_up_fuel_flow_rate_limit_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("warm_up_delay_time")]
public float warm_up_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cool_down_power")]
public float cool_down_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cool_down_delay_time")]
public float cool_down_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("restart_mode")]
public RestartmodeType restart_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CoolingwaterflowratemodeType
        {
        }
        
        [Description("Stirling engines use Nominal Engine Temperature Internal combustion engines use T" +
            "ime Delay")]
        public enum WarmupmodeType
        {
        }
        
        public enum RestartmodeType
        {
        }
    }
    
    [JsonProperty("Generator:FuelSupply")]
    [Description("Used only with Generator:FuelCell and Generator:MicroCHP")]
    public class Generator_FuelSupply
    {
        
        private void Scheduled;
        
        private void TemperatureFromAirNode;
        
        private void GaseousConstituents;
        
        private void LiquidGeneric;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Butane;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Pentane;
        
        private void Propane;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        
        private void Argon;
        
        private void Butane;
        
        private void CarbonDioxide;
        
        private void Ethane;
        
        private void Ethanol;
        
        private void Hexane;
        
        private void Hydrogen;
        
        private void Methane;
        
        private void Methanol;
        
        private void Nitrogen;
        
        private void Oxygen;
        
        private void Pentane;
        
        private void Propane;
        
        private void Water;
        

[JsonProperty("fuel_temperature_modeling_mode")]
public FueltemperaturemodelingmodeType fuel_temperature_modeling_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_temperature_reference_node_name")]
public string fuel_temperature_reference_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_temperature_schedule_name")]
public string fuel_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_power_multiplier_function_of_fuel_rate_curve_name")]
public string compressor_power_multiplier_function_of_fuel_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_heat_loss_factor")]
public float compressor_heat_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_generic_fuel_lower_heating_value")]
public float liquid_generic_fuel_lower_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_generic_fuel_higher_heating_value")]
public float liquid_generic_fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_generic_fuel_molecular_weight")]
public float liquid_generic_fuel_molecular_weight
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_generic_fuel_co2_emission_factor")]
public float liquid_generic_fuel_co2_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_constituents_in_gaseous_constituent_fuel_supply")]
public float number_of_constituents_in_gaseous_constituent_fuel_supply
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_1_name")]
public ConstituentnameType constituent_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_1_molar_fraction")]
public float constituent_1_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_2_name")]
public ConstituentnameType constituent_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_2_molar_fraction")]
public float constituent_2_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_3_name")]
public ConstituentnameType constituent_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_3_molar_fraction")]
public float constituent_3_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_4_name")]
public ConstituentnameType constituent_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_4_molar_fraction")]
public float constituent_4_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_5_name")]
public ConstituentnameType constituent_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_5_molar_fraction")]
public float constituent_5_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_6_name")]
public ConstituentnameType constituent_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_6_molar_fraction")]
public float constituent_6_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_7_name")]
public ConstituentnameType constituent_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_7_molar_fraction")]
public float constituent_7_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_8_name")]
public ConstituentnameType constituent_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_8_molar_fraction")]
public float constituent_8_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_9_name")]
public ConstituentnameType constituent_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_9_molar_fraction")]
public float constituent_9_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_10_name")]
public ConstituentnameType constituent_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_10_molar_fraction")]
public float constituent_10_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_11_name")]
public ConstituentnameType constituent_11_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_11_molar_fraction")]
public float constituent_11_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_12_name")]
public ConstituentnameType constituent_12_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constituent_12_molar_fraction")]
public float constituent_12_molar_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FueltemperaturemodelingmodeType
        {
        }
        
        public enum FueltypeType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
        
        public enum ConstituentnameType
        {
        }
    }
    
    [JsonProperty("Generator:WindTurbine")]
    [Description("Wind turbine generator.")]
    public class Generator_WindTurbine
    {
        
        private void HorizontalAxisWindTurbine;
        
        private void VerticalAxisWindTurbine;
        
        private void FixedSpeedFixedPitch;
        
        private void FixedSpeedVariablePitch;
        
        private void VariableSpeedFixedPitch;
        
        private void VariableSpeedVariablePitch;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotor_type")]
public RotortypeType rotor_type
{
    get
    {
    }
    set
    {
    }
}
 = (RotortypeType)HorizontalAxisWindTurbine;

[JsonProperty("power_control")]
public PowercontrolType power_control
{
    get
    {
    }
    set
    {
    }
}
 = (PowercontrolType)VariableSpeedVariablePitch;

[JsonProperty("rated_rotor_speed")]
public float rated_rotor_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotor_diameter")]
public float rotor_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("overall_height")]
public float overall_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_blades")]
public float number_of_blades
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("rated_power")]
public float rated_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_wind_speed")]
public float rated_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cut_in_wind_speed")]
public float cut_in_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cut_out_wind_speed")]
public float cut_out_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_system_efficiency")]
public float fraction_system_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.835;

[JsonProperty("maximum_tip_speed_ratio")]
public float maximum_tip_speed_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("maximum_power_coefficient")]
public float maximum_power_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("annual_local_average_wind_speed")]
public float annual_local_average_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_for_local_average_wind_speed")]
public float height_for_local_average_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("blade_chord_area")]
public float blade_chord_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blade_drag_coefficient")]
public float blade_drag_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("blade_lift_coefficient")]
public float blade_lift_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("power_coefficient_c1")]
public float power_coefficient_c1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5176;

[JsonProperty("power_coefficient_c2")]
public float power_coefficient_c2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)116;

[JsonProperty("power_coefficient_c3")]
public float power_coefficient_c3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("power_coefficient_c4")]
public float power_coefficient_c4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("power_coefficient_c5")]
public float power_coefficient_c5
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("power_coefficient_c6")]
public float power_coefficient_c6
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;
        
        [Description("allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine")]
        public enum RotortypeType
        {
        }
        
        [Description("Constant power output is obtained in the last three control types when the wind s" +
            "peed exceeds the rated wind speed. allowed values are: Fixed Speed Fixed Pitch, " +
            "Fixed Speed Variable Pitch, Variable Speed Fixed Pitch or Variable Speed Variabl" +
            "e Pitch")]
        public enum PowercontrolType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Generators")]
    [Description("List of electric power generators to include in the simulation including the name" +
        " and type of each generators along with availability schedule, rated power outpu" +
        "t, and thermal-to-electrical power ratio.")]
    public class ElectricLoadCenter_Generators
    {
        

[JsonProperty("generator_outputs")]
public string generator_outputs
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ElectricLoadCenter:Inverter:Simple")]
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for the simplest inverter model and uses a fixed efficiency.")]
    public class ElectricLoadCenter_Inverter_Simple
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inverter_efficiency")]
public float inverter_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ElectricLoadCenter:Inverter:FunctionOfPower")]
    [Description("Electric power inverter to convert from direct current (DC) to alternating curren" +
        "t (AC) in an electric load center that contains photovoltaic modules. This input" +
        " object is for an inverter model where efficiency is a function of normalized po" +
        "wer.")]
    public class ElectricLoadCenter_Inverter_FunctionOfPower
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_function_of_power_curve_name")]
public string efficiency_function_of_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_maximum_continuous_input_power")]
public float rated_maximum_continuous_input_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_efficiency")]
public float minimum_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_efficiency")]
public float maximum_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_power_output")]
public float minimum_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_power_output")]
public float maximum_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_power_consumed_in_standby")]
public float ancillary_power_consumed_in_standby
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ElectricLoadCenter:Inverter:LookUpTable")]
    [Description("California Energy Commission tests and publishes data on inverters This inverter " +
        "model interpolates using CEC test data Input data are at http://www.gosolarcalif" +
        "ornia.org/equipment/inverter_tests/summaries")]
    public class ElectricLoadCenter_Inverter_LookUpTable
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_maximum_continuous_output_power")]
public float rated_maximum_continuous_output_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_tare_loss_power")]
public float night_tare_loss_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_voltage_input")]
public float nominal_voltage_input
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_10_power_and_nominal_voltage")]
public float efficiency_at_10_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_20_power_and_nominal_voltage")]
public float efficiency_at_20_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_30_power_and_nominal_voltage")]
public float efficiency_at_30_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_50_power_and_nominal_voltage")]
public float efficiency_at_50_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_75_power_and_nominal_voltage")]
public float efficiency_at_75_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_at_100_power_and_nominal_voltage")]
public float efficiency_at_100_power_and_nominal_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ElectricLoadCenter:Storage:Simple")]
    [Description(@"Used to model storage of electricity in an electric load center. This is a simple model that does not attempt to represent any of the characteristics of a real storage device such as a battery. The type of power, AC or DC, depends on the configuration chosen as the Electrical Buss Type in the ElectricLoadCenter:Distribution object.")]
    public class ElectricLoadCenter_Storage_Simple
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction_for_zone_heat_gains")]
public float radiative_fraction_for_zone_heat_gains
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_energetic_efficiency_for_charging")]
public float nominal_energetic_efficiency_for_charging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_discharging_energetic_efficiency")]
public float nominal_discharging_energetic_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_storage_capacity")]
public float maximum_storage_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_power_for_discharging")]
public float maximum_power_for_discharging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_power_for_charging")]
public float maximum_power_for_charging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_state_of_charge")]
public float initial_state_of_charge
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ElectricLoadCenter:Storage:Battery")]
    [Description(@"Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    public class ElectricLoadCenter_Storage_Battery
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("number_of_battery_modules_in_parallel")]
public float number_of_battery_modules_in_parallel
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_battery_modules_in_series")]
public float number_of_battery_modules_in_series
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("maximum_module_capacity")]
public float maximum_module_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_fractional_state_of_charge")]
public float initial_fractional_state_of_charge
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fraction_of_available_charge_capacity")]
public float fraction_of_available_charge_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("change_rate_from_bound_charge_to_available_charge")]
public float change_rate_from_bound_charge_to_available_charge
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fully_charged_module_open_circuit_voltage")]
public float fully_charged_module_open_circuit_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fully_discharged_module_open_circuit_voltage")]
public float fully_discharged_module_open_circuit_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("voltage_change_curve_name_for_charging")]
public string voltage_change_curve_name_for_charging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("voltage_change_curve_name_for_discharging")]
public string voltage_change_curve_name_for_discharging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("module_internal_electrical_resistance")]
public float module_internal_electrical_resistance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_module_discharging_current")]
public float maximum_module_discharging_current
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("module_cut_off_voltage")]
public float module_cut_off_voltage
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("module_charge_rate_limit")]
public float module_charge_rate_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("battery_life_calculation")]
public BatterylifecalculationType battery_life_calculation
{
    get
    {
    }
    set
    {
    }
}
 = (BatterylifecalculationType)No;

[JsonProperty("number_of_cycle_bins")]
public float number_of_cycle_bins
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("battery_life_curve_name")]
public string battery_life_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BatterylifecalculationType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Storage:LiIonNMCBattery")]
    [Description(@"Uses Lithium Ion NMC model to simulate rechargeable battery banks in an electrical load center. The battery bank is a collection of one or more individual battery modules. Given the surplus or deficit power from the electrical system and the state of charge from the previous time step, this object can model the voltage, current, and energy losses with charging and discharging during each time step. The cumulative battery damage can be also modeled and reported at the end of each simulation run.")]
    public class ElectricLoadCenter_Storage_LiIonNMCBattery
    {
        
        private void KandlerSmith;
        
        private void None;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("lifetime_model")]
public LifetimemodelType lifetime_model
{
    get
    {
    }
    set
    {
    }
}
 = (LifetimemodelType)KandlerSmith;

[JsonProperty("number_of_cells_in_series")]
public float number_of_cells_in_series
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_strings_in_parallel")]
public float number_of_strings_in_parallel
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_fractional_state_of_charge")]
public float initial_fractional_state_of_charge
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("dc_to_dc_charging_efficiency")]
public float dc_to_dc_charging_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.95;

[JsonProperty("battery_mass")]
public float battery_mass
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("battery_surface_area")]
public float battery_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("battery_specific_heat_capacity")]
public float battery_specific_heat_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1500;

[JsonProperty("heat_transfer_coefficient_between_battery_and_ambient")]
public float heat_transfer_coefficient_between_battery_and_ambient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5;

[JsonProperty("fully_charged_cell_voltage")]
public float fully_charged_cell_voltage
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4.2;

[JsonProperty("cell_voltage_at_end_of_exponential_zone")]
public float cell_voltage_at_end_of_exponential_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.53;

[JsonProperty("cell_voltage_at_end_of_nominal_zone")]
public float cell_voltage_at_end_of_nominal_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.342;

[JsonProperty("default_nominal_cell_voltage")]
public float default_nominal_cell_voltage
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.342;

[JsonProperty("fully_charged_cell_capacity")]
public float fully_charged_cell_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.2;

[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_exponential_zone")]
public float fraction_of_cell_capacity_removed_at_the_end_of_exponential_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8075;

[JsonProperty("fraction_of_cell_capacity_removed_at_the_end_of_nominal_zone")]
public float fraction_of_cell_capacity_removed_at_the_end_of_nominal_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.976875;

[JsonProperty("charge_rate_at_which_voltage_vs_capacity_curve_was_generated")]
public float charge_rate_at_which_voltage_vs_capacity_curve_was_generated
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("battery_cell_internal_electrical_resistance")]
public float battery_cell_internal_electrical_resistance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.09;
        
        public enum LifetimemodelType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Transformer")]
    [Description("a list of meters that can be reported are available after a run on the meter dict" +
        "ionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class ElectricLoadCenter_Transformer
    {
        
        private void LoadCenterPowerConditioning;
        
        private void PowerInFromGrid;
        
        private void PowerOutToGrid;
        
        private void Aluminum;
        
        private void Copper;
        
        private void NominalEfficiency;
        
        private void RatedLosses;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transformer_usage")]
public TransformerusageType transformer_usage
{
    get
    {
    }
    set
    {
    }
}
 = (TransformerusageType)PowerInFromGrid;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("rated_capacity")]
public float rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phase")]
public string phase
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)3;

[JsonProperty("conductor_material")]
public ConductormaterialType conductor_material
{
    get
    {
    }
    set
    {
    }
}
 = (ConductormaterialType)Aluminum;

[JsonProperty("full_load_temperature_rise")]
public float full_load_temperature_rise
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)150;

[JsonProperty("fraction_of_eddy_current_losses")]
public float fraction_of_eddy_current_losses
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("performance_input_method")]
public PerformanceinputmethodType performance_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (PerformanceinputmethodType)RatedLosses;

[JsonProperty("rated_no_load_loss")]
public float rated_no_load_loss
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_load_loss")]
public float rated_load_loss
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nameplate_efficiency")]
public float nameplate_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.98;

[JsonProperty("per_unit_load_for_nameplate_efficiency")]
public float per_unit_load_for_nameplate_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("reference_temperature_for_nameplate_efficiency")]
public float reference_temperature_for_nameplate_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("per_unit_load_for_maximum_efficiency")]
public float per_unit_load_for_maximum_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("consider_transformer_loss_for_utility_cost")]
public ConsidertransformerlossforutilitycostType consider_transformer_loss_for_utility_cost
{
    get
    {
    }
    set
    {
    }
}
 = (ConsidertransformerlossforutilitycostType)Yes;

[JsonProperty("meters")]
public string meters
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"A transformer can be used to transfer electric energy from utility grid to building (PowerInFromGrid)or from building on-site generation to the grid (PowerOutToGrid) or within a load center to match generation to the facility service main panel (LoadCenterPowerConditioning)")]
        public enum TransformerusageType
        {
        }
        
        [Description("Winding material used by the transformer.")]
        public enum ConductormaterialType
        {
        }
        
        [Description("User can define transformer performance by specifying load and no load losses at " +
            "rated conditions or nameplate efficiency and maximum efficiency")]
        public enum PerformanceinputmethodType
        {
        }
        
        [Description("Only required when the transformer is used for power in from the utility grid")]
        public enum ConsidertransformerlossforutilitycostType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Distribution")]
    [Description("Describes a subpanel a list of meters that can be reported are available after a " +
        "run on the meter dictionary file (.mdd) if the Output:VariableDictionary has bee" +
        "n requested.")]
    public class ElectricLoadCenter_Distribution
    {
        
        private void Baseload;
        
        private void DemandLimit;
        
        private void FollowThermal;
        
        private void FollowThermalLimitElectrical;
        
        private void TrackElectrical;
        
        private void TrackMeter;
        
        private void TrackSchedule;
        
        private void AlternatingCurrent;
        
        private void AlternatingCurrentWithStorage;
        
        private void DirectCurrentWithInverter;
        
        private void DirectCurrentWithInverterACStorage;
        
        private void DirectCurrentWithInverterDCStorage;
        
        private void FacilityDemandLeveling;
        
        private void TrackChargeDischargeSchedules;
        
        private void TrackFacilityElectricDemandStoreExcessOnSite;
        
        private void TrackMeterDemandStoreExcessOnSite;
        

[JsonProperty("generator_list_name")]
public string generator_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_operation_scheme_type")]
public GeneratoroperationschemetypeType generator_operation_scheme_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_demand_limit_scheme_purchased_electric_demand_limit")]
public float generator_demand_limit_scheme_purchased_electric_demand_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_track_schedule_name_scheme_schedule_name")]
public string generator_track_schedule_name_scheme_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_track_meter_scheme_meter_name")]
public string generator_track_meter_scheme_meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_buss_type")]
public ElectricalbusstypeType electrical_buss_type
{
    get
    {
    }
    set
    {
    }
}
 = (ElectricalbusstypeType)AlternatingCurrent;

[JsonProperty("inverter_name")]
public string inverter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electrical_storage_object_name")]
public string electrical_storage_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transformer_object_name")]
public string transformer_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_operation_scheme")]
public StorageoperationschemeType storage_operation_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (StorageoperationschemeType)TrackFacilityElectricDemandStoreExcessOnSite;

[JsonProperty("storage_control_track_meter_name")]
public string storage_control_track_meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_converter_object_name")]
public string storage_converter_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_storage_state_of_charge_fraction")]
public float maximum_storage_state_of_charge_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_storage_state_of_charge_fraction")]
public float minimum_storage_state_of_charge_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_storage_control_charge_power")]
public float design_storage_control_charge_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_charge_power_fraction_schedule_name")]
public string storage_charge_power_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_storage_control_discharge_power")]
public float design_storage_control_discharge_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_discharge_power_fraction_schedule_name")]
public string storage_discharge_power_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_control_utility_demand_target")]
public float storage_control_utility_demand_target
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_control_utility_demand_target_fraction_schedule_name")]
public string storage_control_utility_demand_target_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Determines how generators are to be controlled Required if Generator List is ente" +
            "red.")]
        public enum GeneratoroperationschemetypeType
        {
        }
        
        public enum ElectricalbusstypeType
        {
        }
        
        [Description("Select method to govern how storage charge and discharge is controlled TrackFacil" +
            "ityElectricDemandStoreExcessOnSite indicates that storage control will follow th" +
            "e facility power demand while accounting for any on-site generation. Only excess" +
            " on site generation  gets stored (legacy behavior). TrackMeterDemandStoreExcessO" +
            "nSite indicates that storage discharge control will follow an electric meter nam" +
            "ed in the field called Storage Control Track Meter Name. This scheme is similiar" +
            " to TrackFacilityElectricDemandStoreExcessOnSite except that instead of the main" +
            " facility electric meter, the control is based off of a user-selected meter. Tra" +
            "ckChargeDischargeSchedules indicates that control will follow the charging and d" +
            "ischarging power and schedules defined in the fields called Maximum Storage Char" +
            "ge Grid Supply Power, Storage Charge Grid Supply Power Fraction Schedule Name, D" +
            "esign Storage Discharge Grid Export Power, and Storage Discharge Grid Export Fra" +
            "ction Schedule Name. FacilityDemandLeveling indicates that storage control will " +
            "attempt to control the facility\'s power demand drawn from the utility service to" +
            " a prescribed level. The target utility demand is entered in the fields called S" +
            "torage Control Utility Demand Limit and Storage Control Utility Demand Limit Fra" +
            "ction Schedule Name This scheme first accounts for any on-site generation and du" +
            "ring times of high use will discharge storage to reduce facility grid demand to " +
            "meet the target level and during times of low use will charge storage from the g" +
            "rid to increase facility grid demand to meet the target level.")]
        public enum StorageoperationschemeType
        {
        }
    }
    
    [JsonProperty("ElectricLoadCenter:Storage:Converter")]
    [Description("This model is for converting AC to DC for grid-supplied charging of DC storage")]
    public class ElectricLoadCenter_Storage_Converter
    {
        
        private void FunctionOfPower;
        
        private void SimpleFixed;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_conversion_efficiency_method")]
public PowerconversionefficiencymethodType power_conversion_efficiency_method
{
    get
    {
    }
    set
    {
    }
}
 = (PowerconversionefficiencymethodType)SimpleFixed;

[JsonProperty("simple_fixed_efficiency")]
public float simple_fixed_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.95;

[JsonProperty("design_maximum_continuous_input_power")]
public float design_maximum_continuous_input_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_function_of_power_curve_name")]
public string efficiency_function_of_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_power_consumed_in_standby")]
public float ancillary_power_consumed_in_standby
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction")]
public float radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("SimpleFixed indicates power conversion losses are based on Simple Fixed Efficienc" +
            "y FunctionOfPower indicates power conversion losses are a function of normalized" +
            " power using a curve or table.")]
        public enum PowerconversionefficiencymethodType
        {
        }
    }
}
namespace EnergyPlus.EnergyManagementSystemEMS
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("EnergyManagementSystem:Sensor")]
    [Description("Declares EMS variable as a sensor a list of output variables and meters that can " +
        "be reported are available after a run on the report (.rdd) or meter dictionary f" +
        "ile (.mdd) if the Output:VariableDictionary has been requested.")]
    public class EnergyManagementSystem_Sensor
    {
        

[JsonProperty("output_variable_or_output_meter_index_key_name")]
public string output_variable_or_output_meter_index_key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("output_variable_or_output_meter_name")]
public string output_variable_or_output_meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:Actuator")]
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    public class EnergyManagementSystem_Actuator
    {
        

[JsonProperty("actuated_component_unique_name")]
public string actuated_component_unique_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_type")]
public string actuated_component_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_control_type")]
public string actuated_component_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:ProgramCallingManager")]
    [Description("Input EMS program. a program needs a name a description of when it should be call" +
        "ed and then lines of program code for EMS Runtime language")]
    public class EnergyManagementSystem_ProgramCallingManager
    {
        
        private void AfterComponentInputReadIn;
        
        private void AfterNewEnvironmentWarmUpIsComplete;
        
        private void AfterPredictorAfterHVACManagers;
        
        private void AfterPredictorBeforeHVACManagers;
        
        private void BeginNewEnvironment;
        
        private void BeginTimestepBeforePredictor;
        
        private void BeginZoneTimestepAfterInitHeatBalance;
        
        private void BeginZoneTimestepBeforeInitHeatBalance;
        
        private void BeginZoneTimestepBeforeSetCurrentWeather;
        
        private void EndOfSystemSizing;
        
        private void EndOfSystemTimestepAfterHVACReporting;
        
        private void EndOfSystemTimestepBeforeHVACReporting;
        
        private void EndOfZoneSizing;
        
        private void EndOfZoneTimestepAfterZoneReporting;
        
        private void EndOfZoneTimestepBeforeZoneReporting;
        
        private void InsideHVACSystemIterationLoop;
        
        private void UnitarySystemSizing;
        
        private void UserDefinedComponentModel;
        

[JsonProperty("energyplus_model_calling_point")]
public EnergyplusmodelcallingpointType energyplus_model_calling_point
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("programs")]
public string programs
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum EnergyplusmodelcallingpointType
        {
        }
    }
    
    [JsonProperty("EnergyManagementSystem:Program")]
    [Description("This input defines an Erl program Each field after the name is a line of EMS Runt" +
        "ime Language")]
    public class EnergyManagementSystem_Program
    {
        

[JsonProperty("lines")]
public string lines
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:Subroutine")]
    [Description("This input defines an Erl program subroutine Each field after the name is a line " +
        "of EMS Runtime Language")]
    public class EnergyManagementSystem_Subroutine
    {
        

[JsonProperty("lines")]
public string lines
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:GlobalVariable")]
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    public class EnergyManagementSystem_GlobalVariable
    {
        

[JsonProperty("variables")]
public string variables
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:OutputVariable")]
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    public class EnergyManagementSystem_OutputVariable
    {
        
        private void Averaged;
        
        private void Summed;
        
        private void SystemTimestep;
        
        private void ZoneTimestep;
        

[JsonProperty("ems_variable_name")]
public string ems_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_data_in_variable")]
public TypeofdatainvariableType type_of_data_in_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("update_frequency")]
public UpdatefrequencyType update_frequency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ems_program_or_subroutine_name")]
public string ems_program_or_subroutine_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("units")]
public string units
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TypeofdatainvariableType
        {
        }
        
        public enum UpdatefrequencyType
        {
        }
    }
    
    [JsonProperty("EnergyManagementSystem:MeteredOutputVariable")]
    [Description("This object sets up an EnergyPlus output variable from an Erl variable")]
    public class EnergyManagementSystem_MeteredOutputVariable
    {
        
        private void SystemTimestep;
        
        private void ZoneTimestep;
        
        private void Coal;
        
        private void CondensateWaterCollected;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void ElectricityProducedOnSite;
        
        private void EnergyTransfer;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void MainsWaterSupply;
        
        private void NaturalGas;
        
        private void OnSiteWaterProduced;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void RainWaterCollected;
        
        private void SolarAirHeating;
        
        private void SolarWaterHeating;
        
        private void Steam;
        
        private void WaterUse;
        
        private void WellWaterDrawn;
        
        private void Building;
        
        private void HVAC;
        
        private void Plant;
        
        private void System;
        
        private void Baseboard;
        
        private void Boilers;
        
        private void Chillers;
        
        private void Cooling;
        
        private void CoolingCoils;
        
        private void ExteriorEquipment;
        
        private void ExteriorLights;
        
        private void Fans;
        
        private void HeatRecovery;
        
        private void HeatRecoveryForCooling;
        
        private void HeatRecoveryForHeating;
        
        private void HeatRejection;
        
        private void Heating;
        
        private void HeatingCoils;
        
        private void Humidifier;
        
        private void InteriorEquipment;
        
        private void InteriorLights;
        
        private void OnSiteGeneration;
        
        private void Pumps;
        
        private void Refrigeration;
        
        private void WaterSystems;
        

[JsonProperty("ems_variable_name")]
public string ems_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("update_frequency")]
public UpdatefrequencyType update_frequency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ems_program_or_subroutine_name")]
public string ems_program_or_subroutine_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("resource_type")]
public ResourcetypeType resource_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("group_type")]
public GrouptypeType group_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_category")]
public EndusecategoryType end_use_category
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("units")]
public string units
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum UpdatefrequencyType
        {
        }
        
        [Description("choose the type of fuel, water, electricity, pollution or heat rate that should b" +
            "e metered.")]
        public enum ResourcetypeType
        {
        }
        
        [Description("choose a general classification, building (internal services), HVAC (air systems)" +
            ", or plant (hydronic systems), or system")]
        public enum GrouptypeType
        {
        }
        
        [Description("choose how the metered output should be classified for end-use category")]
        public enum EndusecategoryType
        {
        }
    }
    
    [JsonProperty("EnergyManagementSystem:TrendVariable")]
    [Description("This object sets up an EMS trend variable from an Erl variable A trend variable l" +
        "ogs values across timesteps")]
    public class EnergyManagementSystem_TrendVariable
    {
        

[JsonProperty("ems_variable_name")]
public string ems_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_timesteps_to_be_logged")]
public float number_of_timesteps_to_be_logged
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:InternalVariable")]
    [Description("Declares EMS variable as an internal data variable")]
    public class EnergyManagementSystem_InternalVariable
    {
        

[JsonProperty("internal_data_index_key_name")]
public string internal_data_index_key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("internal_data_type")]
public string internal_data_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:CurveOrTableIndexVariable")]
    [Description("Declares EMS variable that identifies a curve or table")]
    public class EnergyManagementSystem_CurveOrTableIndexVariable
    {
        

[JsonProperty("curve_or_table_object_name")]
public string curve_or_table_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EnergyManagementSystem:ConstructionIndexVariable")]
    [Description("Declares EMS variable that identifies a construction")]
    public class EnergyManagementSystem_ConstructionIndexVariable
    {
        

[JsonProperty("construction_object_name")]
public string construction_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.EvaporativeCoolers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("EvaporativeCooler:Direct:CelDekPad")]
    [Description("Direct evaporative cooler with rigid media evaporative pad and recirculating wate" +
        "r pump. This model has no controls other than its availability schedule.")]
    public class EvaporativeCooler_Direct_CelDekPad
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("direct_pad_area")]
public string direct_pad_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("direct_pad_depth")]
public string direct_pad_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("recirculating_water_pump_power_consumption")]
public float recirculating_water_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public string control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EvaporativeCooler:Indirect:CelDekPad")]
    [Description("Indirect evaporative cooler with rigid media evaporative pad, recirculating water" +
        " pump, and secondary air fan. This model has no controls other than its availabi" +
        "lity schedule.")]
    public class EvaporativeCooler_Indirect_CelDekPad
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("direct_pad_area")]
public string direct_pad_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("direct_pad_depth")]
public string direct_pad_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("recirculating_water_pump_power_consumption")]
public float recirculating_water_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_flow_rate")]
public float secondary_air_fan_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_total_efficiency")]
public float secondary_air_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_delta_pressure")]
public float secondary_air_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("indirect_heat_exchanger_effectiveness")]
public float indirect_heat_exchanger_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public string control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EvaporativeCooler:Indirect:WetCoil")]
    [Description("Indirect evaporative cooler with wetted coil, recirculating water pump, and secon" +
        "dary air fan. This model has no controls other than its availability schedule.")]
    public class EvaporativeCooler_Indirect_WetCoil
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_maximum_efficiency")]
public float coil_maximum_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_flow_ratio")]
public float coil_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recirculating_water_pump_power_consumption")]
public float recirculating_water_pump_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_flow_rate")]
public float secondary_air_fan_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_total_efficiency")]
public float secondary_air_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_fan_delta_pressure")]
public float secondary_air_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public string control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EvaporativeCooler:Indirect:ResearchSpecial")]
    [Description("Indirect evaporative cooler with user-specified effectiveness (can represent rigi" +
        "d pad or wetted coil), recirculating water pump, and secondary air fan. This mod" +
        "el is controlled to meet the primary air outlet temperature setpoint.")]
    public class EvaporativeCooler_Indirect_ResearchSpecial
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooler_wetbulb_design_effectiveness")]
public float cooler_wetbulb_design_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wetbulb_effectiveness_flow_ratio_modifier_curve_name")]
public string wetbulb_effectiveness_flow_ratio_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooler_drybulb_design_effectiveness")]
public float cooler_drybulb_design_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drybulb_effectiveness_flow_ratio_modifier_curve_name")]
public string drybulb_effectiveness_flow_ratio_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recirculating_water_pump_design_power")]
public string recirculating_water_pump_design_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("water_pump_power_sizing_factor")]
public float water_pump_power_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("water_pump_power_modifier_curve_name")]
public string water_pump_power_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_design_flow_rate")]
public string secondary_air_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("secondary_air_flow_scaling_factor")]
public float secondary_air_flow_scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("secondary_air_fan_design_power")]
public string secondary_air_fan_design_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("secondary_air_fan_sizing_specific_power")]
public float secondary_air_fan_sizing_specific_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)250;

[JsonProperty("secondary_air_fan_power_modifier_curve_name")]
public string secondary_air_fan_power_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_design_flow_rate")]
public string primary_air_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dewpoint_effectiveness_factor")]
public float dewpoint_effectiveness_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_outlet_node_name")]
public string secondary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relief_air_inlet_node_name")]
public string relief_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drift_loss_fraction")]
public float drift_loss_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_operation_minimum_limit_secondary_air_drybulb_temperature")]
public float evaporative_operation_minimum_limit_secondary_air_drybulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_operation_maximum_limit_outdoor_wetbulb_temperature")]
public float evaporative_operation_maximum_limit_outdoor_wetbulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_operation_maximum_limit_outdoor_drybulb_temperature")]
public float dry_operation_maximum_limit_outdoor_drybulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("EvaporativeCooler:Direct:ResearchSpecial")]
    [Description("Direct evaporative cooler with user-specified effectiveness (can represent rigid " +
        "pad or similar media), and recirculating water pump, and secondary air fan. This" +
        " model is controlled to meet the primary air outlet temperature setpoint.")]
    public class EvaporativeCooler_Direct_ResearchSpecial
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooler_design_effectiveness")]
public float cooler_design_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effectiveness_flow_ratio_modifier_curve_name")]
public string effectiveness_flow_ratio_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_design_flow_rate")]
public string primary_air_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("recirculating_water_pump_design_power")]
public string recirculating_water_pump_design_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("water_pump_power_sizing_factor")]
public float water_pump_power_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("water_pump_power_modifier_curve_name")]
public string water_pump_power_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drift_loss_fraction")]
public float drift_loss_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("blowdown_concentration_ratio")]
public float blowdown_concentration_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_operation_minimum_drybulb_temperature")]
public float evaporative_operation_minimum_drybulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_operation_maximum_limit_wetbulb_temperature")]
public float evaporative_operation_maximum_limit_wetbulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_operation_maximum_limit_drybulb_temperature")]
public float evaporative_operation_maximum_limit_drybulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.ExteriorEquipment
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Exterior:Lights")]
    [Description("only used for Meter type reporting, does not affect building loads")]
    public class Exterior_Lights
    {
        
        private void AstronomicalClock;
        
        private void ScheduleNameOnly;
        

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_option")]
public ControloptionType control_option
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("Astronomical Clock option overrides schedule to turn lights off when sun is up")]
        public enum ControloptionType
        {
        }
    }
    
    [JsonProperty("Exterior:FuelEquipment")]
    [Description("only used for Meter type reporting, does not affect building loads")]
    public class Exterior_FuelEquipment
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Water;
        

[JsonProperty("fuel_use_type")]
public FuelusetypeType fuel_use_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FuelusetypeType
        {
        }
    }
    
    [JsonProperty("Exterior:WaterEquipment")]
    [Description("only used for Meter type reporting, does not affect building loads")]
    public class Exterior_WaterEquipment
    {
        
        private void Water;
        

[JsonProperty("fuel_use_type")]
public FuelusetypeType fuel_use_type
{
    get
    {
    }
    set
    {
    }
}
 = (FuelusetypeType)Water;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FuelusetypeType
        {
        }
    }
}
namespace EnergyPlus.ExternalInterface
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ExternalInterface")]
    [Description(@"This object activates the external interface of EnergyPlus. If the object ExternalInterface is present, then all ExtnernalInterface:* objects will receive their values from the BCVTB interface or from FMUs at each zone time step. If this object is not present, then the values of these objects will be fixed at the value declared in the ""initial value"" field of the corresponding object, and a warning will be written to the EnergyPlus error file.")]
    public class ExternalInterface
    {
        
        private void FunctionalMockupUnitExport;
        
        private void FunctionalMockupUnitImport;
        
        private void PtolemyServer;
        

[JsonProperty("name_of_external_interface")]
public NameofexternalinterfaceType name_of_external_interface
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Name of External Interface Currently, the only valid entries are PtolemyServer, F" +
            "unctionalMockupUnitImport, and FunctionalMockupUnitExport.")]
        public enum NameofexternalinterfaceType
        {
        }
    }
    
    [JsonProperty("ExternalInterface:Schedule")]
    [Description("A ExternalInterface:Schedule contains only one value, which is used during the wa" +
        "rm-up period and the system sizing.")]
    public class ExternalInterface_Schedule
    {
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:Variable")]
    [Description(@"This input object is similar to EnergyManagementSystem:GlobalVariable. However, at the beginning of each zone time step, its value is set to the value received from the external interface. During the warm-up period and the system sizing, its value is set to the value specified by the field ""initial value."" This object can be used to move data into Erl subroutines.")]
    public class ExternalInterface_Variable
    {
        

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:Actuator")]
    [Description("Hardware portion of EMS used to set up actuators in the model")]
    public class ExternalInterface_Actuator
    {
        

[JsonProperty("actuated_component_unique_name")]
public string actuated_component_unique_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_type")]
public string actuated_component_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_control_type")]
public string actuated_component_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optional_initial_value")]
public float optional_initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitImport")]
    [Description("This object declares an FMU")]
    public class ExternalInterface_FunctionalMockupUnitImport
    {
        

[JsonProperty("fmu_file_name")]
public string fmu_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_timeout")]
public float fmu_timeout
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fmu_loggingon")]
public float fmu_loggingon
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitImport:From:Variable")]
    [Description("This object declares an FMU input variable")]
    public class ExternalInterface_FunctionalMockupUnitImport_From_Variable
    {
        

[JsonProperty("output_variable_index_key_name")]
public string output_variable_index_key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("output_variable_name")]
public string output_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_file_name")]
public string fmu_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_instance_name")]
public string fmu_instance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitImport:To:Schedule")]
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Schedule
    {
        

[JsonProperty("schedule_type_limits_names")]
public string schedule_type_limits_names
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_file_name")]
public string fmu_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_instance_name")]
public string fmu_instance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitImport:To:Actuator")]
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Actuator
    {
        

[JsonProperty("actuated_component_unique_name")]
public string actuated_component_unique_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_type")]
public string actuated_component_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_control_type")]
public string actuated_component_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_file_name")]
public string fmu_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_instance_name")]
public string fmu_instance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitImport:To:Variable")]
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    public class ExternalInterface_FunctionalMockupUnitImport_To_Variable
    {
        

[JsonProperty("fmu_file_name")]
public string fmu_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_instance_name")]
public string fmu_instance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitExport:From:Variable")]
    [Description("This object declares an FMU input variable")]
    public class ExternalInterface_FunctionalMockupUnitExport_From_Variable
    {
        

[JsonProperty("output_variable_index_key_name")]
public string output_variable_index_key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("output_variable_name")]
public string output_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitExport:To:Schedule")]
    [Description("This objects contains only one value, which is used during the first call of Ener" +
        "gyPlus")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Schedule
    {
        

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_type_limits_names")]
public string schedule_type_limits_names
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitExport:To:Actuator")]
    [Description("Hardware portion of EMS used to set up actuators in the model that are dynamicall" +
        "y updated from the FMU.")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Actuator
    {
        

[JsonProperty("actuated_component_unique_name")]
public string actuated_component_unique_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_type")]
public string actuated_component_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("actuated_component_control_type")]
public string actuated_component_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ExternalInterface:FunctionalMockupUnitExport:To:Variable")]
    [Description("Declares Erl variable as having global scope No spaces allowed in names used for " +
        "Erl variables")]
    public class ExternalInterface_FunctionalMockupUnitExport_To_Variable
    {
        

[JsonProperty("fmu_variable_name")]
public string fmu_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_value")]
public float initial_value
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.Fans
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Fan:SystemModel")]
    [Description(@"Versatile simple fan that can be used in variable air volume, constant volume, on-off cycling, two-speed or multi-speed applications. Performance at different flow rates, or speed levels, is determined using separate performance curve or table or prescribed power fractions at discrete speed levels for two-speed or multi-speed fans.")]
    public class Fan_SystemModel
    {
        
        private void Continuous;
        
        private void Discrete;
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        
        private void TotalEfficiencyAndPressure;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_maximum_air_flow_rate")]
public string design_maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("speed_control_method")]
public SpeedcontrolmethodType speed_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (SpeedcontrolmethodType)Discrete;

[JsonProperty("electric_power_minimum_flow_rate_fraction")]
public float electric_power_minimum_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("design_pressure_rise")]
public float design_pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("motor_in_air_stream_fraction")]
public float motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("design_electric_power_consumption")]
public string design_electric_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("electric_power_per_unit_flow_rate")]
public float electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_power_per_unit_flow_rate_per_unit_pressure")]
public float electric_power_per_unit_flow_rate_per_unit_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.66667;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("electric_power_function_of_flow_fraction_curve_name")]
public string electric_power_function_of_flow_fraction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_ventilation_mode_pressure_rise")]
public float night_ventilation_mode_pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_ventilation_mode_flow_fraction")]
public float night_ventilation_mode_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_loss_zone_name")]
public string motor_loss_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_loss_radiative_fraction")]
public float motor_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("number_of_speeds")]
public float number_of_speeds
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("speed_fractions")]
public string speed_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SpeedcontrolmethodType
        {
        }
        
        public enum DesignpowersizingmethodType
        {
        }
    }
    
    [JsonProperty("Fan:ConstantVolume")]
    [Description("Constant volume fan that is intended to operate continuously based on a time sche" +
        "dule. This fan will not cycle on and off based on cooling/heating load or other " +
        "control signals.")]
    public class Fan_ConstantVolume
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("pressure_rise")]
public float pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public string maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("motor_in_airstream_fraction")]
public float motor_in_airstream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
    }
    
    [JsonProperty("Fan:VariableVolume")]
    [Description("Variable air volume fan where the electric power input varies according to a perf" +
        "ormance curve as a function of flow fraction.")]
    public class Fan_VariableVolume
    {
        
        private void FixedFlowRate;
        
        private void Fraction;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("pressure_rise")]
public float pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public string maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_minimum_flow_rate_input_method")]
public FanpowerminimumflowrateinputmethodType fan_power_minimum_flow_rate_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (FanpowerminimumflowrateinputmethodType)Fraction;

[JsonProperty("fan_power_minimum_flow_fraction")]
public float fan_power_minimum_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("fan_power_minimum_air_flow_rate")]
public float fan_power_minimum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("motor_in_airstream_fraction")]
public float motor_in_airstream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fan_power_coefficient_1")]
public float fan_power_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_coefficient_2")]
public float fan_power_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_coefficient_3")]
public float fan_power_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_coefficient_4")]
public float fan_power_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_coefficient_5")]
public float fan_power_coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FanpowerminimumflowrateinputmethodType
        {
        }
    }
    
    [JsonProperty("Fan:OnOff")]
    [Description("Constant volume fan that is intended to cycle on and off based on cooling/heating" +
        " load or other control signals. This fan can also operate continuously like Fan:" +
        "ConstantVolume.")]
    public class Fan_OnOff
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("pressure_rise")]
public float pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public string maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("motor_in_airstream_fraction")]
public float motor_in_airstream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_ratio_function_of_speed_ratio_curve_name")]
public string fan_power_ratio_function_of_speed_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_efficiency_ratio_function_of_speed_ratio_curve_name")]
public string fan_efficiency_ratio_function_of_speed_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
    }
    
    [JsonProperty("Fan:ZoneExhaust")]
    [Description("Models a fan that exhausts air from a zone.")]
    public class Fan_ZoneExhaust
    {
        
        private void Coupled;
        
        private void Decoupled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("pressure_rise")]
public float pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public float maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("flow_fraction_schedule_name")]
public string flow_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_availability_manager_coupling_mode")]
public SystemavailabilitymanagercouplingmodeType system_availability_manager_coupling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (SystemavailabilitymanagercouplingmodeType)Coupled;

[JsonProperty("minimum_zone_temperature_limit_schedule_name")]
public string minimum_zone_temperature_limit_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("balanced_exhaust_fraction_schedule_name")]
public string balanced_exhaust_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Control if fan is to be interlocked with HVAC system Availability Managers or not" +
            ".")]
        public enum SystemavailabilitymanagercouplingmodeType
        {
        }
    }
    
    [JsonProperty("FanPerformance:NightVentilation")]
    [Description(@"Specifies an alternate set of performance parameters for a fan. These alternate parameters are used when a system manager (such as AvailabilityManager:NightVentilation) sets a specified flow rate. May be used with Fan:ConstantVolume, Fan:VariableVolume and Fan:ComponentModel. If the fan model senses that a fixed flow rate has been set, it will use these alternate performance parameters. It is assumed that the fan will run at a fixed speed in the alternate mode.")]
    public class FanPerformance_NightVentilation
    {
        

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure_rise")]
public float pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public string maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_in_airstream_fraction")]
public float motor_in_airstream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("Fan:ComponentModel")]
    [Description("A detailed fan type for constant-air-volume (CAV) and variable-air-volume (VAV) s" +
        "ystems. It includes inputs that describe the air-distribution system as well as " +
        "the fan, drive belt (if used), motor, and variable-frequency-drive (if used).")]
    public class Fan_ComponentModel
    {
        
        private void Power;
        
        private void Speed;
        

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public string maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_flow_rate")]
public string minimum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_sizing_factor")]
public float fan_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fan_wheel_diameter")]
public float fan_wheel_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_outlet_area")]
public float fan_outlet_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_fan_static_efficiency")]
public float maximum_fan_static_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("euler_number_at_maximum_fan_static_efficiency")]
public float euler_number_at_maximum_fan_static_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_dimensionless_fan_airflow")]
public float maximum_dimensionless_fan_airflow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_fan_pulley_ratio")]
public string motor_fan_pulley_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1;

[JsonProperty("belt_maximum_torque")]
public string belt_maximum_torque
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("belt_sizing_factor")]
public float belt_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("belt_fractional_torque_transition")]
public float belt_fractional_torque_transition
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.167;

[JsonProperty("motor_maximum_speed")]
public float motor_maximum_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_motor_output_power")]
public string maximum_motor_output_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_sizing_factor")]
public float motor_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("motor_in_airstream_fraction")]
public float motor_in_airstream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("vfd_efficiency_type")]
public VfdefficiencytypeType vfd_efficiency_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_vfd_output_power")]
public string maximum_vfd_output_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vfd_sizing_factor")]
public float vfd_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fan_pressure_rise_curve_name")]
public string fan_pressure_rise_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("duct_static_pressure_reset_curve_name")]
public string duct_static_pressure_reset_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_fan_static_efficiency_curve_name_non_stall_region")]
public string normalized_fan_static_efficiency_curve_name_non_stall_region
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_fan_static_efficiency_curve_name_stall_region")]
public string normalized_fan_static_efficiency_curve_name_stall_region
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_dimensionless_airflow_curve_name_non_stall_region")]
public string normalized_dimensionless_airflow_curve_name_non_stall_region
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_dimensionless_airflow_curve_name_stall_region")]
public string normalized_dimensionless_airflow_curve_name_stall_region
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_belt_efficiency_curve_name")]
public string maximum_belt_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_belt_efficiency_curve_name_region_1")]
public string normalized_belt_efficiency_curve_name_region_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_belt_efficiency_curve_name_region_2")]
public string normalized_belt_efficiency_curve_name_region_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_belt_efficiency_curve_name_region_3")]
public string normalized_belt_efficiency_curve_name_region_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_motor_efficiency_curve_name")]
public string maximum_motor_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_motor_efficiency_curve_name")]
public string normalized_motor_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vfd_efficiency_curve_name")]
public string vfd_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description("Efficiency depends on fraction of full-load motor speed Efficiency depends on  fr" +
            "action of full-load motor input power If field blank, then assumes constant VFD " +
            "efficiency (0.97)")]
        public enum VfdefficiencytypeType
        {
        }
    }
}
namespace EnergyPlus.FluidProperties
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("FluidProperties:Name")]
    [Description("potential fluid name/type in the input file repeat this object for each fluid")]
    public class FluidProperties_Name
    {
        
        private void Glycol;
        
        private void Refrigerant;
        

[JsonProperty("fluid_name")]
public string fluid_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FluidtypeType
        {
        }
    }
    
    [JsonProperty("FluidProperties:GlycolConcentration")]
    [Description("glycol and what concentration it is")]
    public class FluidProperties_GlycolConcentration
    {
        
        private void EthyleneGlycol;
        
        private void PropyleneGlycol;
        
        private void UserDefinedGlycolType;
        

[JsonProperty("glycol_type")]
public GlycoltypeType glycol_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("user_defined_glycol_name")]
public string user_defined_glycol_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("glycol_concentration")]
public float glycol_concentration
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)")]
        public enum GlycoltypeType
        {
        }
    }
    
    [JsonProperty("FluidProperties:Temperatures")]
    [Description(@"property values for fluid properties list of up to 250 temperatures, note that number of property values must match the number of properties in other words, there must be a one-to-one correspondence between the property values in this list and the actual properties list in other syntax degrees C (for all temperature inputs)")]
    public class FluidProperties_Temperatures
    {
        

[JsonProperty("temperature_1")]
public float temperature_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_2")]
public float temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_3")]
public float temperature_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_4")]
public float temperature_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_5")]
public float temperature_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_6")]
public float temperature_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_7")]
public float temperature_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_8")]
public float temperature_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_9")]
public float temperature_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_10")]
public float temperature_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_11")]
public float temperature_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_12")]
public float temperature_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_13")]
public float temperature_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_14")]
public float temperature_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_15")]
public float temperature_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_16")]
public float temperature_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_17")]
public float temperature_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_18")]
public float temperature_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_19")]
public float temperature_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_20")]
public float temperature_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_21")]
public float temperature_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_22")]
public float temperature_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_23")]
public float temperature_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_24")]
public float temperature_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_25")]
public float temperature_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_26")]
public float temperature_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_27")]
public float temperature_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_28")]
public float temperature_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_29")]
public float temperature_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_30")]
public float temperature_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_31")]
public float temperature_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_32")]
public float temperature_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_33")]
public float temperature_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_34")]
public float temperature_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_35")]
public float temperature_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_36")]
public float temperature_36
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_37")]
public float temperature_37
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_38")]
public float temperature_38
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_39")]
public float temperature_39
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_40")]
public float temperature_40
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_41")]
public float temperature_41
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_42")]
public float temperature_42
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_43")]
public float temperature_43
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_44")]
public float temperature_44
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_45")]
public float temperature_45
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_46")]
public float temperature_46
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_47")]
public float temperature_47
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_48")]
public float temperature_48
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_49")]
public float temperature_49
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_50")]
public float temperature_50
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_51")]
public float temperature_51
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_52")]
public float temperature_52
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_53")]
public float temperature_53
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_54")]
public float temperature_54
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_55")]
public float temperature_55
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_56")]
public float temperature_56
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_57")]
public float temperature_57
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_58")]
public float temperature_58
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_59")]
public float temperature_59
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_60")]
public float temperature_60
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_61")]
public float temperature_61
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_62")]
public float temperature_62
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_63")]
public float temperature_63
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_64")]
public float temperature_64
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_65")]
public float temperature_65
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_66")]
public float temperature_66
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_67")]
public float temperature_67
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_68")]
public float temperature_68
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_69")]
public float temperature_69
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_70")]
public float temperature_70
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_71")]
public float temperature_71
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_72")]
public float temperature_72
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_73")]
public float temperature_73
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_74")]
public float temperature_74
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_75")]
public float temperature_75
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_76")]
public float temperature_76
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_77")]
public float temperature_77
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_78")]
public float temperature_78
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_79")]
public float temperature_79
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_80")]
public float temperature_80
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_81")]
public float temperature_81
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_82")]
public float temperature_82
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_83")]
public float temperature_83
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_84")]
public float temperature_84
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_85")]
public float temperature_85
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_86")]
public float temperature_86
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_87")]
public float temperature_87
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_88")]
public float temperature_88
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_89")]
public float temperature_89
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_90")]
public float temperature_90
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_91")]
public float temperature_91
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_92")]
public float temperature_92
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_93")]
public float temperature_93
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_94")]
public float temperature_94
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_95")]
public float temperature_95
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_96")]
public float temperature_96
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_97")]
public float temperature_97
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_98")]
public float temperature_98
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_99")]
public float temperature_99
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_100")]
public float temperature_100
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_101")]
public float temperature_101
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_102")]
public float temperature_102
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_103")]
public float temperature_103
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_104")]
public float temperature_104
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_105")]
public float temperature_105
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_106")]
public float temperature_106
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_107")]
public float temperature_107
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_108")]
public float temperature_108
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_109")]
public float temperature_109
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_110")]
public float temperature_110
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_111")]
public float temperature_111
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_112")]
public float temperature_112
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_113")]
public float temperature_113
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_114")]
public float temperature_114
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_115")]
public float temperature_115
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_116")]
public float temperature_116
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_117")]
public float temperature_117
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_118")]
public float temperature_118
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_119")]
public float temperature_119
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_120")]
public float temperature_120
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_121")]
public float temperature_121
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_122")]
public float temperature_122
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_123")]
public float temperature_123
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_124")]
public float temperature_124
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_125")]
public float temperature_125
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_126")]
public float temperature_126
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_127")]
public float temperature_127
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_128")]
public float temperature_128
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_129")]
public float temperature_129
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_130")]
public float temperature_130
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_131")]
public float temperature_131
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_132")]
public float temperature_132
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_133")]
public float temperature_133
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_134")]
public float temperature_134
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_135")]
public float temperature_135
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_136")]
public float temperature_136
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_137")]
public float temperature_137
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_138")]
public float temperature_138
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_139")]
public float temperature_139
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_140")]
public float temperature_140
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_141")]
public float temperature_141
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_142")]
public float temperature_142
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_143")]
public float temperature_143
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_144")]
public float temperature_144
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_145")]
public float temperature_145
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_146")]
public float temperature_146
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_147")]
public float temperature_147
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_148")]
public float temperature_148
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_149")]
public float temperature_149
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_150")]
public float temperature_150
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_151")]
public float temperature_151
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_152")]
public float temperature_152
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_153")]
public float temperature_153
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_154")]
public float temperature_154
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_155")]
public float temperature_155
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_156")]
public float temperature_156
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_157")]
public float temperature_157
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_158")]
public float temperature_158
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_159")]
public float temperature_159
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_160")]
public float temperature_160
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_161")]
public float temperature_161
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_162")]
public float temperature_162
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_163")]
public float temperature_163
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_164")]
public float temperature_164
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_165")]
public float temperature_165
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_166")]
public float temperature_166
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_167")]
public float temperature_167
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_168")]
public float temperature_168
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_169")]
public float temperature_169
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_170")]
public float temperature_170
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_171")]
public float temperature_171
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_172")]
public float temperature_172
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_173")]
public float temperature_173
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_174")]
public float temperature_174
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_175")]
public float temperature_175
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_176")]
public float temperature_176
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_177")]
public float temperature_177
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_178")]
public float temperature_178
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_179")]
public float temperature_179
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_180")]
public float temperature_180
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_181")]
public float temperature_181
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_182")]
public float temperature_182
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_183")]
public float temperature_183
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_184")]
public float temperature_184
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_185")]
public float temperature_185
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_186")]
public float temperature_186
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_187")]
public float temperature_187
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_188")]
public float temperature_188
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_189")]
public float temperature_189
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_190")]
public float temperature_190
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_191")]
public float temperature_191
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_192")]
public float temperature_192
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_193")]
public float temperature_193
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_194")]
public float temperature_194
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_195")]
public float temperature_195
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_196")]
public float temperature_196
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_197")]
public float temperature_197
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_198")]
public float temperature_198
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_199")]
public float temperature_199
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_200")]
public float temperature_200
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_201")]
public float temperature_201
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_202")]
public float temperature_202
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_203")]
public float temperature_203
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_204")]
public float temperature_204
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_205")]
public float temperature_205
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_206")]
public float temperature_206
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_207")]
public float temperature_207
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_208")]
public float temperature_208
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_209")]
public float temperature_209
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_210")]
public float temperature_210
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_211")]
public float temperature_211
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_212")]
public float temperature_212
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_213")]
public float temperature_213
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_214")]
public float temperature_214
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_215")]
public float temperature_215
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_216")]
public float temperature_216
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_217")]
public float temperature_217
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_218")]
public float temperature_218
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_219")]
public float temperature_219
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_220")]
public float temperature_220
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_221")]
public float temperature_221
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_222")]
public float temperature_222
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_223")]
public float temperature_223
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_224")]
public float temperature_224
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_225")]
public float temperature_225
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_226")]
public float temperature_226
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_227")]
public float temperature_227
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_228")]
public float temperature_228
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_229")]
public float temperature_229
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_230")]
public float temperature_230
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_231")]
public float temperature_231
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_232")]
public float temperature_232
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_233")]
public float temperature_233
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_234")]
public float temperature_234
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_235")]
public float temperature_235
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_236")]
public float temperature_236
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_237")]
public float temperature_237
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_238")]
public float temperature_238
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_239")]
public float temperature_239
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_240")]
public float temperature_240
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_241")]
public float temperature_241
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_242")]
public float temperature_242
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_243")]
public float temperature_243
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_244")]
public float temperature_244
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_245")]
public float temperature_245
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_246")]
public float temperature_246
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_247")]
public float temperature_247
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_248")]
public float temperature_248
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_249")]
public float temperature_249
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_250")]
public float temperature_250
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("FluidProperties:Saturated")]
    [Description("fluid properties for the saturated region")]
    public class FluidProperties_Saturated
    {
        
        private void Density;
        
        private void Enthalpy;
        
        private void Pressure;
        
        private void SpecificHeat;
        
        private void Fluid;
        
        private void FluidGas;
        

[JsonProperty("fluid_name")]
public string fluid_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_property_type")]
public FluidpropertytypeType fluid_property_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_phase")]
public FluidphaseType fluid_phase
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_values_name")]
public string temperature_values_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_1")]
public float property_value_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_2")]
public float property_value_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_3")]
public float property_value_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_4")]
public float property_value_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_5")]
public float property_value_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_6")]
public float property_value_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_7")]
public float property_value_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_8")]
public float property_value_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_9")]
public float property_value_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_10")]
public float property_value_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_11")]
public float property_value_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_12")]
public float property_value_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_13")]
public float property_value_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_14")]
public float property_value_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_15")]
public float property_value_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_16")]
public float property_value_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_17")]
public float property_value_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_18")]
public float property_value_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_19")]
public float property_value_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_20")]
public float property_value_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_21")]
public float property_value_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_22")]
public float property_value_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_23")]
public float property_value_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_24")]
public float property_value_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_25")]
public float property_value_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_26")]
public float property_value_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_27")]
public float property_value_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_28")]
public float property_value_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_29")]
public float property_value_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_30")]
public float property_value_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_31")]
public float property_value_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_32")]
public float property_value_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_33")]
public float property_value_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_34")]
public float property_value_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_35")]
public float property_value_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_36")]
public float property_value_36
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_37")]
public float property_value_37
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_38")]
public float property_value_38
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_39")]
public float property_value_39
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_40")]
public float property_value_40
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_41")]
public float property_value_41
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_42")]
public float property_value_42
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_43")]
public float property_value_43
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_44")]
public float property_value_44
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_45")]
public float property_value_45
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_46")]
public float property_value_46
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_47")]
public float property_value_47
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_48")]
public float property_value_48
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_49")]
public float property_value_49
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_50")]
public float property_value_50
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_51")]
public float property_value_51
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_52")]
public float property_value_52
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_53")]
public float property_value_53
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_54")]
public float property_value_54
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_55")]
public float property_value_55
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_56")]
public float property_value_56
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_57")]
public float property_value_57
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_58")]
public float property_value_58
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_59")]
public float property_value_59
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_60")]
public float property_value_60
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_61")]
public float property_value_61
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_62")]
public float property_value_62
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_63")]
public float property_value_63
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_64")]
public float property_value_64
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_65")]
public float property_value_65
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_66")]
public float property_value_66
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_67")]
public float property_value_67
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_68")]
public float property_value_68
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_69")]
public float property_value_69
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_70")]
public float property_value_70
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_71")]
public float property_value_71
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_72")]
public float property_value_72
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_73")]
public float property_value_73
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_74")]
public float property_value_74
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_75")]
public float property_value_75
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_76")]
public float property_value_76
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_77")]
public float property_value_77
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_78")]
public float property_value_78
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_79")]
public float property_value_79
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_80")]
public float property_value_80
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_81")]
public float property_value_81
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_82")]
public float property_value_82
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_83")]
public float property_value_83
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_84")]
public float property_value_84
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_85")]
public float property_value_85
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_86")]
public float property_value_86
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_87")]
public float property_value_87
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_88")]
public float property_value_88
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_89")]
public float property_value_89
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_90")]
public float property_value_90
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_91")]
public float property_value_91
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_92")]
public float property_value_92
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_93")]
public float property_value_93
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_94")]
public float property_value_94
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_95")]
public float property_value_95
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_96")]
public float property_value_96
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_97")]
public float property_value_97
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_98")]
public float property_value_98
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_99")]
public float property_value_99
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_100")]
public float property_value_100
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_101")]
public float property_value_101
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_102")]
public float property_value_102
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_103")]
public float property_value_103
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_104")]
public float property_value_104
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_105")]
public float property_value_105
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_106")]
public float property_value_106
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_107")]
public float property_value_107
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_108")]
public float property_value_108
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_109")]
public float property_value_109
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_110")]
public float property_value_110
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_111")]
public float property_value_111
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_112")]
public float property_value_112
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_113")]
public float property_value_113
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_114")]
public float property_value_114
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_115")]
public float property_value_115
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_116")]
public float property_value_116
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_117")]
public float property_value_117
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_118")]
public float property_value_118
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_119")]
public float property_value_119
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_120")]
public float property_value_120
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_121")]
public float property_value_121
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_122")]
public float property_value_122
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_123")]
public float property_value_123
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_124")]
public float property_value_124
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_125")]
public float property_value_125
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_126")]
public float property_value_126
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_127")]
public float property_value_127
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_128")]
public float property_value_128
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_129")]
public float property_value_129
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_130")]
public float property_value_130
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_131")]
public float property_value_131
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_132")]
public float property_value_132
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_133")]
public float property_value_133
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_134")]
public float property_value_134
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_135")]
public float property_value_135
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_136")]
public float property_value_136
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_137")]
public float property_value_137
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_138")]
public float property_value_138
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_139")]
public float property_value_139
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_140")]
public float property_value_140
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_141")]
public float property_value_141
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_142")]
public float property_value_142
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_143")]
public float property_value_143
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_144")]
public float property_value_144
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_145")]
public float property_value_145
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_146")]
public float property_value_146
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_147")]
public float property_value_147
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_148")]
public float property_value_148
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_149")]
public float property_value_149
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_150")]
public float property_value_150
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_151")]
public float property_value_151
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_152")]
public float property_value_152
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_153")]
public float property_value_153
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_154")]
public float property_value_154
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_155")]
public float property_value_155
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_156")]
public float property_value_156
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_157")]
public float property_value_157
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_158")]
public float property_value_158
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_159")]
public float property_value_159
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_160")]
public float property_value_160
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_161")]
public float property_value_161
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_162")]
public float property_value_162
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_163")]
public float property_value_163
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_164")]
public float property_value_164
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_165")]
public float property_value_165
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_166")]
public float property_value_166
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_167")]
public float property_value_167
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_168")]
public float property_value_168
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_169")]
public float property_value_169
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_170")]
public float property_value_170
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_171")]
public float property_value_171
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_172")]
public float property_value_172
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_173")]
public float property_value_173
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_174")]
public float property_value_174
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_175")]
public float property_value_175
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_176")]
public float property_value_176
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_177")]
public float property_value_177
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_178")]
public float property_value_178
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_179")]
public float property_value_179
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_180")]
public float property_value_180
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_181")]
public float property_value_181
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_182")]
public float property_value_182
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_183")]
public float property_value_183
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_184")]
public float property_value_184
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_185")]
public float property_value_185
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_186")]
public float property_value_186
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_187")]
public float property_value_187
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_188")]
public float property_value_188
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_189")]
public float property_value_189
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_190")]
public float property_value_190
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_191")]
public float property_value_191
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_192")]
public float property_value_192
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_193")]
public float property_value_193
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_194")]
public float property_value_194
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_195")]
public float property_value_195
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_196")]
public float property_value_196
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_197")]
public float property_value_197
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_198")]
public float property_value_198
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_199")]
public float property_value_199
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_200")]
public float property_value_200
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_201")]
public float property_value_201
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_202")]
public float property_value_202
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_203")]
public float property_value_203
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_204")]
public float property_value_204
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_205")]
public float property_value_205
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_206")]
public float property_value_206
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_207")]
public float property_value_207
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_208")]
public float property_value_208
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_209")]
public float property_value_209
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_210")]
public float property_value_210
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_211")]
public float property_value_211
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_212")]
public float property_value_212
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_213")]
public float property_value_213
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_214")]
public float property_value_214
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_215")]
public float property_value_215
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_216")]
public float property_value_216
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_217")]
public float property_value_217
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_218")]
public float property_value_218
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_219")]
public float property_value_219
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_220")]
public float property_value_220
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_221")]
public float property_value_221
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_222")]
public float property_value_222
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_223")]
public float property_value_223
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_224")]
public float property_value_224
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_225")]
public float property_value_225
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_226")]
public float property_value_226
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_227")]
public float property_value_227
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_228")]
public float property_value_228
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_229")]
public float property_value_229
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_230")]
public float property_value_230
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_231")]
public float property_value_231
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_232")]
public float property_value_232
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_233")]
public float property_value_233
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_234")]
public float property_value_234
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_235")]
public float property_value_235
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_236")]
public float property_value_236
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_237")]
public float property_value_237
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_238")]
public float property_value_238
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_239")]
public float property_value_239
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_240")]
public float property_value_240
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_241")]
public float property_value_241
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_242")]
public float property_value_242
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_243")]
public float property_value_243
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_244")]
public float property_value_244
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_245")]
public float property_value_245
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_246")]
public float property_value_246
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_247")]
public float property_value_247
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_248")]
public float property_value_248
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_249")]
public float property_value_249
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_250")]
public float property_value_250
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Enthalpy Units are J/kg Density Units are kg/m3 SpecificHeat Units are J/kg-K Pre" +
            "ssure Units are Pa")]
        public enum FluidpropertytypeType
        {
        }
        
        [Description("Fluid=saturated fluid FluidGas=saturated vapor")]
        public enum FluidphaseType
        {
        }
    }
    
    [JsonProperty("FluidProperties:Superheated")]
    [Description("fluid properties for the superheated region")]
    public class FluidProperties_Superheated
    {
        
        private void Density;
        
        private void Enthalpy;
        

[JsonProperty("fluid_name")]
public string fluid_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_property_type")]
public FluidpropertytypeType fluid_property_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_values_name")]
public string temperature_values_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure")]
public float pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_1")]
public float property_value_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_2")]
public float property_value_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_3")]
public float property_value_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_4")]
public float property_value_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_5")]
public float property_value_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_6")]
public float property_value_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_7")]
public float property_value_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_8")]
public float property_value_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_9")]
public float property_value_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_10")]
public float property_value_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_11")]
public float property_value_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_12")]
public float property_value_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_13")]
public float property_value_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_14")]
public float property_value_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_15")]
public float property_value_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_16")]
public float property_value_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_17")]
public float property_value_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_18")]
public float property_value_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_19")]
public float property_value_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_20")]
public float property_value_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_21")]
public float property_value_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_22")]
public float property_value_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_23")]
public float property_value_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_24")]
public float property_value_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_25")]
public float property_value_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_26")]
public float property_value_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_27")]
public float property_value_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_28")]
public float property_value_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_29")]
public float property_value_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_30")]
public float property_value_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_31")]
public float property_value_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_32")]
public float property_value_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_33")]
public float property_value_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_34")]
public float property_value_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_35")]
public float property_value_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_36")]
public float property_value_36
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_37")]
public float property_value_37
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_38")]
public float property_value_38
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_39")]
public float property_value_39
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_40")]
public float property_value_40
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_41")]
public float property_value_41
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_42")]
public float property_value_42
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_43")]
public float property_value_43
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_44")]
public float property_value_44
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_45")]
public float property_value_45
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_46")]
public float property_value_46
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_47")]
public float property_value_47
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_48")]
public float property_value_48
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_49")]
public float property_value_49
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_50")]
public float property_value_50
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_51")]
public float property_value_51
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_52")]
public float property_value_52
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_53")]
public float property_value_53
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_54")]
public float property_value_54
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_55")]
public float property_value_55
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_56")]
public float property_value_56
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_57")]
public float property_value_57
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_58")]
public float property_value_58
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_59")]
public float property_value_59
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_60")]
public float property_value_60
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_61")]
public float property_value_61
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_62")]
public float property_value_62
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_63")]
public float property_value_63
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_64")]
public float property_value_64
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_65")]
public float property_value_65
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_66")]
public float property_value_66
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_67")]
public float property_value_67
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_68")]
public float property_value_68
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_69")]
public float property_value_69
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_70")]
public float property_value_70
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_71")]
public float property_value_71
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_72")]
public float property_value_72
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_73")]
public float property_value_73
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_74")]
public float property_value_74
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_75")]
public float property_value_75
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_76")]
public float property_value_76
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_77")]
public float property_value_77
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_78")]
public float property_value_78
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_79")]
public float property_value_79
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_80")]
public float property_value_80
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_81")]
public float property_value_81
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_82")]
public float property_value_82
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_83")]
public float property_value_83
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_84")]
public float property_value_84
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_85")]
public float property_value_85
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_86")]
public float property_value_86
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_87")]
public float property_value_87
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_88")]
public float property_value_88
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_89")]
public float property_value_89
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_90")]
public float property_value_90
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_91")]
public float property_value_91
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_92")]
public float property_value_92
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_93")]
public float property_value_93
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_94")]
public float property_value_94
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_95")]
public float property_value_95
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_96")]
public float property_value_96
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_97")]
public float property_value_97
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_98")]
public float property_value_98
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_99")]
public float property_value_99
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_100")]
public float property_value_100
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_101")]
public float property_value_101
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_102")]
public float property_value_102
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_103")]
public float property_value_103
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_104")]
public float property_value_104
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_105")]
public float property_value_105
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_106")]
public float property_value_106
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_107")]
public float property_value_107
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_108")]
public float property_value_108
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_109")]
public float property_value_109
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_110")]
public float property_value_110
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_111")]
public float property_value_111
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_112")]
public float property_value_112
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_113")]
public float property_value_113
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_114")]
public float property_value_114
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_115")]
public float property_value_115
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_116")]
public float property_value_116
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_117")]
public float property_value_117
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_118")]
public float property_value_118
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_119")]
public float property_value_119
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_120")]
public float property_value_120
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_121")]
public float property_value_121
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_122")]
public float property_value_122
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_123")]
public float property_value_123
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_124")]
public float property_value_124
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_125")]
public float property_value_125
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_126")]
public float property_value_126
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_127")]
public float property_value_127
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_128")]
public float property_value_128
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_129")]
public float property_value_129
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_130")]
public float property_value_130
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_131")]
public float property_value_131
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_132")]
public float property_value_132
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_133")]
public float property_value_133
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_134")]
public float property_value_134
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_135")]
public float property_value_135
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_136")]
public float property_value_136
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_137")]
public float property_value_137
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_138")]
public float property_value_138
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_139")]
public float property_value_139
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_140")]
public float property_value_140
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_141")]
public float property_value_141
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_142")]
public float property_value_142
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_143")]
public float property_value_143
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_144")]
public float property_value_144
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_145")]
public float property_value_145
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_146")]
public float property_value_146
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_147")]
public float property_value_147
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_148")]
public float property_value_148
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_149")]
public float property_value_149
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_150")]
public float property_value_150
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_151")]
public float property_value_151
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_152")]
public float property_value_152
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_153")]
public float property_value_153
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_154")]
public float property_value_154
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_155")]
public float property_value_155
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_156")]
public float property_value_156
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_157")]
public float property_value_157
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_158")]
public float property_value_158
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_159")]
public float property_value_159
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_160")]
public float property_value_160
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_161")]
public float property_value_161
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_162")]
public float property_value_162
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_163")]
public float property_value_163
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_164")]
public float property_value_164
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_165")]
public float property_value_165
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_166")]
public float property_value_166
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_167")]
public float property_value_167
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_168")]
public float property_value_168
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_169")]
public float property_value_169
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_170")]
public float property_value_170
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_171")]
public float property_value_171
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_172")]
public float property_value_172
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_173")]
public float property_value_173
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_174")]
public float property_value_174
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_175")]
public float property_value_175
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_176")]
public float property_value_176
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_177")]
public float property_value_177
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_178")]
public float property_value_178
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_179")]
public float property_value_179
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_180")]
public float property_value_180
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_181")]
public float property_value_181
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_182")]
public float property_value_182
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_183")]
public float property_value_183
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_184")]
public float property_value_184
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_185")]
public float property_value_185
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_186")]
public float property_value_186
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_187")]
public float property_value_187
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_188")]
public float property_value_188
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_189")]
public float property_value_189
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_190")]
public float property_value_190
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_191")]
public float property_value_191
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_192")]
public float property_value_192
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_193")]
public float property_value_193
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_194")]
public float property_value_194
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_195")]
public float property_value_195
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_196")]
public float property_value_196
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_197")]
public float property_value_197
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_198")]
public float property_value_198
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_199")]
public float property_value_199
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_200")]
public float property_value_200
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_201")]
public float property_value_201
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_202")]
public float property_value_202
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_203")]
public float property_value_203
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_204")]
public float property_value_204
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_205")]
public float property_value_205
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_206")]
public float property_value_206
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_207")]
public float property_value_207
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_208")]
public float property_value_208
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_209")]
public float property_value_209
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_210")]
public float property_value_210
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_211")]
public float property_value_211
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_212")]
public float property_value_212
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_213")]
public float property_value_213
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_214")]
public float property_value_214
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_215")]
public float property_value_215
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_216")]
public float property_value_216
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_217")]
public float property_value_217
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_218")]
public float property_value_218
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_219")]
public float property_value_219
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_220")]
public float property_value_220
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_221")]
public float property_value_221
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_222")]
public float property_value_222
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_223")]
public float property_value_223
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_224")]
public float property_value_224
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_225")]
public float property_value_225
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_226")]
public float property_value_226
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_227")]
public float property_value_227
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_228")]
public float property_value_228
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_229")]
public float property_value_229
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_230")]
public float property_value_230
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_231")]
public float property_value_231
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_232")]
public float property_value_232
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_233")]
public float property_value_233
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_234")]
public float property_value_234
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_235")]
public float property_value_235
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_236")]
public float property_value_236
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_237")]
public float property_value_237
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_238")]
public float property_value_238
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_239")]
public float property_value_239
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_240")]
public float property_value_240
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_241")]
public float property_value_241
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_242")]
public float property_value_242
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_243")]
public float property_value_243
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_244")]
public float property_value_244
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_245")]
public float property_value_245
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_246")]
public float property_value_246
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_247")]
public float property_value_247
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_248")]
public float property_value_248
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_249")]
public float property_value_249
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_250")]
public float property_value_250
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Enthalpy Units are J/kg Density Units are kg/m3")]
        public enum FluidpropertytypeType
        {
        }
    }
    
    [JsonProperty("FluidProperties:Concentration")]
    [Description("fluid properties for water/other fluid mixtures")]
    public class FluidProperties_Concentration
    {
        
        private void Conductivity;
        
        private void Density;
        
        private void SpecificHeat;
        
        private void Viscosity;
        

[JsonProperty("fluid_name")]
public string fluid_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_property_type")]
public FluidpropertytypeType fluid_property_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_values_name")]
public string temperature_values_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("concentration")]
public float concentration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_1")]
public float property_value_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_2")]
public float property_value_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_3")]
public float property_value_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_4")]
public float property_value_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_5")]
public float property_value_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_6")]
public float property_value_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_7")]
public float property_value_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_8")]
public float property_value_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_9")]
public float property_value_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_10")]
public float property_value_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_11")]
public float property_value_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_12")]
public float property_value_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_13")]
public float property_value_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_14")]
public float property_value_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_15")]
public float property_value_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_16")]
public float property_value_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_17")]
public float property_value_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_18")]
public float property_value_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_19")]
public float property_value_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_20")]
public float property_value_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_21")]
public float property_value_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_22")]
public float property_value_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_23")]
public float property_value_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_24")]
public float property_value_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_25")]
public float property_value_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_26")]
public float property_value_26
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_27")]
public float property_value_27
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_28")]
public float property_value_28
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_29")]
public float property_value_29
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_30")]
public float property_value_30
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_31")]
public float property_value_31
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_32")]
public float property_value_32
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_33")]
public float property_value_33
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_34")]
public float property_value_34
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_35")]
public float property_value_35
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_36")]
public float property_value_36
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_37")]
public float property_value_37
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_38")]
public float property_value_38
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_39")]
public float property_value_39
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_40")]
public float property_value_40
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_41")]
public float property_value_41
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_42")]
public float property_value_42
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_43")]
public float property_value_43
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_44")]
public float property_value_44
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_45")]
public float property_value_45
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_46")]
public float property_value_46
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_47")]
public float property_value_47
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_48")]
public float property_value_48
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_49")]
public float property_value_49
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_50")]
public float property_value_50
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_51")]
public float property_value_51
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_52")]
public float property_value_52
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_53")]
public float property_value_53
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_54")]
public float property_value_54
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_55")]
public float property_value_55
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_56")]
public float property_value_56
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_57")]
public float property_value_57
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_58")]
public float property_value_58
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_59")]
public float property_value_59
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_60")]
public float property_value_60
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_61")]
public float property_value_61
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_62")]
public float property_value_62
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_63")]
public float property_value_63
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_64")]
public float property_value_64
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_65")]
public float property_value_65
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_66")]
public float property_value_66
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_67")]
public float property_value_67
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_68")]
public float property_value_68
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_69")]
public float property_value_69
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_70")]
public float property_value_70
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_71")]
public float property_value_71
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_72")]
public float property_value_72
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_73")]
public float property_value_73
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_74")]
public float property_value_74
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_75")]
public float property_value_75
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_76")]
public float property_value_76
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_77")]
public float property_value_77
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_78")]
public float property_value_78
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_79")]
public float property_value_79
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_80")]
public float property_value_80
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_81")]
public float property_value_81
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_82")]
public float property_value_82
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_83")]
public float property_value_83
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_84")]
public float property_value_84
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_85")]
public float property_value_85
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_86")]
public float property_value_86
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_87")]
public float property_value_87
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_88")]
public float property_value_88
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_89")]
public float property_value_89
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_90")]
public float property_value_90
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_91")]
public float property_value_91
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_92")]
public float property_value_92
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_93")]
public float property_value_93
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_94")]
public float property_value_94
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_95")]
public float property_value_95
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_96")]
public float property_value_96
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_97")]
public float property_value_97
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_98")]
public float property_value_98
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_99")]
public float property_value_99
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_100")]
public float property_value_100
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_101")]
public float property_value_101
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_102")]
public float property_value_102
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_103")]
public float property_value_103
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_104")]
public float property_value_104
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_105")]
public float property_value_105
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_106")]
public float property_value_106
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_107")]
public float property_value_107
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_108")]
public float property_value_108
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_109")]
public float property_value_109
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_110")]
public float property_value_110
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_111")]
public float property_value_111
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_112")]
public float property_value_112
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_113")]
public float property_value_113
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_114")]
public float property_value_114
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_115")]
public float property_value_115
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_116")]
public float property_value_116
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_117")]
public float property_value_117
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_118")]
public float property_value_118
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_119")]
public float property_value_119
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_120")]
public float property_value_120
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_121")]
public float property_value_121
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_122")]
public float property_value_122
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_123")]
public float property_value_123
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_124")]
public float property_value_124
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_125")]
public float property_value_125
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_126")]
public float property_value_126
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_127")]
public float property_value_127
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_128")]
public float property_value_128
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_129")]
public float property_value_129
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_130")]
public float property_value_130
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_131")]
public float property_value_131
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_132")]
public float property_value_132
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_133")]
public float property_value_133
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_134")]
public float property_value_134
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_135")]
public float property_value_135
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_136")]
public float property_value_136
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_137")]
public float property_value_137
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_138")]
public float property_value_138
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_139")]
public float property_value_139
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_140")]
public float property_value_140
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_141")]
public float property_value_141
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_142")]
public float property_value_142
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_143")]
public float property_value_143
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_144")]
public float property_value_144
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_145")]
public float property_value_145
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_146")]
public float property_value_146
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_147")]
public float property_value_147
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_148")]
public float property_value_148
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_149")]
public float property_value_149
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_150")]
public float property_value_150
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_151")]
public float property_value_151
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_152")]
public float property_value_152
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_153")]
public float property_value_153
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_154")]
public float property_value_154
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_155")]
public float property_value_155
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_156")]
public float property_value_156
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_157")]
public float property_value_157
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_158")]
public float property_value_158
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_159")]
public float property_value_159
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_160")]
public float property_value_160
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_161")]
public float property_value_161
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_162")]
public float property_value_162
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_163")]
public float property_value_163
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_164")]
public float property_value_164
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_165")]
public float property_value_165
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_166")]
public float property_value_166
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_167")]
public float property_value_167
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_168")]
public float property_value_168
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_169")]
public float property_value_169
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_170")]
public float property_value_170
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_171")]
public float property_value_171
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_172")]
public float property_value_172
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_173")]
public float property_value_173
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_174")]
public float property_value_174
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_175")]
public float property_value_175
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_176")]
public float property_value_176
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_177")]
public float property_value_177
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_178")]
public float property_value_178
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_179")]
public float property_value_179
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_180")]
public float property_value_180
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_181")]
public float property_value_181
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_182")]
public float property_value_182
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_183")]
public float property_value_183
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_184")]
public float property_value_184
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_185")]
public float property_value_185
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_186")]
public float property_value_186
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_187")]
public float property_value_187
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_188")]
public float property_value_188
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_189")]
public float property_value_189
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_190")]
public float property_value_190
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_191")]
public float property_value_191
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_192")]
public float property_value_192
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_193")]
public float property_value_193
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_194")]
public float property_value_194
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_195")]
public float property_value_195
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_196")]
public float property_value_196
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_197")]
public float property_value_197
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_198")]
public float property_value_198
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_199")]
public float property_value_199
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_200")]
public float property_value_200
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_201")]
public float property_value_201
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_202")]
public float property_value_202
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_203")]
public float property_value_203
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_204")]
public float property_value_204
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_205")]
public float property_value_205
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_206")]
public float property_value_206
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_207")]
public float property_value_207
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_208")]
public float property_value_208
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_209")]
public float property_value_209
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_210")]
public float property_value_210
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_211")]
public float property_value_211
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_212")]
public float property_value_212
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_213")]
public float property_value_213
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_214")]
public float property_value_214
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_215")]
public float property_value_215
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_216")]
public float property_value_216
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_217")]
public float property_value_217
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_218")]
public float property_value_218
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_219")]
public float property_value_219
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_220")]
public float property_value_220
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_221")]
public float property_value_221
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_222")]
public float property_value_222
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_223")]
public float property_value_223
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_224")]
public float property_value_224
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_225")]
public float property_value_225
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_226")]
public float property_value_226
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_227")]
public float property_value_227
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_228")]
public float property_value_228
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_229")]
public float property_value_229
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_230")]
public float property_value_230
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_231")]
public float property_value_231
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_232")]
public float property_value_232
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_233")]
public float property_value_233
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_234")]
public float property_value_234
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_235")]
public float property_value_235
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_236")]
public float property_value_236
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_237")]
public float property_value_237
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_238")]
public float property_value_238
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_239")]
public float property_value_239
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_240")]
public float property_value_240
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_241")]
public float property_value_241
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_242")]
public float property_value_242
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_243")]
public float property_value_243
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_244")]
public float property_value_244
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_245")]
public float property_value_245
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_246")]
public float property_value_246
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_247")]
public float property_value_247
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_248")]
public float property_value_248
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_249")]
public float property_value_249
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("property_value_250")]
public float property_value_250
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Density Units are kg/m3 SpecificHeat Units are J/kg-K Conductivity Units are W/m-" +
            "K Viscosity Units are N-s/m2")]
        public enum FluidpropertytypeType
        {
        }
    }
}
namespace EnergyPlus.GeneralDataEntry
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Matrix:TwoDimension")]
    [Description("matrix data in row-major order list each row keeping the columns in order number " +
        "of values must equal N1 x N2")]
    public class Matrix_TwoDimension
    {
        

[JsonProperty("number_of_rows")]
public float number_of_rows
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_columns")]
public float number_of_columns
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("values")]
public string values
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.HeatRecovery
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("HeatExchanger:AirToAir:FlatPlate")]
    [Description("Flat plate air-to-air heat exchanger, typically used for exhaust or relief air he" +
        "at recovery.")]
    public class HeatExchanger_AirToAir_FlatPlate
    {
        
        private void CounterFlow;
        
        private void CrossFlowBothUnmixed;
        
        private void ParallelFlow;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_arrangement_type")]
public FlowarrangementtypeType flow_arrangement_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)Yes;

[JsonProperty("ratio_of_supply_to_secondary_ha_values")]
public float ratio_of_supply_to_secondary_ha_values
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_supply_air_flow_rate")]
public string nominal_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("nominal_supply_air_inlet_temperature")]
public float nominal_supply_air_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_supply_air_outlet_temperature")]
public float nominal_supply_air_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_secondary_air_flow_rate")]
public string nominal_secondary_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_secondary_air_inlet_temperature")]
public float nominal_secondary_air_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_electric_power")]
public float nominal_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_outlet_node_name")]
public string supply_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_outlet_node_name")]
public string secondary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FlowarrangementtypeType
        {
        }
        
        [Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
            " operating or high humidity control is active")]
        public enum EconomizerlockoutType
        {
        }
    }
    
    [JsonProperty("HeatExchanger:AirToAir:SensibleAndLatent")]
    [Description("This object models an air-to-air heat exchanger using effectiveness relationships" +
        ". The heat exchanger can transfer sensible energy, latent energy, or both betwee" +
        "n the supply (primary) and exhaust (secondary) air streams.")]
    public class HeatExchanger_AirToAir_SensibleAndLatent
    {
        
        private void No;
        
        private void Yes;
        
        private void Plate;
        
        private void Rotary;
        
        private void ExhaustAirRecirculation;
        
        private void ExhaustOnly;
        
        private void MinimumExhaustTemperature;
        
        private void None;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_supply_air_flow_rate")]
public string nominal_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_effectiveness_at_100_heating_air_flow")]
public float sensible_effectiveness_at_100_heating_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_effectiveness_at_100_heating_air_flow")]
public float latent_effectiveness_at_100_heating_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sensible_effectiveness_at_75_heating_air_flow")]
public float sensible_effectiveness_at_75_heating_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_effectiveness_at_75_heating_air_flow")]
public float latent_effectiveness_at_75_heating_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sensible_effectiveness_at_100_cooling_air_flow")]
public float sensible_effectiveness_at_100_cooling_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_effectiveness_at_100_cooling_air_flow")]
public float latent_effectiveness_at_100_cooling_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sensible_effectiveness_at_75_cooling_air_flow")]
public float sensible_effectiveness_at_75_cooling_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("latent_effectiveness_at_75_cooling_air_flow")]
public float latent_effectiveness_at_75_cooling_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_outlet_node_name")]
public string supply_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_inlet_node_name")]
public string exhaust_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_outlet_node_name")]
public string exhaust_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_electric_power")]
public float nominal_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("supply_air_outlet_temperature_control")]
public SupplyairoutlettemperaturecontrolType supply_air_outlet_temperature_control
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyairoutlettemperaturecontrolType)No;

[JsonProperty("heat_exchanger_type")]
public HeatexchangertypeType heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatexchangertypeType)Plate;

[JsonProperty("frost_control_type")]
public FrostcontroltypeType frost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (FrostcontroltypeType)None;

[JsonProperty("threshold_temperature")]
public float threshold_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.7;

[JsonProperty("initial_defrost_time_fraction")]
public float initial_defrost_time_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.083;

[JsonProperty("rate_of_defrost_time_fraction_increase")]
public float rate_of_defrost_time_fraction_increase
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.012;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)Yes;
        
        public enum SupplyairoutlettemperaturecontrolType
        {
        }
        
        public enum HeatexchangertypeType
        {
        }
        
        public enum FrostcontroltypeType
        {
        }
        
        [Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
            " operating or high humidity control is active")]
        public enum EconomizerlockoutType
        {
        }
    }
    
    [JsonProperty("HeatExchanger:Desiccant:BalancedFlow")]
    [Description(@"This object models a balanced desiccant heat exchanger. The heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The air flow rate and face velocity are assumed to be the same on both the process and regeneration sides of the heat exchanger.")]
    public class HeatExchanger_Desiccant_BalancedFlow
    {
        
        private void HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_inlet_node_name")]
public string regeneration_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_outlet_node_name")]
public string regeneration_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("process_air_inlet_node_name")]
public string process_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("process_air_outlet_node_name")]
public string process_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_performance_object_type")]
public HeatexchangerperformanceobjecttypeType heat_exchanger_performance_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatexchangerperformanceobjecttypeType)HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1;

[JsonProperty("heat_exchanger_performance_name")]
public string heat_exchanger_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)No;
        
        public enum HeatexchangerperformanceobjecttypeType
        {
        }
        
        [Description("Yes means that the heat exchanger will be locked out (off) when the economizer is" +
            " operating or high humidity control is active")]
        public enum EconomizerlockoutType
        {
        }
    }
    
    [JsonProperty("HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1")]
    [Description(@"RTO = B1 + B2*RWI + B3*RTI + B4*(RWI/RTI) + B5*PWI + B6*PTI + B7*(PWI/PTI) + B8*RFV RWO = C1 + C2*RWI + C3*RTI + C4*(RWI/RTI) + C5*PWI + C6*PTI + C7*(PWI/PTI) + C8*RFV where, RTO = Dry-bulb temperature of the regeneration outlet air (C) RWO = Humidity ratio of the regeneration outlet air (kgWater/kgDryAir) RWI = Humidity ratio of the regeneration inlet air (kgWater/kgDryAir) RTI = Dry-bulb temperature of the regeneration inlet air (C) PWI = Humidity ratio of the process inlet air (kgWater/kgDryAir) PTI = Dry-bulb temperature of the process inlet air (C) RFV = Regeneration Face Velocity (m/s)")]
    public class HeatExchanger_Desiccant_BalancedFlow_PerformanceDataType
    {
        

[JsonProperty("nominal_air_flow_rate")]
public string nominal_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_air_face_velocity")]
public string nominal_air_face_velocity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_electric_power")]
public float nominal_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("temperature_equation_coefficient_1")]
public float temperature_equation_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_2")]
public float temperature_equation_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_3")]
public float temperature_equation_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_4")]
public float temperature_equation_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_5")]
public float temperature_equation_coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_6")]
public float temperature_equation_coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_7")]
public float temperature_equation_coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_equation_coefficient_8")]
public float temperature_equation_coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation")]
public float minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation")]
public float maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_temperature_for_temperature_equation")]
public float minimum_regeneration_inlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_temperature_for_temperature_equation")]
public float maximum_regeneration_inlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_humidity_ratio_for_temperature_equation")]
public float minimum_process_inlet_air_humidity_ratio_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_humidity_ratio_for_temperature_equation")]
public float maximum_process_inlet_air_humidity_ratio_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_temperature_for_temperature_equation")]
public float minimum_process_inlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_temperature_for_temperature_equation")]
public float maximum_process_inlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_air_velocity_for_temperature_equation")]
public float minimum_regeneration_air_velocity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_air_velocity_for_temperature_equation")]
public float maximum_regeneration_air_velocity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_outlet_air_temperature_for_temperature_equation")]
public float minimum_regeneration_outlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_outlet_air_temperature_for_temperature_equation")]
public float maximum_regeneration_outlet_air_temperature_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation")]
public float minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation")]
public float maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_relative_humidity_for_temperature_equation")]
public float minimum_process_inlet_air_relative_humidity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_relative_humidity_for_temperature_equation")]
public float maximum_process_inlet_air_relative_humidity_for_temperature_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_1")]
public float humidity_ratio_equation_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_2")]
public float humidity_ratio_equation_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_3")]
public float humidity_ratio_equation_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_4")]
public float humidity_ratio_equation_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_5")]
public float humidity_ratio_equation_coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_6")]
public float humidity_ratio_equation_coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_7")]
public float humidity_ratio_equation_coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_equation_coefficient_8")]
public float humidity_ratio_equation_coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation")]
public float minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation")]
public float maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_temperature_for_humidity_ratio_equation")]
public float minimum_process_inlet_air_temperature_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_temperature_for_humidity_ratio_equation")]
public float maximum_process_inlet_air_temperature_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_air_velocity_for_humidity_ratio_equation")]
public float minimum_regeneration_air_velocity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_air_velocity_for_humidity_ratio_equation")]
public float maximum_regeneration_air_velocity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation")]
public float maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public float minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public float maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public float minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation")]
public float maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.HumidifiersandDehumidifiers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Humidifier:Steam:Electric")]
    [Description("Electrically heated steam humidifier with fan.")]
    public class Humidifier_Steam_Electric
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_capacity")]
public string rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_power")]
public string rated_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("standby_power")]
public float standby_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_storage_tank_name")]
public string water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Humidifier:Steam:Gas")]
    [Description("Natural gas fired steam humidifier with optional blower fan.")]
    public class Humidifier_Steam_Gas
    {
        
        private void FixedInletWaterTemperature;
        
        private void VariableInletWaterTemperature;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_capacity")]
public string rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_gas_use_rate")]
public string rated_gas_use_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_efficiency")]
public float thermal_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("thermal_efficiency_modifier_curve_name")]
public string thermal_efficiency_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("auxiliary_electric_power")]
public float auxiliary_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_storage_tank_name")]
public string water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_water_temperature_option")]
public InletwatertemperatureoptionType inlet_water_temperature_option
{
    get
    {
    }
    set
    {
    }
}
 = (InletwatertemperatureoptionType)FixedInletWaterTemperature;
        
        [Description(@"The inlet water temperature can be fixed at 20C as it is done for electric steam humidifier or it can be allowed to vary with temperature of the water source. Currently allowed water sources are main water or water storage tank in water use objects. if FixedInletWaterTemperature is specified, then a fixed 20C water temperature will be used, or else if VariableInletWaterTemperature is specified, then inlet water will vary depending the source water temperature. If this input field is left blank, then fixed inlet water temperature of 20C will be assumed.")]
        public enum InletwatertemperatureoptionType
        {
        }
    }
    
    [JsonProperty("Dehumidifier:Desiccant:NoFans")]
    [Description(@"This object models a solid desiccant dehumidifier. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. This object determines the process air outlet conditions, the load on the regeneration heating coil, the electric power consumption for the wheel rotor motor, and the regeneration air fan mass flow rate. All other heat exchangers are modeled as separate objects connected to the inlet and outlet nodes of the dehumidifier. The solid desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    public class Dehumidifier_Desiccant_NoFans
    {
        
        private void LeavingMaximumHumidityRatioSetpoint;
        
        private void SystemNodeMaximumHumidityRatioSetpoint;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Fan:ConstantVolume;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void Default;
        
        private void UserCurves;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("process_air_inlet_node_name")]
public string process_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("process_air_outlet_node_name")]
public string process_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_inlet_node_name")]
public string regeneration_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_fan_inlet_node_name")]
public string regeneration_fan_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leaving_maximum_humidity_ratio_setpoint")]
public float leaving_maximum_humidity_ratio_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_process_air_flow_rate")]
public float nominal_process_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_process_air_velocity")]
public float nominal_process_air_velocity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotor_power")]
public float rotor_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_coil_object_type")]
public RegenerationcoilobjecttypeType regeneration_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_coil_name")]
public string regeneration_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_fan_object_type")]
public RegenerationfanobjecttypeType regeneration_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_fan_name")]
public string regeneration_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("performance_model_type")]
public PerformancemodeltypeType performance_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leaving_dry_bulb_function_of_entering_dry_bulb_and_humidity_ratio_curve_name")]
public string leaving_dry_bulb_function_of_entering_dry_bulb_and_humidity_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leaving_dry_bulb_function_of_air_velocity_curve_name")]
public string leaving_dry_bulb_function_of_air_velocity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leaving_humidity_ratio_function_of_entering_dry_bulb_and_humidity_ratio_curve_nam" +
    "e")]
public string leaving_humidity_ratio_function_of_entering_dry_bulb_and_humidity_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("leaving_humidity_ratio_function_of_air_velocity_curve_name")]
public string leaving_humidity_ratio_function_of_air_velocity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_energy_function_of_entering_dry_bulb_and_humidity_ratio_curve_name")]
public string regeneration_energy_function_of_entering_dry_bulb_and_humidity_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_energy_function_of_air_velocity_curve_name")]
public string regeneration_energy_function_of_air_velocity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_velocity_function_of_entering_dry_bulb_and_humidity_ratio_curve_name" +
    "")]
public string regeneration_velocity_function_of_entering_dry_bulb_and_humidity_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_velocity_function_of_air_velocity_curve_name")]
public string regeneration_velocity_function_of_air_velocity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_regeneration_temperature")]
public float nominal_regeneration_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Type of setpoint control: LeavingMaximumHumidityRatioSetpoint means that the unit is controlled to deliver air at the Leaving Max Humidity Ratio Setpoint (see below), SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity ratio setpoint is the System Node Humidity Ratio Max property of the Process Air Outlet Node. A Setpoint object must be used to control this setpoint. Both control types use bypass dampers to prevent over drying.")]
        public enum ControltypeType
        {
        }
        
        [Description("heating coil type works with gas, electric, hot water and steam heating coils")]
        public enum RegenerationcoilobjecttypeType
        {
        }
        
        [Description("Type of fan object for regeneration air. When using the Default Performance Model" +
            " Type (see below), only Fan:VariableVolume or Fan:SystemModel are valid.")]
        public enum RegenerationfanobjecttypeType
        {
        }
        
        [Description(@"Specifies whether the default performance model or user-specified curves should be used to model the performance. The default model is a generic solid desiccant wheel using performance curves of the form: curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2 + C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2 + C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel) edb = process entering dry-bulb temperature [C] ew  = process entering humidity ratio [kgWater/kgDryAir] vel = process air velocity [m/s] If UserCurves are specified, then performance is calculated as follows: Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve) Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve) Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve) Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)")]
        public enum PerformancemodeltypeType
        {
        }
    }
    
    [JsonProperty("Dehumidifier:Desiccant:System")]
    [Description(@"This compound object models a desiccant heat exchanger, an optional heater, and associated fans. The process air stream is the air which is dehumidified. The regeneration air stream is the air which is heated to regenerate the desiccant. The desiccant heat exchanger transfers both sensible and latent energy between the process and regeneration air streams. The desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.")]
    public class Dehumidifier_Desiccant_System
    {
        
        private void HeatExchanger:Desiccant:BalancedFlow;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("desiccant_heat_exchanger_object_type")]
public DesiccantheatexchangerobjecttypeType desiccant_heat_exchanger_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("desiccant_heat_exchanger_name")]
public string desiccant_heat_exchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_fan_object_type")]
public RegenerationairfanobjecttypeType regeneration_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_fan_name")]
public string regeneration_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_fan_placement")]
public RegenerationairfanplacementType regeneration_air_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (RegenerationairfanplacementType)DrawThrough;

[JsonProperty("regeneration_air_heater_object_type")]
public RegenerationairheaterobjecttypeType regeneration_air_heater_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_air_heater_name")]
public string regeneration_air_heater_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("regeneration_inlet_air_setpoint_temperature")]
public float regeneration_inlet_air_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)46;

[JsonProperty("companion_cooling_coil_object_type")]
public CompanioncoolingcoilobjecttypeType companion_cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("companion_cooling_coil_name")]
public string companion_cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("companion_cooling_coil_upstream_of_dehumidifier_process_inlet")]
public CompanioncoolingcoilupstreamofdehumidifierprocessinletType companion_cooling_coil_upstream_of_dehumidifier_process_inlet
{
    get
    {
    }
    set
    {
    }
}
 = (CompanioncoolingcoilupstreamofdehumidifierprocessinletType)No;

[JsonProperty("companion_coil_regeneration_air_heating")]
public CompanioncoilregenerationairheatingType companion_coil_regeneration_air_heating
{
    get
    {
    }
    set
    {
    }
}
 = (CompanioncoilregenerationairheatingType)No;

[JsonProperty("exhaust_fan_maximum_flow_rate")]
public float exhaust_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_fan_maximum_power")]
public float exhaust_fan_maximum_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_fan_power_curve_name")]
public string exhaust_fan_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DesiccantheatexchangerobjecttypeType
        {
        }
        
        public enum RegenerationairfanobjecttypeType
        {
        }
        
        public enum RegenerationairfanplacementType
        {
        }
        
        [Description(@"works with gas, electric, hot water and steam heating coils. For autosizing the regeneration air heating coil the Design Coil Inlet Air Condition used is the outdoor air condition if the desiccant system is on the primary air loop, or else if the desiccant system is on outdoor air system then it is the return air condition. The Design Coil Outlet Air Temperature is the Regeneration Inlet Air Setpoint Temperature specified in the input field below.")]
        public enum RegenerationairheaterobjecttypeType
        {
        }
        
        public enum CompanioncoolingcoilobjecttypeType
        {
        }
        
        [Description("Select Yes if the companion cooling coil is located directly upstream of the desi" +
            "ccant heat exchanger\'s process air inlet node.")]
        public enum CompanioncoolingcoilupstreamofdehumidifierprocessinletType
        {
        }
        
        public enum CompanioncoilregenerationairheatingType
        {
        }
    }
}
namespace EnergyPlus.HVACDesignObjects
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("DesignSpecification:OutdoorAir")]
    [Description("This object is used to describe general outdoor air requirements which are refere" +
        "nced by other objects.")]
    public class DesignSpecification_OutdoorAir
    {
        
        private void AirChanges/Hour;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void IndoorAirQualityProcedure;
        
        private void Maximum;
        
        private void ProportionalControlBasedOnDesignOccupancy;
        
        private void ProportionalControlBasedOnOccupancySchedule;
        
        private void Sum;
        

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_per_person")]
public float outdoor_air_flow_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_per_zone_floor_area")]
public float outdoor_air_flow_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_per_zone")]
public float outdoor_air_flow_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_air_changes_per_hour")]
public float outdoor_air_flow_air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_schedule_name")]
public string outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("proportional_control_minimum_outdoor_air_flow_rate_schedule_name")]
public string proportional_control_minimum_outdoor_air_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Flow/Person => Outdoor Air Flow per Person * Occupancy = Design Flow Rate, Flow/Area => Outdoor Air Flow per Zone Floor Area * Zone Floor Area = Design Flow Rate, Flow/Zone => Outdoor Air Flow per Zone = Design Flow Rate, AirChanges/Hour => Outdoor Air Flow Air Changes per Hour * Zone Volume adjusted for m3/s = Design Flow Rate")]
        public enum OutdoorairmethodType
        {
        }
    }
    
    [JsonProperty("DesignSpecification:ZoneAirDistribution")]
    [Description("This object is used to describe zone air distribution in terms of air distributio" +
        "n effectiveness and secondary recirculation fraction. It is referenced by Sizing" +
        ":Zone and Controller:MechanicalVentilation objects")]
    public class DesignSpecification_ZoneAirDistribution
    {
        

[JsonProperty("zone_air_distribution_effectiveness_in_cooling_mode")]
public float zone_air_distribution_effectiveness_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("zone_air_distribution_effectiveness_in_heating_mode")]
public float zone_air_distribution_effectiveness_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("zone_air_distribution_effectiveness_schedule_name")]
public string zone_air_distribution_effectiveness_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_secondary_recirculation_fraction")]
public float zone_secondary_recirculation_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_zone_ventilation_efficiency")]
public float minimum_zone_ventilation_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Sizing:Parameters")]
    [Description(@"Specifies global heating and cooling sizing factors/ratios. These ratios are applied at the zone level to all of the zone heating and cooling loads and air flow rates. Then these new loads and air flow rates are used to calculate the system level flow rates and capacities and are used in all component sizing calculations. Specifies the width (in load timesteps) of a moving average window which is used to smooth the peak load across more than one timestep.")]
    public class Sizing_Parameters
    {
        

[JsonProperty("heating_sizing_factor")]
public float heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_sizing_factor")]
public float cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("timesteps_in_averaging_window")]
public float timesteps_in_averaging_window
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Sizing:Zone")]
    [Description(@"Specifies the data needed to perform a zone design air flow calculation. The calculation is done for every sizing period included in the input. The maximum cooling and heating load and cooling, heating, and ventilation air flows are then saved for system level and zone component design calculations.")]
    public class Sizing_Zone
    {
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void DesignDay;
        
        private void DesignDayWithLimit;
        
        private void Flow/Zone;
        
        private void DesignDay;
        
        private void DesignDayWithLimit;
        
        private void Flow/Zone;
        
        private void No;
        
        private void Yes;
        
        private void ColdSupplyAir;
        
        private void NeutralDehumidifiedSupplyAir;
        
        private void NeutralSupplyAir;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_humidity_ratio")]
public float zone_cooling_design_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_design_supply_air_humidity_ratio")]
public float zone_heating_design_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_air_flow_method")]
public CoolingdesignairflowmethodType cooling_design_air_flow_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingdesignairflowmethodType)DesignDay;

[JsonProperty("cooling_design_air_flow_rate")]
public float cooling_design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cooling_minimum_air_flow_per_zone_floor_area")]
public float cooling_minimum_air_flow_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.000762;

[JsonProperty("cooling_minimum_air_flow")]
public float cooling_minimum_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cooling_minimum_air_flow_fraction")]
public float cooling_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("heating_design_air_flow_method")]
public HeatingdesignairflowmethodType heating_design_air_flow_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesignairflowmethodType)DesignDay;

[JsonProperty("heating_design_air_flow_rate")]
public float heating_design_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_maximum_air_flow_per_zone_floor_area")]
public float heating_maximum_air_flow_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002032;

[JsonProperty("heating_maximum_air_flow")]
public float heating_maximum_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1415762;

[JsonProperty("heating_maximum_air_flow_fraction")]
public float heating_maximum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("account_for_dedicated_outdoor_air_system")]
public AccountfordedicatedoutdoorairsystemType account_for_dedicated_outdoor_air_system
{
    get
    {
    }
    set
    {
    }
}
 = (AccountfordedicatedoutdoorairsystemType)No;

[JsonProperty("dedicated_outdoor_air_system_control_strategy")]
public DedicatedoutdoorairsystemcontrolstrategyType dedicated_outdoor_air_system_control_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DedicatedoutdoorairsystemcontrolstrategyType)NeutralSupplyAir;

[JsonProperty("dedicated_outdoor_air_low_setpoint_temperature_for_design")]
public string dedicated_outdoor_air_low_setpoint_temperature_for_design
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dedicated_outdoor_air_high_setpoint_temperature_for_design")]
public string dedicated_outdoor_air_high_setpoint_temperature_for_design
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        public enum CoolingdesignairflowmethodType
        {
        }
        
        public enum HeatingdesignairflowmethodType
        {
        }
        
        [Description("account for effect of dedicated outdoor air system supplying air directly to the " +
            "zone")]
        public enum AccountfordedicatedoutdoorairsystemType
        {
        }
        
        [Description("1)supply neutral ventilation air; 2)supply neutral dehumidified and reheated vent" +
            "ilation air; 3)supply cold ventilation air")]
        public enum DedicatedoutdoorairsystemcontrolstrategyType
        {
        }
    }
    
    [JsonProperty("DesignSpecification:ZoneHVAC:Sizing")]
    [Description("This object is used to describe general scalable zone HVAC equipment sizing which" +
        " are referenced by other objects.")]
    public class DesignSpecification_ZoneHVAC_Sizing
    {
        
        private void FlowPerCoolingCapacity;
        
        private void FlowPerFloorArea;
        
        private void FractionOfAutosizedCoolingAirflow;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void FlowPerFloorArea;
        
        private void FractionOfAutosizedCoolingAirflow;
        
        private void FractionOfAutosizedHeatingAirflow;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void FlowPerFloorArea;
        
        private void FlowPerHeatingCapacity;
        
        private void FractionOfAutosizedHeatingAirflow;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void CapacityPerFloorArea;
        
        private void CoolingDesignCapacity;
        
        private void FractionOfAutosizedCoolingCapacity;
        
        private void None;
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        
        private void None;
        

[JsonProperty("cooling_supply_air_flow_rate_method")]
public CoolingsupplyairflowratemethodType cooling_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingsupplyairflowratemethodType)SupplyAirFlowRate;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public float cooling_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public float cooling_fraction_of_autosized_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_per_unit_cooling_capacity")]
public float cooling_supply_air_flow_rate_per_unit_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_method")]
public NoloadsupplyairflowratemethodType no_load_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = (NoloadsupplyairflowratemethodType)SupplyAirFlowRate;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_per_floor_area")]
public float no_load_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_fraction_of_cooling_supply_air_flow_rate")]
public float no_load_fraction_of_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_fraction_of_heating_supply_air_flow_rate")]
public float no_load_fraction_of_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_method")]
public HeatingsupplyairflowratemethodType heating_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingsupplyairflowratemethodType)SupplyAirFlowRate;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public float heating_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_fraction_of_heating_supply_air_flow_rate")]
public float heating_fraction_of_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_per_unit_heating_capacity")]
public float heating_supply_air_flow_rate_per_unit_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_capacity_method")]
public CoolingdesigncapacitymethodType cooling_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingdesigncapacitymethodType)None;

[JsonProperty("cooling_design_capacity")]
public string cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_capacity_per_floor_area")]
public float cooling_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public float fraction_of_autosized_cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)None;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the Zone HVAC Equip or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area value specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the autosized cooling supply air flow rate value determined by the simulation. FlowPerCoolingCapacity => is selected when the supply air volume is determined from user specified flow per Cooling Capacity and Cooling Capacity determined by the simulation.")]
        public enum CoolingsupplyairflowratemethodType
        {
        }
        
        [Description(@"Enter the method used to determine the supply air volume flow rate When No Cooling or Heating is Required. None is used when a cooling or heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by the Zone HVAC unit and Flow Per Floor Area is specified. FractionOfAutosizedCoolingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized cooling supply air flow rate value determined by the simulation. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation.")]
        public enum NoloadsupplyairflowratemethodType
        {
        }
        
        [Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. SupplyAirFlowRate => selected when the magnitude of the heating supply air volume flow rate is specified. FlowPerFloorArea => selected when the supply air volume flow rate is determined from total floor area served by a Zone HVAC unit and user specified value of Flow Per Floor Area. FractionOfAutosizedHeatingAirflow => is selected when the supply air volume is determined from a user specified fraction and the Autosized heating supply air flow rate value determined by the simulation. FlowPerHeatingCapacity => is selected when the supply air volume is determined from user specified flow per Heating Capacity and Heating Capacity determined by the simulation.")]
        public enum HeatingsupplyairflowratemethodType
        {
        }
        
        [Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. None is used when a cooling coils is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified cooling capacity per floor area and zone floor area. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity.")]
        public enum CoolingdesigncapacitymethodType
        {
        }
        
        [Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil is not included in the Zone HVAC Equipment or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determine from user specified heating capacity per flow area and zone floor area. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("DesignSpecification:AirTerminal:Sizing")]
    [Description("This object is used to scale the sizing of air terminal units.")]
    public class DesignSpecification_AirTerminal_Sizing
    {
        

[JsonProperty("fraction_of_design_cooling_load")]
public float fraction_of_design_cooling_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_design_supply_air_temperature_difference_ratio")]
public float cooling_design_supply_air_temperature_difference_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fraction_of_design_heating_load")]
public float fraction_of_design_heating_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heating_design_supply_air_temperature_difference_ratio")]
public float heating_design_supply_air_temperature_difference_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fraction_of_minimum_outdoor_air_flow")]
public float fraction_of_minimum_outdoor_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("Sizing:System")]
    [Description("Specifies the input needed to perform sizing calculations for a central forced ai" +
        "r system. System design air flow, heating capacity, and cooling capacity will be" +
        " calculated using this input data.")]
    public class Sizing_System
    {
        
        private void Sensible;
        
        private void Total;
        
        private void VentilationRequirement;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void DesignDay;
        
        private void Flow/System;
        
        private void FlowPerCoolingCapacity;
        
        private void FlowPerFloorArea;
        
        private void FractionOfAutosizedCoolingAirflow;
        
        private void DesignDay;
        
        private void Flow/System;
        
        private void FlowPerFloorArea;
        
        private void FlowPerHeatingCapacity;
        
        private void FractionOfAutosizedCoolingAirflow;
        
        private void FractionOfAutosizedHeatingAirflow;
        
        private void VentilationRateProcedure;
        
        private void ZoneSum;
        
        private void CapacityPerFloorArea;
        
        private void CoolingDesignCapacity;
        
        private void FractionOfAutosizedCoolingCapacity;
        
        private void None;
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        
        private void None;
        
        private void Bypass;
        
        private void OnOff;
        
        private void VAV;
        
        private void VT;
        

[JsonProperty("airloop_name")]
public string airloop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_load_to_size_on")]
public TypeofloadtosizeonType type_of_load_to_size_on
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofloadtosizeonType)Sensible;

[JsonProperty("design_outdoor_air_flow_rate")]
public string design_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("central_heating_maximum_system_air_flow_ratio")]
public string central_heating_maximum_system_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("preheat_design_temperature")]
public float preheat_design_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_design_humidity_ratio")]
public float preheat_design_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("precool_design_temperature")]
public float precool_design_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("precool_design_humidity_ratio")]
public float precool_design_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_cooling_design_supply_air_temperature")]
public float central_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_heating_design_supply_air_temperature")]
public float central_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_zone_sum_to_use")]
public TypeofzonesumtouseType type_of_zone_sum_to_use
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofzonesumtouseType)NonCoincident;

[JsonProperty("100_outdoor_air_in_cooling")]
public OutdoorairincoolingType 100_outdoor_air_in_cooling
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairincoolingType)No;

[JsonProperty("100_outdoor_air_in_heating")]
public OutdoorairinheatingType 100_outdoor_air_in_heating
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairinheatingType)No;

[JsonProperty("central_cooling_design_supply_air_humidity_ratio")]
public float central_cooling_design_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("central_heating_design_supply_air_humidity_ratio")]
public float central_heating_design_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("cooling_supply_air_flow_rate_method")]
public CoolingsupplyairflowratemethodType cooling_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingsupplyairflowratemethodType)DesignDay;

[JsonProperty("cooling_supply_air_flow_rate")]
public float cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public float cooling_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public float cooling_fraction_of_autosized_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_per_unit_cooling_capacity")]
public float cooling_supply_air_flow_rate_per_unit_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_method")]
public HeatingsupplyairflowratemethodType heating_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingsupplyairflowratemethodType)DesignDay;

[JsonProperty("heating_supply_air_flow_rate")]
public float heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public float heating_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_fraction_of_autosized_heating_supply_air_flow_rate")]
public float heating_fraction_of_autosized_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_fraction_of_autosized_cooling_supply_air_flow_rate")]
public float heating_fraction_of_autosized_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_per_unit_heating_capacity")]
public float heating_supply_air_flow_rate_per_unit_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_outdoor_air_method")]
public SystemoutdoorairmethodType system_outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (SystemoutdoorairmethodType)ZoneSum;

[JsonProperty("zone_maximum_outdoor_air_fraction")]
public float zone_maximum_outdoor_air_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_design_capacity_method")]
public CoolingdesigncapacitymethodType cooling_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingdesigncapacitymethodType)CoolingDesignCapacity;

[JsonProperty("cooling_design_capacity")]
public string cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_design_capacity_per_floor_area")]
public float cooling_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public float fraction_of_autosized_cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("central_cooling_capacity_control_method")]
public CentralcoolingcapacitycontrolmethodType central_cooling_capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CentralcoolingcapacitycontrolmethodType)OnOff;
        
        [Description(@"Specifies the basis for sizing the system supply air flow rate Sensible and Total use the zone design air flow rates to size the system supply air flow rate The cooling coil will then be sized at either the peak Sensible or Total flow rate and conditions The heating coil is always sized at the peak sensible heating load. VentilationRequirement uses the system ventilation requirement")]
        public enum TypeofloadtosizeonType
        {
        }
        
        public enum TypeofzonesumtouseType
        {
        }
        
        public enum OutdoorairincoolingType
        {
        }
        
        public enum OutdoorairinheatingType
        {
        }
        
        public enum CoolingsupplyairflowratemethodType
        {
        }
        
        public enum HeatingsupplyairflowratemethodType
        {
        }
        
        public enum SystemoutdoorairmethodType
        {
        }
        
        [Description(@"Enter the method used to determine the system cooling design capacity for scalable sizing. None is used when a cooling coils is not included in an airloop or this field may be blank. If this input field is left blank, then the design cooling capacity is set to zero. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zones served by an airloop. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
        public enum CoolingdesigncapacitymethodType
        {
        }
        
        [Description(@"Enter the method used to determine the heating design capacity for scalable sizing. None is used when a heating coil not included in an airloop or this field may be blank. If this input field is left blank, then the design heating capacity is set to zero. HeatingDesignCapacity => selected when the design heating capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design heating capacity is determined from user specified heating capacity per flow area and total floor area of heated zones served by an airloop. FractionOfAutosizedHeatingCapacity => is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity of the system.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
        
        [Description("Method used to control the coil\'s output")]
        public enum CentralcoolingcapacitycontrolmethodType
        {
        }
    }
    
    [JsonProperty("Sizing:Plant")]
    [Description(@"Specifies the input needed to autosize plant loop flow rates and equipment capacities. This information is initially used by components that use water for heating or cooling such as hot or chilled water coils to calculate their maximum water flow rates. These flow rates are then summed for use in calculating the Plant Loop flow rates.")]
    public class Sizing_Plant
    {
        
        private void Condenser;
        
        private void Cooling;
        
        private void Heating;
        
        private void Steam;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void GlobalCoolingSizingFactor;
        
        private void GlobalHeatingSizingFactor;
        
        private void LoopComponentSizingFactor;
        
        private void None;
        

[JsonProperty("plant_or_condenser_loop_name")]
public string plant_or_condenser_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_type")]
public LooptypeType loop_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_loop_exit_temperature")]
public float design_loop_exit_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_design_temperature_difference")]
public float loop_design_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_option")]
public SizingoptionType sizing_option
{
    get
    {
    }
    set
    {
    }
}
 = (SizingoptionType)NonCoincident;

[JsonProperty("zone_timesteps_in_averaging_window")]
public float zone_timesteps_in_averaging_window
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("coincident_sizing_factor_mode")]
public CoincidentsizingfactormodeType coincident_sizing_factor_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LooptypeType
        {
        }
        
        [Description("if Coincident is chosen, then sizing is based on HVAC Sizing Simulations and the " +
            "input field called Do HVAC Sizing Simulation for Sizing Periods in SimulationCon" +
            "trol must be set to Yes")]
        public enum SizingoptionType
        {
        }
        
        [Description("this is used to adjust the result for coincident sizing by applying a sizing fact" +
            "or")]
        public enum CoincidentsizingfactormodeType
        {
        }
    }
    
    [JsonProperty("OutputControl:Sizing:Style")]
    [Description("Default style for the Sizing output files is comma -- this works well for importi" +
        "ng into spreadsheet programs such as Excel(tm) but not so well for word processi" +
        "ng programs -- there tab may be a better choice. Fixed puts spaces between the \"" +
        "columns\"")]
    public class OutputControl_Sizing_Style
    {
        
        private void Comma;
        
        private void Fixed;
        
        private void Tab;
        

[JsonProperty("column_separator")]
public ColumnseparatorType column_separator
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ColumnseparatorType
        {
        }
    }
}
namespace EnergyPlus.HVACTemplates
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("HVACTemplate:Thermostat")]
    [Description(@"Zone thermostat control. Referenced schedules must be defined elsewhere in the idf. Thermostat control type is dual setpoint with deadband. It is not necessary to create a thermostat object for every zone, only for each unique set of setpoint schedules. For example, an office building may have two thermostat objects, one for ""Office"" and one for ""Storage"".")]
    public class HVACTemplate_Thermostat
    {
        

[JsonProperty("heating_setpoint_schedule_name")]
public string heating_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_heating_setpoint")]
public float constant_heating_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_setpoint_schedule_name")]
public string cooling_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_cooling_setpoint")]
public float constant_cooling_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("HVACTemplate:Zone:IdealLoadsAirSystem")]
    [Description("Zone with ideal air system that meets heating or cooling loads")]
    public class HVACTemplate_Zone_IdealLoadsAirSystem
    {
        
        private void LimitCapacity;
        
        private void LimitFlowRate;
        
        private void LimitFlowRateAndCapacity;
        
        private void NoLimit;
        
        private void LimitCapacity;
        
        private void LimitFlowRate;
        
        private void LimitFlowRateAndCapacity;
        
        private void NoLimit;
        
        private void ConstantSensibleHeatRatio;
        
        private void ConstantSupplyHumidityRatio;
        
        private void Humidistat;
        
        private void None;
        
        private void ConstantSupplyHumidityRatio;
        
        private void Humidistat;
        
        private void None;
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void None;
        
        private void Sum;
        
        private void CO2Setpoint;
        
        private void None;
        
        private void OccupancySchedule;
        
        private void DifferentialDryBulb;
        
        private void DifferentialEnthalpy;
        
        private void NoEconomizer;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_supply_air_temperature")]
public float maximum_heating_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("minimum_cooling_supply_air_temperature")]
public float minimum_cooling_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("maximum_heating_supply_air_humidity_ratio")]
public float maximum_heating_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0156;

[JsonProperty("minimum_cooling_supply_air_humidity_ratio")]
public float minimum_cooling_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0077;

[JsonProperty("heating_limit")]
public HeatinglimitType heating_limit
{
    get
    {
    }
    set
    {
    }
}
 = (HeatinglimitType)NoLimit;

[JsonProperty("maximum_heating_air_flow_rate")]
public string maximum_heating_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_sensible_heating_capacity")]
public string maximum_sensible_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_limit")]
public CoolinglimitType cooling_limit
{
    get
    {
    }
    set
    {
    }
}
 = (CoolinglimitType)NoLimit;

[JsonProperty("maximum_cooling_air_flow_rate")]
public string maximum_cooling_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_total_cooling_capacity")]
public string maximum_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_availability_schedule_name")]
public string heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_availability_schedule_name")]
public string cooling_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)ConstantSensibleHeatRatio;

[JsonProperty("cooling_sensible_heat_ratio")]
public float cooling_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("dehumidification_setpoint")]
public float dehumidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("humidification_control_type")]
public HumidificationcontroltypeType humidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidificationcontroltypeType)None;

[JsonProperty("humidification_setpoint")]
public float humidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)None;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_controlled_ventilation_type")]
public DemandcontrolledventilationtypeType demand_controlled_ventilation_type
{
    get
    {
    }
    set
    {
    }
}
 = (DemandcontrolledventilationtypeType)None;

[JsonProperty("outdoor_air_economizer_type")]
public OutdooraireconomizertypeType outdoor_air_economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutdooraireconomizertypeType)NoEconomizer;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;
        
        public enum HeatinglimitType
        {
        }
        
        public enum CoolinglimitType
        {
        }
        
        [Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
        public enum HumidificationcontroltypeType
        {
        }
        
        [Description(@"None means there is no outdoor air and all related fields will be ignored Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        [Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
        public enum DemandcontrolledventilationtypeType
        {
        }
        
        [Description("DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow r" +
            "ate when there is a cooling load and the outdoor air temperature or enthalpy is " +
            "below the zone exhaust air temperature or enthalpy.")]
        public enum OutdooraireconomizertypeType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:BaseboardHeat")]
    [Description("Zone baseboard heating system.")]
    public class HVACTemplate_Zone_BaseboardHeat
    {
        
        private void Electric;
        
        private void HotWater;
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)HotWater;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:FanCoil")]
    [Description("4 pipe fan coil unit with optional outdoor air.")]
    public class HVACTemplate_Zone_FanCoil
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void HeatExchangerAssistedChilledWater;
        
        private void Electric;
        
        private void HotWater;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void ASHRAE90VariableFan;
        
        private void ConstantFanVariableFlow;
        
        private void CyclingFan;
        
        private void MultiSpeedFan;
        
        private void VariableFanConstantFlow;
        
        private void VariableFanVariableFlow;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)ChilledWater;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_design_setpoint")]
public float cooling_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)14;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)HotWater;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_supply_air_flow_ratio")]
public float low_speed_supply_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("medium_speed_supply_air_flow_ratio")]
public float medium_speed_supply_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.66;

[JsonProperty("outdoor_air_schedule_name")]
public string outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above) Te" +
            "mperatureDifference = use the value from Zone Cooling Design Supply Air Temperat" +
            "ure Difference")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above) Te" +
            "mperatureDifference = use the value from Zone Heating Design Supply Air Temperat" +
            "ure Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("If this field is left blank, it will default to CyclingFan if a Dedicated Outdoor" +
            " Air System is specified (see above), otherwise it will default to ConstantFanVa" +
            "riableFlow.")]
        public enum CapacitycontrolmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:PTAC")]
    [Description("Packaged Terminal Air Conditioner")]
    public class HVACTemplate_Zone_PTAC
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void SingleSpeedDX;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void None;
        
        private void SingleZoneVAV;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)SingleSpeedDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cooling_cop")]
public float cooling_coil_gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)Electric;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_capacity")]
public string heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)14;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolmethodType)None;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
            "mperature Difference")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        public enum CapacitycontrolmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:PTHP")]
    [Description("Packaged Terminal Heat Pump")]
    public class HVACTemplate_Zone_PTHP
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void SingleSpeedDX;
        
        private void SingleSpeedDXHeatPump;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void None;
        
        private void SingleZoneVAV;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)SingleSpeedDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cop")]
public float cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heat_pump_heating_coil_type")]
public HeatpumpheatingcoiltypeType heat_pump_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpheatingcoiltypeType)SingleSpeedDXHeatPump;

[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string heat_pump_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string heat_pump_heating_coil_gross_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public float heat_pump_heating_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.75;

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public float heat_pump_heating_minimum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public float heat_pump_defrost_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("heat_pump_defrost_strategy")]
public HeatpumpdefroststrategyType heat_pump_defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefroststrategyType)ReverseCycle;

[JsonProperty("heat_pump_defrost_control")]
public HeatpumpdefrostcontrolType heat_pump_defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefrostcontrolType)Timed;

[JsonProperty("heat_pump_defrost_time_period_fraction")]
public float heat_pump_defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("supplemental_heating_coil_type")]
public SupplementalheatingcoiltypeType supplemental_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplementalheatingcoiltypeType)Electric;

[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string supplemental_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_capacity")]
public string supplemental_heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature")]
public float supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("supplemental_gas_heating_coil_efficiency")]
public float supplemental_gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("supplemental_gas_heating_coil_parasitic_electric_load")]
public float supplemental_gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)14;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolmethodType)None;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatpumpheatingcoiltypeType
        {
        }
        
        public enum HeatpumpdefroststrategyType
        {
        }
        
        public enum HeatpumpdefrostcontrolType
        {
        }
        
        public enum SupplementalheatingcoiltypeType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
            "mperature Difference")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        public enum CapacitycontrolmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:WaterToAirHeatPump")]
    [Description("Water to Air Heat Pump to be used with HVACTemplate:Plant:MixedWaterLoop")]
    public class HVACTemplate_Zone_WaterToAirHeatPump
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Cooling:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Heating:WaterToAirHeatPump:EquationFit;
        
        private void Electric;
        
        private void HotWater;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void Constant;
        
        private void ConstantOnDemand;
        
        private void Cycling;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)Coil:Cooling:WaterToAirHeatPump:EquationFit;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cop")]
public float cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.5;

[JsonProperty("heat_pump_heating_coil_type")]
public HeatpumpheatingcoiltypeType heat_pump_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpheatingcoiltypeType)Coil:Heating:WaterToAirHeatPump:EquationFit;

[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string heat_pump_heating_coil_gross_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public float heat_pump_heating_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4.2;

[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string supplemental_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_capacity")]
public string supplemental_heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("heat_pump_time_constant")]
public float heat_pump_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("fraction_of_on_cycle_power_use")]
public float fraction_of_on_cycle_power_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("heat_pump_fan_delay_time")]
public float heat_pump_fan_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_type")]
public SupplementalheatingcoiltypeType supplemental_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplementalheatingcoiltypeType)Electric;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)14;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("heat_pump_coil_water_flow_mode")]
public HeatpumpcoilwaterflowmodeType heat_pump_coil_water_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpcoilwaterflowmodeType)Cycling;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatpumpheatingcoiltypeType
        {
        }
        
        public enum SupplementalheatingcoiltypeType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
            "mperature Difference")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
        public enum HeatpumpcoilwaterflowmodeType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:VRF")]
    [Description("Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating co" +
        "ils (air-to-air or water-to-air heat pump). The VRF terminal units are served by" +
        " an HVACTemplate:System:VRF system.")]
    public class HVACTemplate_Zone_VRF
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void None;
        
        private void VariableRefrigerantFlowDX;
        
        private void None;
        
        private void VariableRefrigerantFlowDX;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_vrf_system_name")]
public string template_vrf_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_total_heating_capacity_sizing_ratio")]
public float rated_total_heating_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_cooling_supply_air_flow_rate")]
public string no_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_heating_supply_air_flow_rate")]
public string no_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_placement")]
public SupplyairfanplacementType supply_air_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyairfanplacementType)BlowThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)VariableRefrigerantFlowDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heat_pump_heating_coil_type")]
public HeatpumpheatingcoiltypeType heat_pump_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpheatingcoiltypeType)VariableRefrigerantFlowDX;

[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string heat_pump_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string heat_pump_heating_coil_gross_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_terminal_unit_on_parasitic_electric_energy_use")]
public float zone_terminal_unit_on_parasitic_electric_energy_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("zone_terminal_unit_off_parasitic_electric_energy_use")]
public float zone_terminal_unit_off_parasitic_electric_energy_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("dedicated_outdoor_air_system_name")]
public string dedicated_outdoor_air_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)14;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        [Description("Select fan placement as either blow through or draw through.")]
        public enum SupplyairfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatpumpheatingcoiltypeType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Cooling Design Supply Air Te" +
            "mperature Difference")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:Unitary")]
    [Description("Zone terminal unit, constant volume, no controls.")]
    public class HVACTemplate_Zone_Unitary
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_unitary_system_name")]
public string template_unitary_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Cooling Design Supply Air Temperature")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir Heating Design Supply Air Temperature")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:VAV")]
    [Description("Zone terminal unit, variable volume, reheat optional. For heating, this unit acti" +
        "vates reheat coil first, then increases airflow (if reverse action specified).")]
    public class HVACTemplate_Zone_VAV
    {
        
        private void Constant;
        
        private void FixedFlowRate;
        
        private void Scheduled;
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void Normal;
        
        private void Reverse;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_vav_system_name")]
public string template_vav_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_input_method")]
public ZoneminimumairflowinputmethodType zone_minimum_air_flow_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneminimumairflowinputmethodType)Constant;

[JsonProperty("constant_minimum_air_flow_fraction")]
public float constant_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("fixed_minimum_air_flow_rate")]
public float fixed_minimum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string minimum_air_flow_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("reheat_coil_type")]
public ReheatcoiltypeType reheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReheatcoiltypeType)None;

[JsonProperty("reheat_coil_availability_schedule_name")]
public string reheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("damper_heating_action")]
public DamperheatingactionType damper_heating_action
{
    get
    {
    }
    set
    {
    }
}
 = (DamperheatingactionType)Reverse;

[JsonProperty("maximum_flow_per_zone_floor_area_during_reheat")]
public string maximum_flow_per_zone_floor_area_during_reheat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_fraction_during_reheat")]
public string maximum_flow_fraction_during_reheat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name_for_control")]
public string design_specification_outdoor_air_object_name_for_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string design_specification_outdoor_air_object_name_for_sizing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
            "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
            "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
            " Flow")]
        public enum ZoneminimumairflowinputmethodType
        {
        }
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum ReheatcoiltypeType
        {
        }
        
        public enum DamperheatingactionType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:VAV:FanPowered")]
    [Description("Zone terminal unit, fan powered variable volume, reheat optional. Referenced sche" +
        "dules must be defined elsewhere in the idf.")]
    public class HVACTemplate_Zone_VAV_FanPowered
    {
        
        private void Parallel;
        
        private void ParallelFromPlenum;
        
        private void Series;
        
        private void SeriesFromPlenum;
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_vav_system_name")]
public string template_vav_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_supply_air_maximum_flow_rate")]
public string primary_supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_supply_air_minimum_flow_fraction")]
public string primary_supply_air_minimum_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("secondary_supply_air_maximum_flow_rate")]
public string secondary_supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("flow_type")]
public FlowtypeType flow_type
{
    get
    {
    }
    set
    {
    }
}
 = (FlowtypeType)Parallel;

[JsonProperty("parallel_fan_on_flow_fraction")]
public string parallel_fan_on_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("reheat_coil_type")]
public ReheatcoiltypeType reheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReheatcoiltypeType)Electric;

[JsonProperty("reheat_coil_availability_schedule_name")]
public string reheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("fan_delta_pressure")]
public float fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("fan_motor_efficiency")]
public float fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("zone_piu_fan_schedule_name")]
public string zone_piu_fan_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FlowtypeType
        {
        }
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum ReheatcoiltypeType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:VAV:HeatAndCool")]
    [Description("VAV system with VAV for both heating and cooling and optional reheat coil. For he" +
        "ating, this unit increases airflow first, then activates reheat coil.")]
    public class HVACTemplate_Zone_VAV_HeatAndCool
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_vav_system_name")]
public string template_vav_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_minimum_air_flow_fraction")]
public float constant_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string design_specification_outdoor_air_object_name_for_sizing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_type")]
public ReheatcoiltypeType reheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReheatcoiltypeType)None;

[JsonProperty("reheat_coil_availability_schedule_name")]
public string reheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum ReheatcoiltypeType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:ConstantVolume")]
    [Description("Zone terminal unit, constant volume, reheat optional. Referenced schedules must b" +
        "e defined elsewhere in the idf.")]
    public class HVACTemplate_Zone_ConstantVolume
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_constant_volume_system_name")]
public string template_constant_volume_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_type")]
public ReheatcoiltypeType reheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReheatcoiltypeType)None;

[JsonProperty("reheat_coil_availability_schedule_name")]
public string reheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum ReheatcoiltypeType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description("SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperat" +
            "ure TemperatureDifference = use the value from Zone Heating Design Supply Air Te" +
            "mperature Difference")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Zone:DualDuct")]
    [Description("Zone terminal unit, dual-duct, constant or variable volume.")]
    public class HVACTemplate_Zone_DualDuct
    {
        
        private void DetailedSpecification;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Maximum;
        
        private void Sum;
        
        private void Electric;
        
        private void HotWater;
        
        private void None;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        
        private void SupplyAirTemperature;
        
        private void SystemSupplyAirTemperature;
        
        private void TemperatureDifference;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_dual_duct_system_name")]
public string template_dual_duct_system_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_thermostat_name")]
public string template_thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_maximum_flow_rate")]
public string supply_air_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_heating_sizing_factor")]
public float zone_heating_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_cooling_sizing_factor")]
public float zone_cooling_sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_fraction")]
public float zone_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("outdoor_air_method")]
public OutdoorairmethodType outdoor_air_method
{
    get
    {
    }
    set
    {
    }
}
 = (OutdoorairmethodType)Flow/Person;

[JsonProperty("outdoor_air_flow_rate_per_person")]
public float outdoor_air_flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00944;

[JsonProperty("outdoor_air_flow_rate_per_zone_floor_area")]
public float outdoor_air_flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outdoor_air_flow_rate_per_zone")]
public float outdoor_air_flow_rate_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_outdoor_air_object_name_for_sizing")]
public string design_specification_outdoor_air_object_name_for_sizing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zone_air_distribution_object_name")]
public string design_specification_zone_air_distribution_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name_for_control")]
public string design_specification_outdoor_air_object_name_for_control
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_supply_plenum_name")]
public string cold_supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_supply_plenum_name")]
public string hot_supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_type")]
public BaseboardheatingtypeType baseboard_heating_type
{
    get
    {
    }
    set
    {
    }
}
 = (BaseboardheatingtypeType)None;

[JsonProperty("baseboard_heating_availability_schedule_name")]
public string baseboard_heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("baseboard_heating_capacity")]
public string baseboard_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_cooling_design_supply_air_temperature_input_method")]
public ZonecoolingdesignsupplyairtemperatureinputmethodType zone_cooling_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZonecoolingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_cooling_design_supply_air_temperature")]
public float zone_cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("zone_cooling_design_supply_air_temperature_difference")]
public float zone_cooling_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.11;

[JsonProperty("zone_heating_design_supply_air_temperature_input_method")]
public ZoneheatingdesignsupplyairtemperatureinputmethodType zone_heating_design_supply_air_temperature_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneheatingdesignsupplyairtemperatureinputmethodType)SystemSupplyAirTemperature;

[JsonProperty("zone_heating_design_supply_air_temperature")]
public float zone_heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("zone_heating_design_supply_air_temperature_difference")]
public float zone_heating_design_supply_air_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;
        
        [Description(@"Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area, and Outdoor Air Flow Rate per Zone. DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead references design specification objects named in the fields Design Specification Outdoor Air Object Name and Design Specification Zone Air Distribution Object Name.")]
        public enum OutdoorairmethodType
        {
        }
        
        public enum BaseboardheatingtypeType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint")]
        public enum ZonecoolingdesignsupplyairtemperatureinputmethodType
        {
        }
        
        [Description(@"SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint")]
        public enum ZoneheatingdesignsupplyairtemperatureinputmethodType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:VRF")]
    [Description("Variable refrigerant flow (VRF) heat pump condensing unit. Serves one or more VRF" +
        " zone terminal units (HVACTemplate:Zone:VRF).")]
    public class HVACTemplate_System_VRF
    {
        
        private void LoadPriority;
        
        private void MasterThermostatPriority;
        
        private void Scheduled;
        
        private void ThermostatOffsetPriority;
        
        private void ZonePriority;
        
        private void No;
        
        private void Yes;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gross_rated_cooling_cop")]
public float gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.3;

[JsonProperty("minimum_outdoor_temperature_in_cooling_mode")]
public float minimum_outdoor_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-6;

[JsonProperty("maximum_outdoor_temperature_in_cooling_mode")]
public float maximum_outdoor_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)43;

[JsonProperty("gross_rated_heating_capacity")]
public string gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_heating_capacity_sizing_ratio")]
public float rated_heating_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("gross_rated_heating_cop")]
public float gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.4;

[JsonProperty("minimum_outdoor_temperature_in_heating_mode")]
public float minimum_outdoor_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-20;

[JsonProperty("maximum_outdoor_temperature_in_heating_mode")]
public float maximum_outdoor_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("minimum_heat_pump_part_load_ratio")]
public float minimum_heat_pump_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.15;

[JsonProperty("zone_name_for_master_thermostat_location")]
public string zone_name_for_master_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("master_thermostat_priority_control_type")]
public MasterthermostatprioritycontroltypeType master_thermostat_priority_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MasterthermostatprioritycontroltypeType)MasterThermostatPriority;

[JsonProperty("thermostat_priority_schedule_name")]
public string thermostat_priority_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_pump_waste_heat_recovery")]
public HeatpumpwasteheatrecoveryType heat_pump_waste_heat_recovery
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpwasteheatrecoveryType)No;

[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode")]
public float equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("vertical_height_used_for_piping_correction_factor")]
public float vertical_height_used_for_piping_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode")]
public float equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("crankcase_heater_power_per_compressor")]
public float crankcase_heater_power_per_compressor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)33;

[JsonProperty("number_of_compressors")]
public float number_of_compressors
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public float ratio_of_compressor_size_to_total_compressor_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)Resistive;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("water_condenser_volume_flow_rate")]
public string water_condenser_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("evaporative_condenser_air_flow_rate")]
public string evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)Electricity;

[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public float minimum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-15;

[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public float maximum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)45;
        
        [Description("Choose a thermostat control logic scheme. If these control types fail to control " +
            "zone temperature within a reasonable limit, consider using multiple VRF systems")]
        public enum MasterthermostatprioritycontroltypeType
        {
        }
        
        [Description("This field is reserved for future use. The only valid choice is No.")]
        public enum HeatpumpwasteheatrecoveryType
        {
        }
        
        [Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
            " to cooling to melt frost formation on the condenser coil. The resistive strateg" +
            "y uses a resistive heater to melt the frost.")]
        public enum DefroststrategyType
        {
        }
        
        [Description("Choose a defrost control type. Either use a fixed Timed defrost period or select " +
            "OnDemand to defrost only when necessary.")]
        public enum DefrostcontrolType
        {
        }
        
        [Description("Select either an air cooled or evaporatively cooled condenser.")]
        public enum CondensertypeType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:Unitary")]
    [Description("Unitary furnace with air conditioner")]
    public class HVACTemplate_System_Unitary
    {
        
        private void None;
        
        private void SingleSpeedDX;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void LockoutWithCompressor;
        
        private void LockoutWithHeating;
        
        private void NoLockout;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void CycleOnAny;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void CoolReheatDesuperheater;
        
        private void CoolReheatHeatingCoil;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_zone_or_thermostat_location_name")]
public string control_zone_or_thermostat_location_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_maximum_flow_rate")]
public string supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)600;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)SingleSpeedDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_supply_air_temperature")]
public float cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cop")]
public float cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_supply_air_temperature")]
public float heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("heating_coil_capacity")]
public string heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_upper_temperature_limit")]
public float economizer_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lower_temperature_limit")]
public float economizer_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_upper_enthalpy_limit")]
public float economizer_upper_enthalpy_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)BlowThrough;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_setpoint")]
public float dehumidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_setpoint")]
public float humidifier_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        [Description(@"None = meet sensible cooling load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with main heating coil. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:UnitaryHeatPump:AirToAir")]
    [Description("Unitary furnace with electric air-to-air heat pump")]
    public class HVACTemplate_System_UnitaryHeatPump_AirToAir
    {
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void SingleSpeedDX;
        
        private void SingleSpeedDXHeatPump;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void LockoutWithCompressor;
        
        private void LockoutWithHeating;
        
        private void NoLockout;
        
        private void CycleOnAny;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void ElectricSteam;
        
        private void None;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_zone_or_thermostat_location_name")]
public string control_zone_or_thermostat_location_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)BlowThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)600;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)SingleSpeedDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_supply_air_temperature")]
public float cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cop")]
public float cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heat_pump_heating_coil_type")]
public HeatpumpheatingcoiltypeType heat_pump_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpheatingcoiltypeType)SingleSpeedDXHeatPump;

[JsonProperty("heat_pump_heating_coil_availability_schedule_name")]
public string heat_pump_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_supply_air_temperature")]
public float heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("heat_pump_heating_coil_gross_rated_capacity")]
public string heat_pump_heating_coil_gross_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heat_pump_heating_coil_rated_cop")]
public float heat_pump_heating_coil_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.75;

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public float heat_pump_heating_minimum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public float heat_pump_defrost_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("heat_pump_defrost_strategy")]
public HeatpumpdefroststrategyType heat_pump_defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefroststrategyType)ReverseCycle;

[JsonProperty("heat_pump_defrost_control")]
public HeatpumpdefrostcontrolType heat_pump_defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefrostcontrolType)Timed;

[JsonProperty("heat_pump_defrost_time_period_fraction")]
public float heat_pump_defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("supplemental_heating_coil_type")]
public SupplementalheatingcoiltypeType supplemental_heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplementalheatingcoiltypeType)Electric;

[JsonProperty("supplemental_heating_coil_availability_schedule_name")]
public string supplemental_heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_capacity")]
public string supplemental_heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature")]
public float supplemental_heating_coil_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("supplemental_gas_heating_coil_efficiency")]
public float supplemental_gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("supplemental_gas_heating_coil_parasitic_electric_load")]
public float supplemental_gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public float economizer_maximum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_enthalpy")]
public float economizer_maximum_limit_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public float economizer_minimum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_setpoint")]
public float humidifier_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatpumpheatingcoiltypeType
        {
        }
        
        public enum HeatpumpdefroststrategyType
        {
        }
        
        public enum HeatpumpdefrostcontrolType
        {
        }
        
        public enum SupplementalheatingcoiltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:UnitarySystem")]
    [Description("Unitary HVAC system with optional cooling and heating. Supports DX and chilled wa" +
        "ter, cooling, gas, electric, and hot water heating, air-to-air and water-to-air " +
        "heat pumps.")]
    public class HVACTemplate_System_UnitarySystem
    {
        
        private void Load;
        
        private void SetPoint;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void HeatExchangerAssistedChilledWater;
        
        private void HeatExchangerAssistedDX;
        
        private void MultiSpeedDX;
        
        private void None;
        
        private void SingleSpeedDX;
        
        private void SingleSpeedDXWaterCooled;
        
        private void TwoSpeedDX;
        
        private void TwoStageDX;
        
        private void TwoStageHumidityControlDX;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void MultiSpeedDXHeatPumpAirSource;
        
        private void MultiStageElectric;
        
        private void MultiStageGas;
        
        private void None;
        
        private void SingleSpeedDXHeatPumpAirSource;
        
        private void SingleSpeedDXHeatPumpWaterSource;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void DesuperHeater;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void LockoutWithCompressor;
        
        private void LockoutWithHeating;
        
        private void NoLockout;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void Plate;
        
        private void Rotary;
        
        private void ExhaustAirRecirculation;
        
        private void ExhaustOnly;
        
        private void MinimumExhaustTemperature;
        
        private void None;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)Load;

[JsonProperty("control_zone_or_thermostat_location_name")]
public string control_zone_or_thermostat_location_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_operating_mode_schedule_name")]
public string supply_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)BlowThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)600;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)SingleSpeedDX;

[JsonProperty("number_of_speeds_for_cooling")]
public float number_of_speeds_for_cooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_supply_air_temperature")]
public float cooling_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("dx_cooling_coil_gross_rated_total_capacity")]
public string dx_cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dx_cooling_coil_gross_rated_sensible_heat_ratio")]
public string dx_cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dx_cooling_coil_gross_rated_cop")]
public float dx_cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)Gas;

[JsonProperty("number_of_speeds_or_stages_for_heating")]
public float number_of_speeds_or_stages_for_heating
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_supply_air_temperature")]
public float heating_design_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("heating_coil_gross_rated_capacity")]
public string heating_coil_gross_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_pump_heating_coil_gross_rated_cop")]
public float heat_pump_heating_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.75;

[JsonProperty("heat_pump_heating_minimum_outdoor_dry_bulb_temperature")]
public float heat_pump_heating_minimum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("heat_pump_defrost_maximum_outdoor_dry_bulb_temperature")]
public float heat_pump_defrost_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("heat_pump_defrost_strategy")]
public HeatpumpdefroststrategyType heat_pump_defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefroststrategyType)ReverseCycle;

[JsonProperty("heat_pump_defrost_control")]
public HeatpumpdefrostcontrolType heat_pump_defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpdefrostcontrolType)Timed;

[JsonProperty("heat_pump_defrost_time_period_fraction")]
public float heat_pump_defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("supplemental_heating_or_reheat_coil_type")]
public SupplementalheatingorreheatcoiltypeType supplemental_heating_or_reheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplementalheatingorreheatcoiltypeType)None;

[JsonProperty("supplemental_heating_or_reheat_coil_availability_schedule_name")]
public string supplemental_heating_or_reheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_or_reheat_coil_capacity")]
public string supplemental_heating_or_reheat_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supplemental_heating_or_reheat_coil_maximum_outdoor_dry_bulb_temperature")]
public float supplemental_heating_or_reheat_coil_maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("supplemental_gas_heating_or_reheat_coil_efficiency")]
public float supplemental_gas_heating_or_reheat_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("supplemental_gas_heating_or_reheat_coil_parasitic_electric_load")]
public float supplemental_gas_heating_or_reheat_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public float economizer_maximum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_enthalpy")]
public float economizer_maximum_limit_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public float economizer_minimum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HeatrecoveryheatexchangertypeType heat_recovery_heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryheatexchangertypeType)Plate;

[JsonProperty("heat_recovery_frost_control_type")]
public HeatrecoveryfrostcontroltypeType heat_recovery_frost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryfrostcontroltypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_relative_humidity_setpoint")]
public float dehumidification_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string dehumidification_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_relative_humidity_setpoint")]
public float humidifier_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string humidifier_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_option")]
public SizingoptionType sizing_option
{
    get
    {
    }
    set
    {
    }
}
 = (SizingoptionType)NonCoincident;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)300;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Load control requires a Controlling Zone name. SetPoint control requires set poin" +
            "ts at coil outlet nodes. The user must add appropriate SetpointManager objects t" +
            "o the idf file.")]
        public enum ControltypeType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum HeatpumpdefroststrategyType
        {
        }
        
        public enum HeatpumpdefrostcontrolType
        {
        }
        
        public enum SupplementalheatingorreheatcoiltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        public enum HeatrecoveryheatexchangertypeType
        {
        }
        
        public enum HeatrecoveryfrostcontroltypeType
        {
        }
        
        [Description(@"None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil If no reheat coil specified, cold supply temps may occur. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
            "oincident zone air flow rates.")]
        public enum SizingoptionType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:VAV")]
    [Description("Variable Air Volume (VAV) air loop with optional heating coil and optional prehea" +
        "t.")]
    public class HVACTemplate_System_VAV
    {
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void FixedMinimum;
        
        private void ProportionalMinimum;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void NoLockout;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        
        private void CycleOnAny;
        
        private void CycleOnAnyZoneFansOnly;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void Warmest;
        
        private void WarmestTemperatureFirst;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void CoolReheat;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void No;
        
        private void Yes;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_maximum_flow_rate")]
public string supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_minimum_flow_rate")]
public string supply_fan_minimum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)ChilledWater;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string cooling_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_design_setpoint")]
public float cooling_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)None;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_schedule_name")]
public string heating_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("preheat_coil_type")]
public PreheatcoiltypeType preheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (PreheatcoiltypeType)None;

[JsonProperty("preheat_coil_availability_schedule_name")]
public string preheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string preheat_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_coil_design_setpoint")]
public float preheat_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.2;

[JsonProperty("gas_preheat_coil_efficiency")]
public float gas_preheat_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public float gas_preheat_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_control_type")]
public MinimumoutdooraircontroltypeType minimum_outdoor_air_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MinimumoutdooraircontroltypeType)ProportionalMinimum;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_upper_temperature_limit")]
public float economizer_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lower_temperature_limit")]
public float economizer_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_upper_enthalpy_limit")]
public float economizer_upper_enthalpy_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("supply_fan_part_load_power_coefficients")]
public SupplyfanpartloadpowercoefficientsType supply_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanpartloadpowercoefficientsType)InletVaneDampers;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("cooling_coil_setpoint_reset_type")]
public CoolingcoilsetpointresettypeType cooling_coil_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoilsetpointresettypeType)None;

[JsonProperty("heating_coil_setpoint_reset_type")]
public HeatingcoilsetpointresettypeType heating_coil_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoilsetpointresettypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_control_zone_name")]
public string dehumidification_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_setpoint")]
public float dehumidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_setpoint")]
public float humidifier_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("sizing_option")]
public SizingoptionType sizing_option
{
    get
    {
    }
    set
    {
    }
}
 = (SizingoptionType)NonCoincident;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("return_fan_part_load_power_coefficients")]
public ReturnfanpartloadpowercoefficientsType return_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanpartloadpowercoefficientsType)InletVaneDampers;
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum PreheatcoiltypeType
        {
        }
        
        public enum MinimumoutdooraircontroltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum SupplyfanpartloadpowercoefficientsType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        [Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
        public enum CoolingcoilsetpointresettypeType
        {
        }
        
        [Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
        public enum HeatingcoilsetpointresettypeType
        {
        }
        
        [Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
            "required to meet the humidity setpoint.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
            "oincident zone air flow rates.")]
        public enum SizingoptionType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum ReturnfanpartloadpowercoefficientsType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:PackagedVAV")]
    [Description("Packaged Variable Air Volume (PVAV) air loop with optional heating coil and optio" +
        "nal preheat.")]
    public class HVACTemplate_System_PackagedVAV
    {
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void TwoSpeedDX;
        
        private void TwoSpeedHumidControlDX;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void FixedMinimum;
        
        private void ProportionalMinimum;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void LockoutWithCompressor;
        
        private void LockoutWithHeating;
        
        private void NoLockout;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        
        private void CycleOnAny;
        
        private void CycleOnAnyZoneFansOnly;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void Warmest;
        
        private void WarmestTemperatureFirst;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void CoolReheat;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void No;
        
        private void Yes;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_maximum_flow_rate")]
public string supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_minimum_flow_rate")]
public string supply_fan_minimum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)TwoSpeedDX;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string cooling_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_design_setpoint")]
public float cooling_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_gross_rated_total_capacity")]
public string cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_sensible_heat_ratio")]
public string cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_coil_gross_rated_cop")]
public float cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)None;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_schedule_name")]
public string heating_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("heating_coil_capacity")]
public string heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_control_type")]
public MinimumoutdooraircontroltypeType minimum_outdoor_air_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MinimumoutdooraircontroltypeType)ProportionalMinimum;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_maximum_limit_dry_bulb_temperature")]
public float economizer_maximum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_enthalpy")]
public float economizer_maximum_limit_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_minimum_limit_dry_bulb_temperature")]
public float economizer_minimum_limit_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_part_load_power_coefficients")]
public SupplyfanpartloadpowercoefficientsType supply_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanpartloadpowercoefficientsType)InletVaneDampers;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("cooling_coil_setpoint_reset_type")]
public CoolingcoilsetpointresettypeType cooling_coil_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoilsetpointresettypeType)None;

[JsonProperty("heating_coil_setpoint_reset_type")]
public HeatingcoilsetpointresettypeType heating_coil_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoilsetpointresettypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_control_zone_name")]
public string dehumidification_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_setpoint")]
public float dehumidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_setpoint")]
public float humidifier_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("sizing_option")]
public SizingoptionType sizing_option
{
    get
    {
    }
    set
    {
    }
}
 = (SizingoptionType)NonCoincident;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("return_fan_part_load_power_coefficients")]
public ReturnfanpartloadpowercoefficientsType return_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanpartloadpowercoefficientsType)InletVaneDampers;
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum MinimumoutdooraircontroltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum SupplyfanpartloadpowercoefficientsType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        [Description(@"Overrides Cooling Coil Setpoint Schedule Name None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB, to the Cooling Design Setpoint at 26.7C) WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at min supply air flow rate")]
        public enum CoolingcoilsetpointresettypeType
        {
        }
        
        [Description(@"Overrides Heating Coil Setpoint Schedule Name None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule OutdoorAirTemperatureReset = reset based on outdoor air temperature (Heating Design Setpoint at -6.7C ODB to Heating Design Setpoint minus 5.2C at 10C ODB) min supply air flow rate")]
        public enum HeatingcoilsetpointresettypeType
        {
        }
        
        [Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
            "required to meet the humidity setpoint.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
            "oincident zone air flow rates.")]
        public enum SizingoptionType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum ReturnfanpartloadpowercoefficientsType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:ConstantVolume")]
    [Description("Constant Air Volume air loop with optional chilled water cooling coil, optional h" +
        "eating coil and optional preheat.")]
    public class HVACTemplate_System_ConstantVolume
    {
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void HeatExchangerAssistedChilledWater;
        
        private void None;
        
        private void ControlZone;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Warmest;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void ControlZone;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void CycleOnAny;
        
        private void CycleOnAnyZoneFansOnly;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void Plate;
        
        private void Rotary;
        
        private void ExhaustAirRecirculation;
        
        private void ExhaustOnly;
        
        private void MinimumExhaustTemperature;
        
        private void None;
        
        private void CoolReheat;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_maximum_flow_rate")]
public string supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)600;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)ChilledWater;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_control_type")]
public CoolingcoilsetpointcontroltypeType cooling_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("cooling_coil_control_zone_name")]
public string cooling_coil_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_design_setpoint_temperature")]
public float cooling_coil_design_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string cooling_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public float cooling_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public float cooling_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)23.3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)HotWater;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_control_type")]
public HeatingcoilsetpointcontroltypeType heating_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("heating_coil_control_zone_name")]
public string heating_coil_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("heating_coil_setpoint_schedule_name")]
public string heating_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public float heating_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.8;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public float heating_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("heating_coil_capacity")]
public string heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("preheat_coil_type")]
public PreheatcoiltypeType preheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (PreheatcoiltypeType)None;

[JsonProperty("preheat_coil_availability_schedule_name")]
public string preheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_coil_design_setpoint")]
public float preheat_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.2;

[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string preheat_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_preheat_coil_efficiency")]
public float gas_preheat_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public float gas_preheat_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_upper_temperature_limit")]
public float economizer_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lower_temperature_limit")]
public float economizer_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_upper_enthalpy_limit")]
public float economizer_upper_enthalpy_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_plenum_name")]
public string supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HeatrecoveryheatexchangertypeType heat_recovery_heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryheatexchangertypeType)Plate;

[JsonProperty("heat_recovery_frost_control_type")]
public HeatrecoveryfrostcontroltypeType heat_recovery_frost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryfrostcontroltypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_control_zone_name")]
public string dehumidification_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_relative_humidity_setpoint")]
public float dehumidification_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string dehumidification_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_relative_humidity_setpoint")]
public float humidifier_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string humidifier_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)300;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum CoolingcoilsetpointcontroltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum HeatingcoilsetpointcontroltypeType
        {
        }
        
        public enum PreheatcoiltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        public enum HeatrecoveryheatexchangertypeType
        {
        }
        
        public enum HeatrecoveryfrostcontroltypeType
        {
        }
        
        [Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
            "required to meet the humidity setpoint.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:DualDuct")]
    [Description("Dual-duct constant volume or variable volume air loop")]
    public class HVACTemplate_System_DualDuct
    {
        
        private void DualFanConstantVolume;
        
        private void DualFanVariableVolume;
        
        private void SingleFanConstantVolume;
        
        private void SingleFanVariableVolume;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void None;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Warmest;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void Coldest;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void FixedMinimum;
        
        private void ProportionalMinimum;
        
        private void DifferentialDryBulb;
        
        private void DifferentialDryBulbAndEnthalpy;
        
        private void DifferentialEnthalpy;
        
        private void ElectronicEnthalpy;
        
        private void FixedDewPointAndDryBulb;
        
        private void FixedDryBulb;
        
        private void FixedEnthalpy;
        
        private void NoEconomizer;
        
        private void NoLockout;
        
        private void CycleOnAny;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void Plate;
        
        private void Rotary;
        
        private void ExhaustAirRecirculation;
        
        private void ExhaustOnly;
        
        private void MinimumExhaustTemperature;
        
        private void None;
        
        private void CoolReheat;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        
        private void Coincident;
        
        private void NonCoincident;
        
        private void No;
        
        private void Yes;
        
        private void ASHRAE90.1-2004AppendixG;
        
        private void InletVaneDampers;
        
        private void OutletDampers;
        
        private void VariableSpeedMotor;
        
        private void VariableSpeedMotorPressureReset;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_configuration_type")]
public SystemconfigurationtypeType system_configuration_type
{
    get
    {
    }
    set
    {
    }
}
 = (SystemconfigurationtypeType)SingleFanConstantVolume;

[JsonProperty("main_supply_fan_maximum_flow_rate")]
public string main_supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("main_supply_fan_minimum_flow_fraction")]
public float main_supply_fan_minimum_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("main_supply_fan_total_efficiency")]
public float main_supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("main_supply_fan_delta_pressure")]
public float main_supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("main_supply_fan_motor_efficiency")]
public float main_supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("main_supply_fan_motor_in_air_stream_fraction")]
public float main_supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("main_supply_fan_part_load_power_coefficients")]
public MainsupplyfanpartloadpowercoefficientsType main_supply_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (MainsupplyfanpartloadpowercoefficientsType)InletVaneDampers;

[JsonProperty("cold_duct_supply_fan_maximum_flow_rate")]
public string cold_duct_supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cold_duct_supply_fan_minimum_flow_fraction")]
public float cold_duct_supply_fan_minimum_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("cold_duct_supply_fan_total_efficiency")]
public float cold_duct_supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("cold_duct_supply_fan_delta_pressure")]
public float cold_duct_supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("cold_duct_supply_fan_motor_efficiency")]
public float cold_duct_supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("cold_duct_supply_fan_motor_in_air_stream_fraction")]
public float cold_duct_supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cold_duct_supply_fan_part_load_power_coefficients")]
public ColdductsupplyfanpartloadpowercoefficientsType cold_duct_supply_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (ColdductsupplyfanpartloadpowercoefficientsType)InletVaneDampers;

[JsonProperty("cold_duct_supply_fan_placement")]
public ColdductsupplyfanplacementType cold_duct_supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (ColdductsupplyfanplacementType)DrawThrough;

[JsonProperty("hot_duct_supply_fan_maximum_flow_rate")]
public string hot_duct_supply_fan_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("hot_duct_supply_fan_minimum_flow_fraction")]
public float hot_duct_supply_fan_minimum_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("hot_duct_supply_fan_total_efficiency")]
public float hot_duct_supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("hot_duct_supply_fan_delta_pressure")]
public float hot_duct_supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("hot_duct_supply_fan_motor_efficiency")]
public float hot_duct_supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("hot_duct_supply_fan_motor_in_air_stream_fraction")]
public float hot_duct_supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("hot_duct_supply_fan_part_load_power_coefficients")]
public HotductsupplyfanpartloadpowercoefficientsType hot_duct_supply_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (HotductsupplyfanpartloadpowercoefficientsType)InletVaneDampers;

[JsonProperty("hot_duct_supply_fan_placement")]
public HotductsupplyfanplacementType hot_duct_supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (HotductsupplyfanplacementType)DrawThrough;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)ChilledWater;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_control_type")]
public CoolingcoilsetpointcontroltypeType cooling_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("cooling_coil_design_setpoint_temperature")]
public float cooling_coil_design_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string cooling_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public float cooling_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public float cooling_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)23.3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)HotWater;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_control_type")]
public HeatingcoilsetpointcontroltypeType heating_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("heating_coil_setpoint_schedule_name")]
public string heating_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public float heating_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.8;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public float heating_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("heating_coil_capacity")]
public string heating_coil_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("preheat_coil_type")]
public PreheatcoiltypeType preheat_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (PreheatcoiltypeType)None;

[JsonProperty("preheat_coil_availability_schedule_name")]
public string preheat_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("preheat_coil_design_setpoint")]
public float preheat_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.2;

[JsonProperty("preheat_coil_setpoint_schedule_name")]
public string preheat_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_preheat_coil_efficiency")]
public float gas_preheat_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_preheat_coil_parasitic_electric_load")]
public float gas_preheat_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_outdoor_air_control_type")]
public MinimumoutdooraircontroltypeType minimum_outdoor_air_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MinimumoutdooraircontroltypeType)ProportionalMinimum;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_type")]
public EconomizertypeType economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizertypeType)NoEconomizer;

[JsonProperty("economizer_lockout")]
public EconomizerlockoutType economizer_lockout
{
    get
    {
    }
    set
    {
    }
}
 = (EconomizerlockoutType)NoLockout;

[JsonProperty("economizer_upper_temperature_limit")]
public float economizer_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_lower_temperature_limit")]
public float economizer_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_upper_enthalpy_limit")]
public float economizer_upper_enthalpy_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("economizer_maximum_limit_dewpoint_temperature")]
public float economizer_maximum_limit_dewpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_supply_plenum_name")]
public string cold_supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_supply_plenum_name")]
public string hot_supply_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_plenum_name")]
public string return_plenum_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("night_cycle_control")]
public NightcyclecontrolType night_cycle_control
{
    get
    {
    }
    set
    {
    }
}
 = (NightcyclecontrolType)StayOff;

[JsonProperty("night_cycle_control_zone_name")]
public string night_cycle_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HeatrecoveryheatexchangertypeType heat_recovery_heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryheatexchangertypeType)Plate;

[JsonProperty("heat_recovery_frost_control_type")]
public HeatrecoveryfrostcontroltypeType heat_recovery_frost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryfrostcontroltypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_control_zone_name")]
public string dehumidification_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_relative_humidity_setpoint")]
public float dehumidification_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("dehumidification_relative_humidity_setpoint_schedule_name")]
public string dehumidification_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_control_zone_name")]
public string humidifier_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_relative_humidity_setpoint")]
public float humidifier_relative_humidity_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("humidifier_relative_humidity_setpoint_schedule_name")]
public string humidifier_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_option")]
public SizingoptionType sizing_option
{
    get
    {
    }
    set
    {
    }
}
 = (SizingoptionType)NonCoincident;

[JsonProperty("return_fan")]
public ReturnfanType return_fan
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanType)No;

[JsonProperty("return_fan_total_efficiency")]
public float return_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("return_fan_delta_pressure")]
public float return_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("return_fan_motor_efficiency")]
public float return_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("return_fan_motor_in_air_stream_fraction")]
public float return_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("return_fan_part_load_power_coefficients")]
public ReturnfanpartloadpowercoefficientsType return_fan_part_load_power_coefficients
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnfanpartloadpowercoefficientsType)InletVaneDampers;
        
        [Description("SingleFan - a single supply fan before the split to dual ducts DualFan - two supp" +
            "ly fans, one each for the cold and hot ducts ConstantVolume - constant volume Va" +
            "riableVolume - variable volume")]
        public enum SystemconfigurationtypeType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum MainsupplyfanpartloadpowercoefficientsType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum ColdductsupplyfanpartloadpowercoefficientsType
        {
        }
        
        public enum ColdductsupplyfanplacementType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum HotductsupplyfanpartloadpowercoefficientsType
        {
        }
        
        public enum HotductsupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum CoolingcoilsetpointcontroltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        public enum HeatingcoilsetpointcontroltypeType
        {
        }
        
        public enum PreheatcoiltypeType
        {
        }
        
        public enum MinimumoutdooraircontroltypeType
        {
        }
        
        public enum EconomizertypeType
        {
        }
        
        public enum EconomizerlockoutType
        {
        }
        
        public enum NightcyclecontrolType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        public enum HeatrecoveryheatexchangertypeType
        {
        }
        
        public enum HeatrecoveryfrostcontroltypeType
        {
        }
        
        [Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint as " +
            "required to meet the humidity setpoint.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
        
        [Description("Select whether autosized system supply flow rate is the sum of Coincident or NonC" +
            "oincident zone air flow rates.")]
        public enum SizingoptionType
        {
        }
        
        [Description("Specifies if the system has a return fan.")]
        public enum ReturnfanType
        {
        }
        
        [Description("This field selects a predefined set of fan power coefficients. The ASHRAE 90.1-20" +
            "04 Appendix G coefficients are from TABLE G3.1.3.15, Method 2. The other sets of" +
            " coefficients are from the EnergyPlus Input Output Reference, Fan Coefficient Va" +
            "lues table.")]
        public enum ReturnfanpartloadpowercoefficientsType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:System:DedicatedOutdoorAir")]
    [Description("This object creates a dedicated outdoor air system that must be used with HVACTem" +
        "plate:Zone:* objects for BaseboardHeat FanCoil PTAC PTHP WaterToAirHeatPump and " +
        "VRF. Does not support HVACTemplate:Zone:VAV or other central multizone systems")]
    public class HVACTemplate_System_DedicatedOutdoorAir
    {
        
        private void DirectIntoZone;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ChilledWater;
        
        private void ChilledWaterDetailedFlatModel;
        
        private void HeatExchangerAssistedChilledWater;
        
        private void HeatExchangerAssistedDX;
        
        private void None;
        
        private void TwoSpeedDX;
        
        private void TwoStageDX;
        
        private void TwoStageHumidityControlDX;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Electric;
        
        private void Gas;
        
        private void HotWater;
        
        private void None;
        
        private void FixedSetpoint;
        
        private void OutdoorAirTemperatureReset;
        
        private void Scheduled;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        
        private void Plate;
        
        private void Rotary;
        
        private void ExhaustAirRecirculation;
        
        private void ExhaustOnly;
        
        private void MinimumExhaustTemperature;
        
        private void None;
        
        private void CoolReheatDesuperheater;
        
        private void CoolReheatHeatingCoil;
        
        private void Multimode;
        
        private void None;
        
        private void ElectricSteam;
        
        private void None;
        

[JsonProperty("system_availability_schedule_name")]
public string system_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_type")]
public AiroutlettypeType air_outlet_type
{
    get
    {
    }
    set
    {
    }
}
 = (AiroutlettypeType)DirectIntoZone;

[JsonProperty("supply_fan_flow_rate")]
public string supply_fan_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("supply_fan_total_efficiency")]
public float supply_fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("supply_fan_delta_pressure")]
public float supply_fan_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;

[JsonProperty("supply_fan_motor_efficiency")]
public float supply_fan_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("supply_fan_motor_in_air_stream_fraction")]
public float supply_fan_motor_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("cooling_coil_type")]
public CoolingcoiltypeType cooling_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoiltypeType)ChilledWater;

[JsonProperty("cooling_coil_availability_schedule_name")]
public string cooling_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_control_type")]
public CoolingcoilsetpointcontroltypeType cooling_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("cooling_coil_design_setpoint")]
public float cooling_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_setpoint_schedule_name")]
public string cooling_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_low")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_low")]
public float cooling_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("cooling_coil_setpoint_at_outdoor_dry_bulb_high")]
public float cooling_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.8;

[JsonProperty("cooling_coil_reset_outdoor_dry_bulb_high")]
public float cooling_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)23.3;

[JsonProperty("dx_cooling_coil_gross_rated_total_capacity")]
public string dx_cooling_coil_gross_rated_total_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dx_cooling_coil_gross_rated_sensible_heat_ratio")]
public string dx_cooling_coil_gross_rated_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("dx_cooling_coil_gross_rated_cop")]
public float dx_cooling_coil_gross_rated_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("heating_coil_type")]
public HeatingcoiltypeType heating_coil_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoiltypeType)HotWater;

[JsonProperty("heating_coil_availability_schedule_name")]
public string heating_coil_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_control_type")]
public HeatingcoilsetpointcontroltypeType heating_coil_setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingcoilsetpointcontroltypeType)FixedSetpoint;

[JsonProperty("heating_coil_design_setpoint")]
public float heating_coil_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("heating_coil_setpoint_schedule_name")]
public string heating_coil_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_low")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_low")]
public float heating_coil_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.8;

[JsonProperty("heating_coil_setpoint_at_outdoor_dry_bulb_high")]
public float heating_coil_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("heating_coil_reset_outdoor_dry_bulb_high")]
public float heating_coil_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("gas_heating_coil_efficiency")]
public float gas_heating_coil_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("gas_heating_coil_parasitic_electric_load")]
public float gas_heating_coil_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("heat_recovery_sensible_effectiveness")]
public float heat_recovery_sensible_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("heat_recovery_latent_effectiveness")]
public float heat_recovery_latent_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("heat_recovery_heat_exchanger_type")]
public HeatrecoveryheatexchangertypeType heat_recovery_heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryheatexchangertypeType)Plate;

[JsonProperty("heat_recovery_frost_control_type")]
public HeatrecoveryfrostcontroltypeType heat_recovery_frost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoveryfrostcontroltypeType)None;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("dehumidification_setpoint")]
public float dehumidification_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00924;

[JsonProperty("humidifier_type")]
public HumidifiertypeType humidifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidifiertypeType)None;

[JsonProperty("humidifier_availability_schedule_name")]
public string humidifier_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_rated_capacity")]
public float humidifier_rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-06;

[JsonProperty("humidifier_rated_electric_power")]
public string humidifier_rated_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("humidifier_constant_setpoint")]
public float humidifier_constant_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.003;

[JsonProperty("dehumidification_setpoint_schedule_name")]
public string dehumidification_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifier_setpoint_schedule_name")]
public string humidifier_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AiroutlettypeType
        {
        }
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum CoolingcoiltypeType
        {
        }
        
        public enum CoolingcoilsetpointcontroltypeType
        {
        }
        
        public enum HeatingcoiltypeType
        {
        }
        
        [Description("When selecting OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may n" +
            "eed to be changed")]
        public enum HeatingcoilsetpointcontroltypeType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
        
        public enum HeatrecoveryheatexchangertypeType
        {
        }
        
        public enum HeatrecoveryfrostcontroltypeType
        {
        }
        
        [Description(@"None = meet sensible load only CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil Valid for all cooling coil types. If no heating coil specified, cold supply temps may occur. CoolReheatDesuperheater = cool beyond the dry-bulb setpoint as required to meet the humidity setpoint, reheat with desuperheater coil. Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only for Cooling Coil Type = TwoStageHumidityControlDX or HeatExchangerAssistedDX")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum HumidifiertypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:ChilledWaterLoop")]
    [Description("Plant and condenser loops to serve all HVACTemplate chilled water coils, chillers" +
        ", and towers.")]
    public class HVACTemplate_Plant_ChilledWaterLoop
    {
        
        private void Continuous;
        
        private void Intermittent;
        
        private void Default;
        
        private void UserDefined;
        
        private void ConstantPrimaryNoSecondary;
        
        private void ConstantPrimaryVariableSecondary;
        
        private void VariablePrimaryNoSecondary;
        
        private void Default;
        
        private void UserDefined;
        
        private void OutdoorWetBulbTemperature;
        
        private void SpecifiedSetpoint;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void FiveHeaderedPumps;
        
        private void FourHeaderedPumps;
        
        private void PumpPerChiller;
        
        private void SinglePump;
        
        private void ThreeHeaderedPumps;
        
        private void TwoHeaderedPumps;
        
        private void FiveHeaderedPumps;
        
        private void FourHeaderedPumps;
        
        private void SinglePump;
        
        private void ThreeHeaderedPumps;
        
        private void TwoHeaderedPumps;
        
        private void FiveHeaderedPumps;
        
        private void FourHeaderedPumps;
        
        private void PumpPerTower;
        
        private void SinglePump;
        
        private void ThreeHeaderedPumps;
        
        private void TwoHeaderedPumps;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void EthyleneGlycol30;
        
        private void EthyleneGlycol40;
        
        private void EthyleneGlycol50;
        
        private void EthyleneGlycol60;
        
        private void PropyleneGlycol30;
        
        private void PropyleneGlycol40;
        
        private void PropyleneGlycol50;
        
        private void PropyleneGlycol60;
        
        private void Water;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        

[JsonProperty("pump_schedule_name")]
public string pump_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Intermittent;

[JsonProperty("chiller_plant_operation_scheme_type")]
public ChillerplantoperationschemetypeType chiller_plant_operation_scheme_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerplantoperationschemetypeType)Default;

[JsonProperty("chiller_plant_equipment_operation_schemes_name")]
public string chiller_plant_equipment_operation_schemes_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_setpoint_schedule_name")]
public string chilled_water_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_design_setpoint")]
public float chilled_water_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.22;

[JsonProperty("chilled_water_pump_configuration")]
public ChilledwaterpumpconfigurationType chilled_water_pump_configuration
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwaterpumpconfigurationType)ConstantPrimaryNoSecondary;

[JsonProperty("primary_chilled_water_pump_rated_head")]
public float primary_chilled_water_pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("secondary_chilled_water_pump_rated_head")]
public float secondary_chilled_water_pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("condenser_plant_operation_scheme_type")]
public CondenserplantoperationschemetypeType condenser_plant_operation_scheme_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserplantoperationschemetypeType)Default;

[JsonProperty("condenser_equipment_operation_schemes_name")]
public string condenser_equipment_operation_schemes_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_temperature_control_type")]
public CondenserwatertemperaturecontroltypeType condenser_water_temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_setpoint_schedule_name")]
public string condenser_water_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_design_setpoint")]
public float condenser_water_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29.4;

[JsonProperty("condenser_water_pump_rated_head")]
public float condenser_water_pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("chilled_water_setpoint_reset_type")]
public ChilledwatersetpointresettypeType chilled_water_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwatersetpointresettypeType)None;

[JsonProperty("chilled_water_setpoint_at_outdoor_dry_bulb_low")]
public float chilled_water_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.2;

[JsonProperty("chilled_water_reset_outdoor_dry_bulb_low")]
public float chilled_water_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.6;

[JsonProperty("chilled_water_setpoint_at_outdoor_dry_bulb_high")]
public float chilled_water_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.7;

[JsonProperty("chilled_water_reset_outdoor_dry_bulb_high")]
public float chilled_water_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)26.7;

[JsonProperty("chilled_water_primary_pump_type")]
public ChilledwaterprimarypumptypeType chilled_water_primary_pump_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwaterprimarypumptypeType)SinglePump;

[JsonProperty("chilled_water_secondary_pump_type")]
public ChilledwatersecondarypumptypeType chilled_water_secondary_pump_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwatersecondarypumptypeType)SinglePump;

[JsonProperty("condenser_water_pump_type")]
public CondenserwaterpumptypeType condenser_water_pump_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserwaterpumptypeType)SinglePump;

[JsonProperty("chilled_water_supply_side_bypass_pipe")]
public ChilledwatersupplysidebypasspipeType chilled_water_supply_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwatersupplysidebypasspipeType)Yes;

[JsonProperty("chilled_water_demand_side_bypass_pipe")]
public ChilledwaterdemandsidebypasspipeType chilled_water_demand_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwaterdemandsidebypasspipeType)Yes;

[JsonProperty("condenser_water_supply_side_bypass_pipe")]
public CondenserwatersupplysidebypasspipeType condenser_water_supply_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserwatersupplysidebypasspipeType)Yes;

[JsonProperty("condenser_water_demand_side_bypass_pipe")]
public CondenserwaterdemandsidebypasspipeType condenser_water_demand_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserwaterdemandsidebypasspipeType)Yes;

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtypeType)Water;

[JsonProperty("loop_design_delta_temperature")]
public float loop_design_delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.67;

[JsonProperty("minimum_outdoor_dry_bulb_temperature")]
public float minimum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_load_distribution_scheme")]
public ChilledwaterloaddistributionschemeType chilled_water_load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwaterloaddistributionschemeType)SequentialLoad;

[JsonProperty("condenser_water_load_distribution_scheme")]
public CondenserwaterloaddistributionschemeType condenser_water_load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserwaterloaddistributionschemeType)SequentialLoad;
        
        [Description("Applies to both chilled water and condenser loop pumps")]
        public enum PumpcontroltypeType
        {
        }
        
        [Description("Default operation type makes all equipment available at all times operating in or" +
            "der of Priority specified in HVACTemplate:Plant:Chiller objects.")]
        public enum ChillerplantoperationschemetypeType
        {
        }
        
        [Description(@"VariablePrimaryNoSecondary - variable flow to chillers and coils ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils")]
        public enum ChilledwaterpumpconfigurationType
        {
        }
        
        [Description("Default operation type makes all equipment available at all times operating in or" +
            "der of Priority specified in HVACTemplate:Plant:Tower objects. May be left blank" +
            " if not serving any water cooled chillers")]
        public enum CondenserplantoperationschemetypeType
        {
        }
        
        [Description("May be left blank if not serving any water cooled chillers")]
        public enum CondenserwatertemperaturecontroltypeType
        {
        }
        
        [Description("Overrides Chilled Water Setpoint Schedule Name")]
        public enum ChilledwatersetpointresettypeType
        {
        }
        
        [Description("Describes the type of pump configuration used for the primary portion of the chil" +
            "led water loop.")]
        public enum ChilledwaterprimarypumptypeType
        {
        }
        
        [Description("Describes the type of pump configuration used for the secondary portion of the ch" +
            "illed water loop.")]
        public enum ChilledwatersecondarypumptypeType
        {
        }
        
        [Description("Describes the type of pump configuration used for the condenser water loop.")]
        public enum CondenserwaterpumptypeType
        {
        }
        
        [Description("Determines if a supply side bypass pipe is present in the chilled water loop.")]
        public enum ChilledwatersupplysidebypasspipeType
        {
        }
        
        [Description("Determines if a demand side bypass pipe is present in the chilled water loop.")]
        public enum ChilledwaterdemandsidebypasspipeType
        {
        }
        
        [Description("Determines if a supply side bypass pipe is present in the condenser water loop.")]
        public enum CondenserwatersupplysidebypasspipeType
        {
        }
        
        [Description("Determines if a demand side bypass pipe is present in the condenser water loop.")]
        public enum CondenserwaterdemandsidebypasspipeType
        {
        }
        
        public enum FluidtypeType
        {
        }
        
        public enum ChilledwaterloaddistributionschemeType
        {
        }
        
        public enum CondenserwaterloaddistributionschemeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Chiller")]
    [Description("This object adds a chiller to an HVACTemplate:Plant:ChilledWaterLoop.")]
    public class HVACTemplate_Plant_Chiller
    {
        
        private void DistrictChilledWater;
        
        private void ElectricCentrifugalChiller;
        
        private void ElectricReciprocatingChiller;
        
        private void ElectricScrewChiller;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        

[JsonProperty("chiller_type")]
public ChillertypeType chiller_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity")]
public string capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterCooled;

[JsonProperty("priority")]
public string priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_unloading_ratio")]
public float minimum_unloading_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public float leaving_chilled_water_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;
        
        public enum ChillertypeType
        {
        }
        
        [Description("Not applicable if Chiller Type is DistrictChilledWater")]
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Chiller:ObjectReference")]
    [Description("This object references a detailed chiller object and adds it to an HVACTemplate:P" +
        "lant:ChilledWaterLoop. The user must create a complete detailed chiller object w" +
        "ith all required curve or performance objects.")]
    public class HVACTemplate_Plant_Chiller_ObjectReference
    {
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        

[JsonProperty("chiller_object_type")]
public ChillerobjecttypeType chiller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerobjecttypeType)Chiller:Electric:EIR;

[JsonProperty("chiller_name")]
public string chiller_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("priority")]
public float priority
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ChillerobjecttypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Tower")]
    [Description("This object adds a cooling tower to an HVACTemplate:Plant:ChilledWaterLoop or Mix" +
        "edWaterLoop.")]
    public class HVACTemplate_Plant_Tower
    {
        
        private void SingleSpeed;
        
        private void TwoSpeed;
        
        private void ChilledWater;
        
        private void MixedWater;
        

[JsonProperty("tower_type")]
public TowertypeType tower_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_speed_nominal_capacity")]
public string high_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("high_speed_fan_power")]
public string high_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("low_speed_nominal_capacity")]
public string low_speed_nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("low_speed_fan_power")]
public string low_speed_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("free_convection_capacity")]
public string free_convection_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("priority")]
public string priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("template_plant_loop_type")]
public TemplateplantlooptypeType template_plant_loop_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TowertypeType
        {
        }
        
        [Description("Specifies if this tower serves a template chilled water loop or mixed water loop " +
            "If left blank, will serve a chilled water loop if present, or a mixed water loop" +
            " (if no chilled water loop is present).")]
        public enum TemplateplantlooptypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Tower:ObjectReference")]
    [Description("This object references a detailed cooling tower object and adds it to an HVACTemp" +
        "late:Plant:ChilledWaterLoop or MixedWaterLoop. The user must create a complete d" +
        "etailed cooling tower object with all required curve or performance objects.")]
    public class HVACTemplate_Plant_Tower_ObjectReference
    {
        
        private void CoolingTower:SingleSpeed;
        
        private void CoolingTower:TwoSpeed;
        
        private void CoolingTower:VariableSpeed;
        
        private void ChilledWater;
        
        private void MixedWater;
        

[JsonProperty("cooling_tower_object_type")]
public CoolingtowerobjecttypeType cooling_tower_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingtowerobjecttypeType)CoolingTower:SingleSpeed;

[JsonProperty("cooling_tower_name")]
public string cooling_tower_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("priority")]
public float priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_plant_loop_type")]
public TemplateplantlooptypeType template_plant_loop_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CoolingtowerobjecttypeType
        {
        }
        
        [Description("Specifies if this tower serves a template chilled water loop or mixed water loop " +
            "If left blank, will serve a chilled water loop if present, or a mixed water loop" +
            " (if no chilled water loop is present).")]
        public enum TemplateplantlooptypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:HotWaterLoop")]
    [Description("Plant loop to serve all HVACTemplate hot water coils and boilers.")]
    public class HVACTemplate_Plant_HotWaterLoop
    {
        
        private void Continuous;
        
        private void Intermittent;
        
        private void Default;
        
        private void UserDefined;
        
        private void ConstantFlow;
        
        private void VariableFlow;
        
        private void None;
        
        private void OutdoorAirTemperatureReset;
        
        private void FiveHeaderedPumps;
        
        private void FourHeaderedPumps;
        
        private void PumpPerBoiler;
        
        private void SinglePump;
        
        private void ThreeHeaderedPumps;
        
        private void TwoHeaderedPumps;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void EthyleneGlycol30;
        
        private void EthyleneGlycol40;
        
        private void EthyleneGlycol50;
        
        private void EthyleneGlycol60;
        
        private void PropyleneGlycol30;
        
        private void PropyleneGlycol40;
        
        private void PropyleneGlycol50;
        
        private void PropyleneGlycol60;
        
        private void Water;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        

[JsonProperty("pump_schedule_name")]
public string pump_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Intermittent;

[JsonProperty("hot_water_plant_operation_scheme_type")]
public HotwaterplantoperationschemetypeType hot_water_plant_operation_scheme_type
{
    get
    {
    }
    set
    {
    }
}
 = (HotwaterplantoperationschemetypeType)Default;

[JsonProperty("hot_water_plant_equipment_operation_schemes_name")]
public string hot_water_plant_equipment_operation_schemes_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_setpoint_schedule_name")]
public string hot_water_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_design_setpoint")]
public float hot_water_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)82;

[JsonProperty("hot_water_pump_configuration")]
public HotwaterpumpconfigurationType hot_water_pump_configuration
{
    get
    {
    }
    set
    {
    }
}
 = (HotwaterpumpconfigurationType)ConstantFlow;

[JsonProperty("hot_water_pump_rated_head")]
public float hot_water_pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("hot_water_setpoint_reset_type")]
public HotwatersetpointresettypeType hot_water_setpoint_reset_type
{
    get
    {
    }
    set
    {
    }
}
 = (HotwatersetpointresettypeType)None;

[JsonProperty("hot_water_setpoint_at_outdoor_dry_bulb_low")]
public float hot_water_setpoint_at_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)82.2;

[JsonProperty("hot_water_reset_outdoor_dry_bulb_low")]
public float hot_water_reset_outdoor_dry_bulb_low
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-6.7;

[JsonProperty("hot_water_setpoint_at_outdoor_dry_bulb_high")]
public float hot_water_setpoint_at_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)65.6;

[JsonProperty("hot_water_reset_outdoor_dry_bulb_high")]
public float hot_water_reset_outdoor_dry_bulb_high
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("hot_water_pump_type")]
public HotwaterpumptypeType hot_water_pump_type
{
    get
    {
    }
    set
    {
    }
}
 = (HotwaterpumptypeType)SinglePump;

[JsonProperty("supply_side_bypass_pipe")]
public SupplysidebypasspipeType supply_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (SupplysidebypasspipeType)Yes;

[JsonProperty("demand_side_bypass_pipe")]
public DemandsidebypasspipeType demand_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (DemandsidebypasspipeType)Yes;

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtypeType)Water;

[JsonProperty("loop_design_delta_temperature")]
public float loop_design_delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11;

[JsonProperty("maximum_outdoor_dry_bulb_temperature")]
public float maximum_outdoor_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_distribution_scheme")]
public LoaddistributionschemeType load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (LoaddistributionschemeType)SequentialLoad;
        
        public enum PumpcontroltypeType
        {
        }
        
        [Description("Default operation type makes all equipment available at all times operating in or" +
            "der of Priority specified in HVACTemplate:Plant:Boiler objects.")]
        public enum HotwaterplantoperationschemetypeType
        {
        }
        
        [Description("VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow -" +
            " constant flow to boilers and coils, excess bypassed")]
        public enum HotwaterpumpconfigurationType
        {
        }
        
        [Description("Overrides Hot Water Setpoint Schedule Name")]
        public enum HotwatersetpointresettypeType
        {
        }
        
        [Description("Describes the type of pump configuration used for the hot water loop.")]
        public enum HotwaterpumptypeType
        {
        }
        
        [Description("Determines if a supply side bypass pipe is present in the hot water loop.")]
        public enum SupplysidebypasspipeType
        {
        }
        
        [Description("Determines if a demand side bypass pipe is present in the hot water loop.")]
        public enum DemandsidebypasspipeType
        {
        }
        
        public enum FluidtypeType
        {
        }
        
        public enum LoaddistributionschemeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Boiler")]
    [Description("This object adds a boiler to an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop" +
        ".")]
    public class HVACTemplate_Plant_Boiler
    {
        
        private void CondensingHotWaterBoiler;
        
        private void DistrictHotWater;
        
        private void HotWaterBoiler;
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void HotWater;
        
        private void MixedWater;
        

[JsonProperty("boiler_type")]
public BoilertypeType boiler_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity")]
public string capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("efficiency")]
public float efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("priority")]
public string priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("water_outlet_upper_temperature_limit")]
public float water_outlet_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("template_plant_loop_type")]
public TemplateplantlooptypeType template_plant_loop_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BoilertypeType
        {
        }
        
        [Description("Not applicable  if Boiler Type is DistrictHotWater")]
        public enum FueltypeType
        {
        }
        
        [Description("Specifies if this boiler serves a template hot water loop or mixed water loop If " +
            "left blank, will serve a hot water loop if present, or a mixed water loop (if no" +
            " hot water loop is present).")]
        public enum TemplateplantlooptypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:Boiler:ObjectReference")]
    [Description("This object references a detailed boiler object and adds it to an HVACTemplate:Pl" +
        "ant:HotWaterLoop or MixedWaterLoop. The user must create a complete detailed boi" +
        "ler object with all required curve or performance objects.")]
    public class HVACTemplate_Plant_Boiler_ObjectReference
    {
        
        private void Boiler:HotWater;
        
        private void HotWater;
        
        private void MixedWater;
        

[JsonProperty("boiler_object_type")]
public BoilerobjecttypeType boiler_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (BoilerobjecttypeType)Boiler:HotWater;

[JsonProperty("boiler_name")]
public string boiler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("priority")]
public float priority
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("template_plant_loop_type")]
public TemplateplantlooptypeType template_plant_loop_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BoilerobjecttypeType
        {
        }
        
        [Description("Specifies if this boiler serves a template hot water loop or mixed water loop If " +
            "left blank, will serve a hot water loop if present, or a mixed water loop (if no" +
            " hot water loop is present).")]
        public enum TemplateplantlooptypeType
        {
        }
    }
    
    [JsonProperty("HVACTemplate:Plant:MixedWaterLoop")]
    [Description("Central plant loop portion of a water source heat pump system.")]
    public class HVACTemplate_Plant_MixedWaterLoop
    {
        
        private void Continuous;
        
        private void Intermittent;
        
        private void Default;
        
        private void UserDefined;
        
        private void ConstantFlow;
        
        private void VariableFlow;
        
        private void FiveHeaderedPumps;
        
        private void FourHeaderedPumps;
        
        private void PumpPerTowerOrBoiler;
        
        private void SinglePump;
        
        private void ThreeHeaderedPumps;
        
        private void TwoHeaderedPumps;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void EthyleneGlycol30;
        
        private void EthyleneGlycol40;
        
        private void EthyleneGlycol50;
        
        private void EthyleneGlycol60;
        
        private void PropyleneGlycol30;
        
        private void PropyleneGlycol40;
        
        private void PropyleneGlycol50;
        
        private void PropyleneGlycol60;
        
        private void Water;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        

[JsonProperty("pump_schedule_name")]
public string pump_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Intermittent;

[JsonProperty("operation_scheme_type")]
public OperationschemetypeType operation_scheme_type
{
    get
    {
    }
    set
    {
    }
}
 = (OperationschemetypeType)Default;

[JsonProperty("equipment_operation_schemes_name")]
public string equipment_operation_schemes_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_temperature_setpoint_schedule_name")]
public string high_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_temperature_design_setpoint")]
public float high_temperature_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)33;

[JsonProperty("low_temperature_setpoint_schedule_name")]
public string low_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_temperature_design_setpoint")]
public float low_temperature_design_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("water_pump_configuration")]
public WaterpumpconfigurationType water_pump_configuration
{
    get
    {
    }
    set
    {
    }
}
 = (WaterpumpconfigurationType)ConstantFlow;

[JsonProperty("water_pump_rated_head")]
public float water_pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("water_pump_type")]
public WaterpumptypeType water_pump_type
{
    get
    {
    }
    set
    {
    }
}
 = (WaterpumptypeType)SinglePump;

[JsonProperty("supply_side_bypass_pipe")]
public SupplysidebypasspipeType supply_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (SupplysidebypasspipeType)Yes;

[JsonProperty("demand_side_bypass_pipe")]
public DemandsidebypasspipeType demand_side_bypass_pipe
{
    get
    {
    }
    set
    {
    }
}
 = (DemandsidebypasspipeType)Yes;

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtypeType)Water;

[JsonProperty("loop_design_delta_temperature")]
public float loop_design_delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5.6;

[JsonProperty("load_distribution_scheme")]
public LoaddistributionschemeType load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (LoaddistributionschemeType)SequentialLoad;
        
        [Description("Applies to both chilled water and condenser loop pumps")]
        public enum PumpcontroltypeType
        {
        }
        
        [Description("Default operation type makes all equipment available at all times operating in or" +
            "der of Priority specified in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:To" +
            "wer objects.")]
        public enum OperationschemetypeType
        {
        }
        
        [Description("VariableFlow - variable flow to boilers and coils, excess bypassed ConstantFlow -" +
            " constant flow to boilers and coils, excess bypassed")]
        public enum WaterpumpconfigurationType
        {
        }
        
        [Description("Describes the type of pump configuration used for the mixed water loop.")]
        public enum WaterpumptypeType
        {
        }
        
        [Description("Determines if a supply side bypass pipe is present in the hot water loop.")]
        public enum SupplysidebypasspipeType
        {
        }
        
        [Description("Determines if a demand side bypass pipe is present in the hot water loop.")]
        public enum DemandsidebypasspipeType
        {
        }
        
        public enum FluidtypeType
        {
        }
        
        public enum LoaddistributionschemeType
        {
        }
    }
}
namespace EnergyPlus.HybridModel
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("HybridModel:Zone")]
    [Description("Zones with measured air temperature data and a range of dates. If the range of te" +
        "mperature measurement dates includes a leap day, the weather data should include" +
        " a leap day.")]
    public class HybridModel_Zone
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("calculate_zone_internal_thermal_mass")]
public CalculatezoneinternalthermalmassType calculate_zone_internal_thermal_mass
{
    get
    {
    }
    set
    {
    }
}
 = (CalculatezoneinternalthermalmassType)No;

[JsonProperty("calculate_zone_air_infiltration_rate")]
public CalculatezoneairinfiltrationrateType calculate_zone_air_infiltration_rate
{
    get
    {
    }
    set
    {
    }
}
 = (CalculatezoneairinfiltrationrateType)No;

[JsonProperty("calculate_zone_people_count")]
public CalculatezonepeoplecountType calculate_zone_people_count
{
    get
    {
    }
    set
    {
    }
}
 = (CalculatezonepeoplecountType)No;

[JsonProperty("zone_measured_air_temperature_schedule_name")]
public string zone_measured_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_measured_air_humidity_ratio_schedule_name")]
public string zone_measured_air_humidity_ratio_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_measured_air_co2_concentration_schedule_name")]
public string zone_measured_air_co2_concentration_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_people_activity_schedule_name")]
public string zone_input_people_activity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_people_sensible_heat_fraction_schedule_name")]
public string zone_input_people_sensible_heat_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_people_radiant_heat_fraction_schedule_name")]
public string zone_input_people_radiant_heat_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_people_co2_generation_rate_schedule_name")]
public string zone_input_people_co2_generation_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_supply_air_temperature_schedule_name")]
public string zone_input_supply_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_supply_air_mass_flow_rate_schedule_name")]
public string zone_input_supply_air_mass_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_supply_air_humidity_ratio_schedule_name")]
public string zone_input_supply_air_humidity_ratio_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_input_supply_air_co2_concentration_schedule_name")]
public string zone_input_supply_air_co2_concentration_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_month")]
public float begin_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_day_of_month")]
public float begin_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_month")]
public float end_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_day_of_month")]
public float end_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Use measured zone air temperature to calculate zone internal thermal mass. If set" +
            " to Yes, the measured zone air temperature should be provided to calculate the t" +
            "hermal mass. If set to No, the inverse calculation of thermal mass will not be a" +
            "ctivated.")]
        public enum CalculatezoneinternalthermalmassType
        {
        }
        
        [Description(@"Use measured temperature data (temperature, humidity ratio, or CO2 concentration) to calculate zone air infiltration air flow rate. Only one of field Calculate Zone Internal Thermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Count can be set to YES at a time. By default, this field is set to NO. When set to NO, the inverse calculation of the zone air infiltration rate will not be activated. If this field is set to YES, one of the following fields (combinations) should be provided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Measured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zone Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flow Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone Input Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Measured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name")]
        public enum CalculatezoneairinfiltrationrateType
        {
        }
        
        [Description("Use measured humidity ratio data (temperature, humidity ratio, or CO2 concentrati" +
            "on) to calculate zone people count. Only one of field Calculate Zone Internal Th" +
            "ermal Mass, Calculate Zone Air Infiltration Rate, and Calculate Zone People Coun" +
            "t can be set to YES at a time. By default, this field is set to NO. When set to " +
            "NO, the inverse calculation of the zone people count will not be activated. If t" +
            "his field is set to YES, one of the following fields (combinations) should be pr" +
            "ovided: 1. Measurements were conducted when HVAC is free-floating: 1.1 Zone Meas" +
            "ured Air Temperature Schedule Name 1.2 Zone Measured Air Humidity Ratio Schedule" +
            " Name 1.3 Zone Measured Air CO2 Concentration Schedule Name 2. Measurements were" +
            " conducted when HVAC is on: 2.1 Zone Measured Air Temperature Schedule Name, Zon" +
            "e Input Supply Air Temperature Schedule Name, and Zone Input Supply Air Mass Flo" +
            "w Rate Schedule Name 2.2 Zone Measured Air Humidity Ratio Schedule Name, Zone In" +
            "put Supply Air Temperature Schedule Name, Zone Input Supply Air Mass Flow Rate S" +
            "chedule Name, and Zone Input Supply Air Humidity Ratio Schedule Name 2.3 Zone Me" +
            "asured Air CO2 Concentration Schedule Name, Zone Input Supply Air Mass Flow Rate" +
            " Schedule Name, and Zone Input Supply Air CO2 Concentration Schedule Name Field " +
            "Zone Input People Activity Schedule Name, Zone Input People Sensible Heat Fracti" +
            "on Schedule Name, Zone Input People Radiant Heat Fraction Schedule Name, Zone In" +
            "put People CO2 Generation Rate Schedule Name are optional. If provided, the defa" +
            "ult people activity level (130W), sensible heat generation rate (78W), latent he" +
            "at generation (52W) rate, and CO2 generation rate (0.0000000382 [m3/(s*W)]) will" +
            " be overwritten correspondingly.")]
        public enum CalculatezonepeoplecountType
        {
        }
    }
}
namespace EnergyPlus.InternalGains
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("People")]
    [Description("Sets internal gains and contaminant rates for occupants in the zone. If you use a" +
        " ZoneList in the Zone or ZoneList name field then this definition applies to all" +
        " the zones in the ZoneList.")]
    public class People
    {
        
        private void Area/Person;
        
        private void People;
        
        private void People/Area;
        
        private void No;
        
        private void Yes;
        
        private void AngleFactor;
        
        private void SurfaceWeighted;
        
        private void ZoneAveraged;
        
        private void CalculationMethodSchedule;
        
        private void ClothingInsulationSchedule;
        
        private void DynamicClothingModelASHRAE55;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        
        private void AdaptiveASH55;
        
        private void AdaptiveCEN15251;
        
        private void AnkleDraftASH55;
        
        private void CoolingEffectASH55;
        
        private void Fanger;
        
        private void KSU;
        
        private void Pierce;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_people_schedule_name")]
public string number_of_people_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_people_calculation_method")]
public NumberofpeoplecalculationmethodType number_of_people_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (NumberofpeoplecalculationmethodType)People;

[JsonProperty("number_of_people")]
public float number_of_people
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("people_per_zone_floor_area")]
public float people_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_floor_area_per_person")]
public float zone_floor_area_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("sensible_heat_fraction")]
public string sensible_heat_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("activity_level_schedule_name")]
public string activity_level_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("carbon_dioxide_generation_rate")]
public float carbon_dioxide_generation_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.82E-08;

[JsonProperty("enable_ashrae_55_comfort_warnings")]
public EnableashraecomfortwarningsType enable_ashrae_55_comfort_warnings
{
    get
    {
    }
    set
    {
    }
}
 = (EnableashraecomfortwarningsType)No;

[JsonProperty("mean_radiant_temperature_calculation_type")]
public MeanradianttemperaturecalculationtypeType mean_radiant_temperature_calculation_type
{
    get
    {
    }
    set
    {
    }
}
 = (MeanradianttemperaturecalculationtypeType)ZoneAveraged;

[JsonProperty("surface_name_angle_factor_list_name")]
public string surface_name_angle_factor_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("work_efficiency_schedule_name")]
public string work_efficiency_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("clothing_insulation_calculation_method")]
public ClothinginsulationcalculationmethodType clothing_insulation_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (ClothinginsulationcalculationmethodType)ClothingInsulationSchedule;

[JsonProperty("clothing_insulation_calculation_method_schedule_name")]
public string clothing_insulation_calculation_method_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("clothing_insulation_schedule_name")]
public string clothing_insulation_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_velocity_schedule_name")]
public string air_velocity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_1_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_2_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_3_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_3_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_4_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_4_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_5_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_5_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_6_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_6_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_model_7_type")]
public ThermalcomfortmodeltypeType thermal_comfort_model_7_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ankle_level_air_velocity_schedule_name")]
public string ankle_level_air_velocity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The entered calculation method is used to create the maximum number of people for this set of attributes (i.e. sensible fraction, schedule, etc) Choices: People -- simply enter number of occupants. People per Zone Floor Area -- enter the number to apply. Value * Floor Area = Number of people Zone Floor Area per Person -- enter the number to apply. Floor Area / Value = Number of people")]
        public enum NumberofpeoplecalculationmethodType
        {
        }
        
        public enum EnableashraecomfortwarningsType
        {
        }
        
        [Description("optional (only required for thermal comfort runs)")]
        public enum MeanradianttemperaturecalculationtypeType
        {
        }
        
        public enum ClothinginsulationcalculationmethodType
        {
        }
        
        [Description("optional (only needed for people thermal comfort results reporting)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (second type of thermal comfort model and results reporting)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (third thermal comfort model and report type)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (fourth thermal comfort model and report type)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (fifth thermal comfort model and report type)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (sixth thermal comfort model and report type)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
        
        [Description("optional (seventh thermal comfort model and report type)")]
        public enum ThermalcomfortmodeltypeType
        {
        }
    }
    
    [JsonProperty("ComfortViewFactorAngles")]
    [Description("Used to specify radiant view factors for thermal comfort calculations.")]
    public class ComfortViewFactorAngles
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_1_name")]
public string surface_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_1")]
public float angle_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_2_name")]
public string surface_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_2")]
public float angle_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_3_name")]
public string surface_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_3")]
public float angle_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_4_name")]
public string surface_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_4")]
public float angle_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_5_name")]
public string surface_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_5")]
public float angle_factor_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_6_name")]
public string surface_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_6")]
public float angle_factor_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_7_name")]
public string surface_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_7")]
public float angle_factor_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_8_name")]
public string surface_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_8")]
public float angle_factor_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_9_name")]
public string surface_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_9")]
public float angle_factor_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_10_name")]
public string surface_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_10")]
public float angle_factor_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_11_name")]
public string surface_11_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_11")]
public float angle_factor_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_12_name")]
public string surface_12_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_12")]
public float angle_factor_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_13_name")]
public string surface_13_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_13")]
public float angle_factor_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_14_name")]
public string surface_14_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_14")]
public float angle_factor_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_15_name")]
public string surface_15_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_15")]
public float angle_factor_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_16_name")]
public string surface_16_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_16")]
public float angle_factor_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_17_name")]
public string surface_17_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_17")]
public float angle_factor_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_18_name")]
public string surface_18_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_18")]
public float angle_factor_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_19_name")]
public string surface_19_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_19")]
public float angle_factor_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_20_name")]
public string surface_20_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("angle_factor_20")]
public float angle_factor_20
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Lights")]
    [Description("Sets internal gains for lights in the zone. If you use a ZoneList in the Zone or " +
        "ZoneList name field then this definition applies to all the zones in the ZoneLis" +
        "t.")]
    public class Lights
    {
        
        private void LightingLevel;
        
        private void Watts/Area;
        
        private void Watts/Person;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)LightingLevel;

[JsonProperty("lighting_level")]
public float lighting_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("watts_per_zone_floor_area")]
public float watts_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("watts_per_person")]
public float watts_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_fraction")]
public float return_air_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_visible")]
public float fraction_visible
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_replaceable")]
public float fraction_replaceable
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("return_air_fraction_calculated_from_plenum_temperature")]
public ReturnairfractioncalculatedfromplenumtemperatureType return_air_fraction_calculated_from_plenum_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (ReturnairfractioncalculatedfromplenumtemperatureType)No;

[JsonProperty("return_air_fraction_function_of_plenum_temperature_coefficient_1")]
public float return_air_fraction_function_of_plenum_temperature_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("return_air_fraction_function_of_plenum_temperature_coefficient_2")]
public float return_air_fraction_function_of_plenum_temperature_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("return_air_heat_gain_node_name")]
public string return_air_heat_gain_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The entered calculation method is used to create the maximum amount of lights for this set of attributes Choices: LightingLevel => Lighting Level -- simply enter watts of lights Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Lights Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Lights")]
        public enum DesignlevelcalculationmethodType
        {
        }
        
        public enum ReturnairfractioncalculatedfromplenumtemperatureType
        {
        }
    }
    
    [JsonProperty("ElectricEquipment")]
    [Description("Sets internal gains for electric equipment in the zone. If you use a ZoneList in " +
        "the Zone or ZoneList name field then this definition applies to all the zones in" +
        " the ZoneList.")]
    public class ElectricEquipment
    {
        
        private void EquipmentLevel;
        
        private void Watts/Area;
        
        private void Watts/Person;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)EquipmentLevel;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("watts_per_zone_floor_area")]
public float watts_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("watts_per_person")]
public float watts_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_latent")]
public float fraction_latent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_lost")]
public float fraction_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"The entered calculation method is used to create the maximum amount of electric equipment for this set of attributes Choices: EquipmentLevel => Equipment Level -- simply enter watts of equipment Watts/Area => Watts per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person => Watts per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
        public enum DesignlevelcalculationmethodType
        {
        }
    }
    
    [JsonProperty("GasEquipment")]
    [Description("Sets internal gains and contaminant rates for gas equipment in the zone. If you u" +
        "se a ZoneList in the Zone name field then this definition applies to all those z" +
        "ones.")]
    public class GasEquipment
    {
        
        private void EquipmentLevel;
        
        private void Power/Area;
        
        private void Power/Person;
        
        private void Watts/Area;
        
        private void Watts/Person;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)EquipmentLevel;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_zone_floor_area")]
public float power_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_person")]
public float power_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_latent")]
public float fraction_latent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_lost")]
public float fraction_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("carbon_dioxide_generation_rate")]
public float carbon_dioxide_generation_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"The entered calculation method is used to create the maximum amount of gas equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
        public enum DesignlevelcalculationmethodType
        {
        }
    }
    
    [JsonProperty("HotWaterEquipment")]
    [Description("Sets internal gains for hot water equipment in the zone. If you use a ZoneList in" +
        " the Zone name field then this definition applies to all those zones.")]
    public class HotWaterEquipment
    {
        
        private void EquipmentLevel;
        
        private void Power/Area;
        
        private void Power/Person;
        
        private void Watts/Area;
        
        private void Watts/Person;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)EquipmentLevel;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_zone_floor_area")]
public float power_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_person")]
public float power_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_latent")]
public float fraction_latent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_lost")]
public float fraction_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"The entered calculation method is used to create the maximum amount of hot water equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
        public enum DesignlevelcalculationmethodType
        {
        }
    }
    
    [JsonProperty("SteamEquipment")]
    [Description("Sets internal gains for steam equipment in the zone.")]
    public class SteamEquipment
    {
        
        private void EquipmentLevel;
        
        private void Power/Area;
        
        private void Power/Person;
        
        private void Watts/Area;
        
        private void Watts/Person;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)EquipmentLevel;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_zone_floor_area")]
public float power_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_person")]
public float power_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_latent")]
public float fraction_latent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_lost")]
public float fraction_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"The entered calculation method is used to create the maximum amount of steam equipment for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
        public enum DesignlevelcalculationmethodType
        {
        }
    }
    
    [JsonProperty("OtherEquipment")]
    [Description("Sets internal gains or losses for \"other\" equipment in the zone.")]
    public class OtherEquipment
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void None;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void EquipmentLevel;
        
        private void Power/Area;
        
        private void Power/Person;
        
        private void Watts/Area;
        
        private void Watts/Person;
        

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)None;

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_calculation_method")]
public DesignlevelcalculationmethodType design_level_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignlevelcalculationmethodType)EquipmentLevel;

[JsonProperty("design_level")]
public float design_level
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_zone_floor_area")]
public float power_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("power_per_person")]
public float power_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_latent")]
public float fraction_latent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_lost")]
public float fraction_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("carbon_dioxide_generation_rate")]
public float carbon_dioxide_generation_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FueltypeType
        {
        }
        
        [Description(@"The entered calculation method is used to create the maximum amount of other equipment. to set a loss, use a negative value in the following fields. for this set of attributes Choices: EquipmentLevel => Design Level -- simply enter power input of equipment Watts/Area or Power/Area => Power per Zone Floor Area -- enter the number to apply. Value * Floor Area = Equipment Level Watts/Person or Power/Person => Power per Person -- enter the number to apply. Value * Occupants = Equipment Level")]
        public enum DesignlevelcalculationmethodType
        {
        }
    }
    
    [JsonProperty("ElectricEquipment:ITE:AirCooled")]
    [Description("This object describes air-cooled electric information technology equipment (ITE) " +
        "which has variable power consumption as a function of loading and temperature.")]
    public class ElectricEquipment_ITE_AirCooled
    {
        
        private void FlowControlWithApproachTemperatures;
        
        private void FlowFromSystem;
        
        private void Watts/Area;
        
        private void Watts/Unit;
        
        private void A1;
        
        private void A2;
        
        private void A3;
        
        private void A4;
        
        private void B;
        
        private void C;
        
        private void None;
        
        private void AdjustedSupply;
        
        private void RoomAirModel;
        
        private void ZoneAirNode;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_flow_calculation_method")]
public AirflowcalculationmethodType air_flow_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (AirflowcalculationmethodType)FlowFromSystem;

[JsonProperty("design_power_input_calculation_method")]
public DesignpowerinputcalculationmethodType design_power_input_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowerinputcalculationmethodType)Watts/Unit;

[JsonProperty("watts_per_unit")]
public float watts_per_unit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_units")]
public float number_of_units
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("watts_per_zone_floor_area")]
public float watts_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_input_schedule_name")]
public string design_power_input_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cpu_loading_schedule_name")]
public string cpu_loading_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cpu_power_input_function_of_loading_and_air_temperature_curve_name")]
public string cpu_power_input_function_of_loading_and_air_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_fan_power_input_fraction")]
public float design_fan_power_input_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_fan_air_flow_rate_per_power_input")]
public float design_fan_air_flow_rate_per_power_input
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_flow_function_of_loading_and_air_temperature_curve_name")]
public string air_flow_function_of_loading_and_air_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_power_input_function_of_flow_curve_name")]
public string fan_power_input_function_of_flow_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_entering_air_temperature")]
public float design_entering_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("environmental_class")]
public EnvironmentalclassType environmental_class
{
    get
    {
    }
    set
    {
    }
}
 = (EnvironmentalclassType)None;

[JsonProperty("air_inlet_connection_type")]
public AirinletconnectiontypeType air_inlet_connection_type
{
    get
    {
    }
    set
    {
    }
}
 = (AirinletconnectiontypeType)AdjustedSupply;

[JsonProperty("air_inlet_room_air_model_node_name")]
public string air_inlet_room_air_model_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_room_air_model_node_name")]
public string air_outlet_room_air_model_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_node_name")]
public string supply_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_recirculation_fraction")]
public float design_recirculation_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("recirculation_function_of_loading_and_supply_temperature_curve_name")]
public string recirculation_function_of_loading_and_supply_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_electric_power_supply_efficiency")]
public float design_electric_power_supply_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("electric_power_supply_efficiency_function_of_part_load_ratio_curve_name")]
public string electric_power_supply_efficiency_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_electric_power_supply_losses_to_zone")]
public float fraction_of_electric_power_supply_losses_to_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cpu_end_use_subcategory")]
public string cpu_end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)ITE-CPU;

[JsonProperty("fan_end_use_subcategory")]
public string fan_end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)ITE-Fans;

[JsonProperty("electric_power_supply_end_use_subcategory")]
public string electric_power_supply_end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)ITE-UPS;

[JsonProperty("supply_temperature_difference")]
public float supply_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_temperature_difference_schedule")]
public string supply_temperature_difference_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_temperature_difference")]
public float return_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_temperature_difference_schedule")]
public string return_temperature_difference_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The specified method is used to calculate the IT inlet temperature and zone return air temperature. If FlowFromSystem is chosen, the zone is assumed to be well-mixed. If FlowControlWithApproachTemperatures is chosen, Supply and Return approach temperature should be defined to indicate the temperature difference due to the air distribution. When FlowControlWithApproachTemperatures is chosen, the inputs of Air Inlet Connection Type, Design Recirculation Fraction and Recirculation Function of Loading and Supply Temperature Curve Name are ignored. For multiple ITE objects defined for one zone, the same calculation method should apply. The FlowControlWithApproachTemperatures only applies to ITE zones with single duct VAV terminal unit. Other return air heat gains from window or lights are not allowed when FlowControlWithApproachTemperatures is chosen.")]
        public enum AirflowcalculationmethodType
        {
        }
        
        [Description("The entered calculation method is used to specify the design power input Watts/Un" +
            "it => Watts per Unit -- Design Power = Watts per Unit * Number of Units Watts/Ar" +
            "ea => Watts per Zone Floor Area -- Design Power = Watts per Zone Floor Area * Fl" +
            "oor Area")]
        public enum DesignpowerinputcalculationmethodType
        {
        }
        
        [Description("Specifies the allowable operating conditions for the air inlet conditions. Used f" +
            "or reporting time outside allowable conditions.")]
        public enum EnvironmentalclassType
        {
        }
        
        [Description(@"Specifies the type of connection between the zone and the ITE air inlet node. AdjustedSupply = ITE inlet temperature will be the current Supply Air Node temperature adjusted by the current recirculation fraction. All heat output is added to the zone air heat balance as a convective gain. ZoneAirNode = ITE air inlet condition is  the average zone condition. All heat output is added to the zone air heat balance as a convective gain. RoomAirModel = ITE air inlet and outlet are connected to room air model nodes. This field is only used when Air Flow Calculation Method is FlowFromSystem.")]
        public enum AirinletconnectiontypeType
        {
        }
    }
    
    [JsonProperty("ZoneBaseboard:OutdoorTemperatureControlled")]
    [Description("Specifies outside temperature-controlled electric baseboard heating.")]
    public class ZoneBaseboard_OutdoorTemperatureControlled
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_at_low_temperature")]
public float capacity_at_low_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_temperature")]
public float low_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_at_high_temperature")]
public float capacity_at_high_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_temperature")]
public float high_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
    }
    
    [JsonProperty("SwimmingPool:Indoor")]
    [Description("Specifies an indoor swimming pools linked to a floor surface. The pool is assumed" +
        " to cover the entire floor to which it is linked.")]
    public class SwimmingPool_Indoor
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_depth")]
public float average_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("activity_factor_schedule_name")]
public string activity_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("make_up_water_supply_schedule_name")]
public string make_up_water_supply_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cover_schedule_name")]
public string cover_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cover_evaporation_factor")]
public float cover_evaporation_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cover_convection_factor")]
public float cover_convection_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cover_short_wavelength_radiation_factor")]
public float cover_short_wavelength_radiation_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cover_long_wavelength_radiation_factor")]
public float cover_long_wavelength_radiation_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("pool_water_inlet_node")]
public string pool_water_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pool_water_outlet_node")]
public string pool_water_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pool_heating_system_maximum_water_flow_rate")]
public float pool_heating_system_maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pool_miscellaneous_equipment_power")]
public float pool_miscellaneous_equipment_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_temperature_schedule")]
public string setpoint_temperature_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_number_of_people")]
public float maximum_number_of_people
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("people_schedule")]
public string people_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("people_heat_gain_schedule")]
public string people_heat_gain_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneContaminantSourceAndSink:CarbonDioxide")]
    [Description("Represents internal CO2 gains and sinks in the zone.")]
    public class ZoneContaminantSourceAndSink_CarbonDioxide
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_generation_rate")]
public float design_generation_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneContaminantSourceAndSink:Generic:Constant")]
    [Description("Sets internal generic contaminant gains and sinks in a zone with constant values." +
        "")]
    public class ZoneContaminantSourceAndSink_Generic_Constant
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_generation_rate")]
public float design_generation_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generation_schedule_name")]
public string generation_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_removal_coefficient")]
public float design_removal_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("removal_schedule_name")]
public string removal_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceContaminantSourceAndSink:Generic:PressureDriven")]
    [Description("Simulate generic contaminant source driven by the pressure difference across a su" +
        "rface.")]
    public class SurfaceContaminantSourceAndSink_Generic_PressureDriven
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_generation_rate_coefficient")]
public float design_generation_rate_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generation_schedule_name")]
public string generation_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generation_exponent")]
public float generation_exponent
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneContaminantSourceAndSink:Generic:CutoffModel")]
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    public class ZoneContaminantSourceAndSink_Generic_CutoffModel
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_generation_rate_coefficient")]
public float design_generation_rate_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cutoff_generic_contaminant_at_which_emission_ceases")]
public float cutoff_generic_contaminant_at_which_emission_ceases
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneContaminantSourceAndSink:Generic:DecaySource")]
    [Description("Simulate generic contaminant source driven by the cutoff concentration model.")]
    public class ZoneContaminantSourceAndSink_Generic_DecaySource
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_emission_rate")]
public float initial_emission_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delay_time_constant")]
public float delay_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceContaminantSourceAndSink:Generic:BoundaryLayerDiffusion")]
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    public class SurfaceContaminantSourceAndSink_Generic_BoundaryLayerDiffusion
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mass_transfer_coefficient")]
public float mass_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("henry_adsorption_constant_or_partition_coefficient")]
public float henry_adsorption_constant_or_partition_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SurfaceContaminantSourceAndSink:Generic:DepositionVelocitySink")]
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    public class SurfaceContaminantSourceAndSink_Generic_DepositionVelocitySink
    {
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("deposition_velocity")]
public float deposition_velocity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneContaminantSourceAndSink:Generic:DepositionRateSink")]
    [Description("Simulate generic contaminant source driven by the boundary layer diffusion contro" +
        "lled model.")]
    public class ZoneContaminantSourceAndSink_Generic_DepositionRateSink
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("deposition_rate")]
public float deposition_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.LocationandClimate
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Site:Location")]
    [Description("Specifies the building\'s location. Only one location is allowed. Weather data fil" +
        "e location, if it exists, will override this object.")]
    public class Site_Location
    {
        

[JsonProperty("latitude")]
public float latitude
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("longitude")]
public float longitude
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("time_zone")]
public float time_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("elevation")]
public float elevation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Site:VariableLocation")]
    [Description("Captures the scheduling of a moving/reorienting building, or more likely a vessel" +
        "")]
    public class Site_VariableLocation
    {
        

[JsonProperty("building_location_latitude_schedule")]
public string building_location_latitude_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_location_longitude_schedule")]
public string building_location_longitude_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_location_orientation_schedule")]
public string building_location_orientation_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SizingPeriod:DesignDay")]
    [Description(@"The design day object creates the parameters for the program to create the 24 hour weather profile that can be used for sizing as well as running to test the other simulation parameters. Parameters in this include a date (month and day), a day type (which uses the appropriate schedules for either sizing or simple tests), min/max temperatures, wind speeds, and solar radiation values.")]
    public class SizingPeriod_DesignDay
    {
        
        private void CustomDay1;
        
        private void CustomDay2;
        
        private void Friday;
        
        private void Holiday;
        
        private void Monday;
        
        private void Saturday;
        
        private void SummerDesignDay;
        
        private void Sunday;
        
        private void Thursday;
        
        private void Tuesday;
        
        private void Wednesday;
        
        private void WinterDesignDay;
        
        private void DefaultMultipliers;
        
        private void DifferenceSchedule;
        
        private void MultiplierSchedule;
        
        private void TemperatureProfileSchedule;
        
        private void DewPoint;
        
        private void Enthalpy;
        
        private void HumidityRatio;
        
        private void RelativeHumiditySchedule;
        
        private void WetBulb;
        
        private void WetBulbProfileDefaultMultipliers;
        
        private void WetBulbProfileDifferenceSchedule;
        
        private void WetBulbProfileMultiplierSchedule;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void ASHRAEClearSky;
        
        private void ASHRAETau;
        
        private void ASHRAETau2017;
        
        private void Schedule;
        
        private void ZhangHuang;
        
        private void FullResetAtBeginEnvironment;
        
        private void SuppressAllBeginEnvironmentResets;
        

[JsonProperty("month")]
public float month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_month")]
public float day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_type")]
public DaytypeType day_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_dry_bulb_temperature")]
public float maximum_dry_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("daily_dry_bulb_temperature_range")]
public float daily_dry_bulb_temperature_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("dry_bulb_temperature_range_modifier_type")]
public DrybulbtemperaturerangemodifiertypeType dry_bulb_temperature_range_modifier_type
{
    get
    {
    }
    set
    {
    }
}
 = (DrybulbtemperaturerangemodifiertypeType)DefaultMultipliers;

[JsonProperty("dry_bulb_temperature_range_modifier_day_schedule_name")]
public string dry_bulb_temperature_range_modifier_day_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_condition_type")]
public HumidityconditiontypeType humidity_condition_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidityconditiontypeType)WetBulb;

[JsonProperty("wetbulb_or_dewpoint_at_maximum_dry_bulb")]
public float wetbulb_or_dewpoint_at_maximum_dry_bulb
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_condition_day_schedule_name")]
public string humidity_condition_day_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_ratio_at_maximum_dry_bulb")]
public float humidity_ratio_at_maximum_dry_bulb
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_at_maximum_dry_bulb")]
public float enthalpy_at_maximum_dry_bulb
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("daily_wet_bulb_temperature_range")]
public float daily_wet_bulb_temperature_range
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("barometric_pressure")]
public float barometric_pressure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_speed")]
public float wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction")]
public float wind_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rain_indicator")]
public RainindicatorType rain_indicator
{
    get
    {
    }
    set
    {
    }
}
 = (RainindicatorType)No;

[JsonProperty("snow_indicator")]
public SnowindicatorType snow_indicator
{
    get
    {
    }
    set
    {
    }
}
 = (SnowindicatorType)No;

[JsonProperty("daylight_saving_time_indicator")]
public DaylightsavingtimeindicatorType daylight_saving_time_indicator
{
    get
    {
    }
    set
    {
    }
}
 = (DaylightsavingtimeindicatorType)No;

[JsonProperty("solar_model_indicator")]
public SolarmodelindicatorType solar_model_indicator
{
    get
    {
    }
    set
    {
    }
}
 = (SolarmodelindicatorType)ASHRAEClearSky;

[JsonProperty("beam_solar_day_schedule_name")]
public string beam_solar_day_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diffuse_solar_day_schedule_name")]
public string diffuse_solar_day_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ashrae_clear_sky_optical_depth_for_beam_irradiance_taub_")]
public float ashrae_clear_sky_optical_depth_for_beam_irradiance_taub_
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ashrae_clear_sky_optical_depth_for_diffuse_irradiance_taud_")]
public float ashrae_clear_sky_optical_depth_for_diffuse_irradiance_taud_
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sky_clearness")]
public float sky_clearness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_number_warmup_days")]
public float maximum_number_warmup_days
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_environment_reset_mode")]
public BeginenvironmentresetmodeType begin_environment_reset_mode
{
    get
    {
    }
    set
    {
    }
}
 = (BeginenvironmentresetmodeType)FullResetAtBeginEnvironment;
        
        [Description("Day Type selects the schedules appropriate for this design day")]
        public enum DaytypeType
        {
        }
        
        [Description("Type of modifier to the dry-bulb temperature calculated for the timestep")]
        public enum DrybulbtemperaturerangemodifiertypeType
        {
        }
        
        [Description("values/schedules indicated here and in subsequent fields create the humidity valu" +
            "es in the 24 hour design day conditions profile.")]
        public enum HumidityconditiontypeType
        {
        }
        
        [Description("Yes is raining (all day), No is not raining")]
        public enum RainindicatorType
        {
        }
        
        [Description("Yes is Snow on Ground, No is no Snow on Ground")]
        public enum SnowindicatorType
        {
        }
        
        [Description("Yes -- use schedules modified for Daylight Saving Time Schedules. No - do not use" +
            " schedules modified for Daylight Saving Time Schedules")]
        public enum DaylightsavingtimeindicatorType
        {
        }
        
        public enum SolarmodelindicatorType
        {
        }
        
        [Description("If used this can control if you want the thermal history to be reset at the begin" +
            "ning of the design day. When using a series of similiar design days, this field " +
            "can be used to retain warmup state from the previous design day.")]
        public enum BeginenvironmentresetmodeType
        {
        }
    }
    
    [JsonProperty("SizingPeriod:WeatherFileDays")]
    [Description("Use a weather file period for design sizing calculations.")]
    public class SizingPeriod_WeatherFileDays
    {
        
        private void CustomDay1;
        
        private void CustomDay2;
        
        private void Friday;
        
        private void Monday;
        
        private void Saturday;
        
        private void SummerDesignDay;
        
        private void Sunday;
        
        private void Thursday;
        
        private void Tuesday;
        
        private void Wednesday;
        
        private void WinterDesignDay;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("begin_month")]
public float begin_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_day_of_month")]
public float begin_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_month")]
public float end_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_day_of_month")]
public float end_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_week_for_start_day")]
public DayofweekforstartdayType day_of_week_for_start_day
{
    get
    {
    }
    set
    {
    }
}
 = (DayofweekforstartdayType)Monday;

[JsonProperty("use_weather_file_daylight_saving_period")]
public UseweatherfiledaylightsavingperiodType use_weather_file_daylight_saving_period
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfiledaylightsavingperiodType)Yes;

[JsonProperty("use_weather_file_rain_and_snow_indicators")]
public UseweatherfilerainandsnowindicatorsType use_weather_file_rain_and_snow_indicators
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilerainandsnowindicatorsType)Yes;
        
        [Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
        public enum DayofweekforstartdayType
        {
        }
        
        [Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
            "o not use the daylight saving period as specified on the Weatherfile.")]
        public enum UseweatherfiledaylightsavingperiodType
        {
        }
        
        public enum UseweatherfilerainandsnowindicatorsType
        {
        }
    }
    
    [JsonProperty("SizingPeriod:WeatherFileConditionType")]
    [Description("Use a weather file period for design sizing calculations. EPW weather files are c" +
        "reated with typical and extreme periods created heuristically from the weather f" +
        "ile data. For more details on these periods, see AuxiliaryPrograms document.")]
    public class SizingPeriod_WeatherFileConditionType
    {
        
        private void AutumnTypical;
        
        private void DrySeason;
        
        private void NoDrySeason;
        
        private void NoDrySeasonMax;
        
        private void NoDrySeasonMin;
        
        private void NoWetSeason;
        
        private void NoWetSeasonMax;
        
        private void NoWetSeasonMin;
        
        private void SpringTypical;
        
        private void SummerExtreme;
        
        private void SummerTypical;
        
        private void TropicalCold;
        
        private void TropicalHot;
        
        private void WetSeason;
        
        private void WinterExtreme;
        
        private void WinterTypical;
        
        private void CustomDay1;
        
        private void CustomDay2;
        
        private void Friday;
        
        private void Monday;
        
        private void Saturday;
        
        private void SummerDesignDay;
        
        private void Sunday;
        
        private void Thursday;
        
        private void Tuesday;
        
        private void Wednesday;
        
        private void WinterDesignDay;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("period_selection")]
public PeriodselectionType period_selection
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_week_for_start_day")]
public DayofweekforstartdayType day_of_week_for_start_day
{
    get
    {
    }
    set
    {
    }
}
 = (DayofweekforstartdayType)Monday;

[JsonProperty("use_weather_file_daylight_saving_period")]
public UseweatherfiledaylightsavingperiodType use_weather_file_daylight_saving_period
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfiledaylightsavingperiodType)Yes;

[JsonProperty("use_weather_file_rain_and_snow_indicators")]
public UseweatherfilerainandsnowindicatorsType use_weather_file_rain_and_snow_indicators
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilerainandsnowindicatorsType)Yes;
        
        [Description("Following is a list of all possible types of Extreme and Typical periods that mig" +
            "ht be identified in the Weather File. Not all possible types are available for a" +
            "ll weather files.")]
        public enum PeriodselectionType
        {
        }
        
        [Description(@"=[|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|SummerDesignDay|WinterDesignDay| |CustomDay1|CustomDay2]; if you use SummerDesignDay or WinterDesignDay or the CustomDays then this will apply to the whole period; other days (i.e., Monday) will signify a start day and normal sequence of subsequent days")]
        public enum DayofweekforstartdayType
        {
        }
        
        [Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
            "o not use the daylight saving period as specified on the Weatherfile.")]
        public enum UseweatherfiledaylightsavingperiodType
        {
        }
        
        public enum UseweatherfilerainandsnowindicatorsType
        {
        }
    }
    
    [JsonProperty("RunPeriod")]
    [Description("Specify a range of dates and other parameters for a simulation. Multiple run peri" +
        "ods may be input, but they may not overlap.")]
    public class RunPeriod
    {
        
        private void Friday;
        
        private void Monday;
        
        private void Saturday;
        
        private void Sunday;
        
        private void Thursday;
        
        private void Tuesday;
        
        private void Wednesday;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("begin_month")]
public float begin_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_day_of_month")]
public float begin_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("begin_year")]
public float begin_year
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_month")]
public float end_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_day_of_month")]
public float end_day_of_month
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_year")]
public float end_year
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_week_for_start_day")]
public DayofweekforstartdayType day_of_week_for_start_day
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_weather_file_holidays_and_special_days")]
public UseweatherfileholidaysandspecialdaysType use_weather_file_holidays_and_special_days
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfileholidaysandspecialdaysType)Yes;

[JsonProperty("use_weather_file_daylight_saving_period")]
public UseweatherfiledaylightsavingperiodType use_weather_file_daylight_saving_period
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfiledaylightsavingperiodType)Yes;

[JsonProperty("apply_weekend_holiday_rule")]
public ApplyweekendholidayruleType apply_weekend_holiday_rule
{
    get
    {
    }
    set
    {
    }
}
 = (ApplyweekendholidayruleType)No;

[JsonProperty("use_weather_file_rain_indicators")]
public UseweatherfilerainindicatorsType use_weather_file_rain_indicators
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilerainindicatorsType)Yes;

[JsonProperty("use_weather_file_snow_indicators")]
public UseweatherfilesnowindicatorsType use_weather_file_snow_indicators
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilesnowindicatorsType)Yes;

[JsonProperty("treat_weather_as_actual")]
public TreatweatherasactualType treat_weather_as_actual
{
    get
    {
    }
    set
    {
    }
}
 = (TreatweatherasactualType)No;
        
        [Description("=[Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday]; If no year is input," +
            " this field will default to Sunday If a year is input and this field is blank, t" +
            "he correct weekday is determined")]
        public enum DayofweekforstartdayType
        {
        }
        
        [Description("If yes or blank, use holidays as specified on Weatherfile. If no, do not use the " +
            "holidays specified on the Weatherfile. Note: You can still specify holidays/spec" +
            "ial days using the RunPeriodControl:SpecialDays object(s).")]
        public enum UseweatherfileholidaysandspecialdaysType
        {
        }
        
        [Description("If yes or blank, use daylight saving period as specified on Weatherfile. If no, d" +
            "o not use the daylight saving period as specified on the Weatherfile.")]
        public enum UseweatherfiledaylightsavingperiodType
        {
        }
        
        [Description("if yes and single day holiday falls on weekend, \"holiday\" occurs on following Mon" +
            "day")]
        public enum ApplyweekendholidayruleType
        {
        }
        
        public enum UseweatherfilerainindicatorsType
        {
        }
        
        public enum UseweatherfilesnowindicatorsType
        {
        }
        
        public enum TreatweatherasactualType
        {
        }
    }
    
    [JsonProperty("RunPeriodControl:SpecialDays")]
    [Description(@"This object sets up holidays/special days to be used during weather file run periods. (These are not used with SizingPeriod:* objects.) Depending on the value in the run period, days on the weather file may also be used. However, the weather file specification will take precedence over any specification shown here. (No error message on duplicate days or overlapping days).")]
    public class RunPeriodControl_SpecialDays
    {
        
        private void CustomDay1;
        
        private void CustomDay2;
        
        private void Holiday;
        
        private void SummerDesignDay;
        
        private void WinterDesignDay;
        

[JsonProperty("start_date")]
public string start_date
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("duration")]
public float duration
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("special_day_type")]
public SpecialdaytypeType special_day_type
{
    get
    {
    }
    set
    {
    }
}
 = (SpecialdaytypeType)Holiday;
        
        [Description("Special Day Type selects the schedules appropriate for each day so labeled")]
        public enum SpecialdaytypeType
        {
        }
    }
    
    [JsonProperty("RunPeriodControl:DaylightSavingTime")]
    [Description(@"This object sets up the daylight saving time period for any RunPeriod. Ignores any daylight saving time period on the weather file and uses this definition. These are not used with SizingPeriod:DesignDay objects. Use with SizingPeriod:WeatherFileDays object can be controlled in that object.")]
    public class RunPeriodControl_DaylightSavingTime
    {
        

[JsonProperty("start_date")]
public string start_date
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_date")]
public string end_date
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WeatherProperty:SkyTemperature")]
    [Description("This object is used to override internal sky temperature calculations.")]
    public class WeatherProperty_SkyTemperature
    {
        
        private void BerdahlMartin;
        
        private void Brunt;
        
        private void ClarkAllen;
        
        private void DifferenceScheduleDewPointValue;
        
        private void DifferenceScheduleDryBulbValue;
        
        private void Idso;
        
        private void ScheduleValue;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("calculation_type")]
public CalculationtypeType calculation_type
{
    get
    {
    }
    set
    {
    }
}
 = (CalculationtypeType)ClarkAllen;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_weather_file_horizontal_ir")]
public UseweatherfilehorizontalirType use_weather_file_horizontal_ir
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilehorizontalirType)Yes;
        
        [Description("The field indicates that the sky temperature will be imported from external sched" +
            "ules or calculated by alternative methods other than default.")]
        public enum CalculationtypeType
        {
        }
        
        [Description(@"If yes or blank, use Horizontal IR values from weather file when present, otherwise use the specified sky model. If no, always use the specified sky model and ignore the horizontal IR values from the weather file. For Calculation Type = ScheduleValue, DifferenceScheduleDryBulbValue or DifferenceScheduleDewPointValue, this field is ignored and the scheduled values are used.")]
        public enum UseweatherfilehorizontalirType
        {
        }
    }
    
    [JsonProperty("Site:WeatherStation")]
    [Description("This object should only be used for non-standard weather data. Standard weather d" +
        "ata such as TMY2, IWEC, and ASHRAE design day data are all measured at the defau" +
        "lt conditions and do not require this object.")]
    public class Site_WeatherStation
    {
        

[JsonProperty("wind_sensor_height_above_ground")]
public float wind_sensor_height_above_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("wind_speed_profile_exponent")]
public float wind_speed_profile_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.14;

[JsonProperty("wind_speed_profile_boundary_layer_thickness")]
public float wind_speed_profile_boundary_layer_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)270;

[JsonProperty("air_temperature_sensor_height_above_ground")]
public float air_temperature_sensor_height_above_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;
    }
    
    [JsonProperty("Site:HeightVariation")]
    [Description(@"This object is used if the user requires advanced control over height-dependent variations in wind speed and temperature. When this object is not present, the default model for temperature dependence on height is used, and the wind speed is modeled according to the Terrain field of the BUILDING object.")]
    public class Site_HeightVariation
    {
        

[JsonProperty("wind_speed_profile_exponent")]
public float wind_speed_profile_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.22;

[JsonProperty("wind_speed_profile_boundary_layer_thickness")]
public float wind_speed_profile_boundary_layer_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)370;

[JsonProperty("air_temperature_gradient_coefficient")]
public float air_temperature_gradient_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0065;
    }
    
    [JsonProperty("Site:GroundTemperature:BuildingSurface")]
    [Description(@"These temperatures are specifically for those surfaces that have the outside environment of ""Ground"". Documentation about what values these should be is located in the Auxiliary programs document (Ground Heat Transfer) as well as the InputOutput Reference. CAUTION - Do not use the ""undisturbed"" ground temperatures from the weather data. These values are too extreme for the soil under a conditioned building. For best results, use the Slab or Basement program to calculate custom monthly average ground temperatures (see Auxiliary Programs). For typical commercial buildings in the USA, a reasonable default value is 2C less than the average indoor space temperature.")]
    public class Site_GroundTemperature_BuildingSurface
    {
        

[JsonProperty("january_ground_temperature")]
public float january_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("february_ground_temperature")]
public float february_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("march_ground_temperature")]
public float march_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("april_ground_temperature")]
public float april_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("may_ground_temperature")]
public float may_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("june_ground_temperature")]
public float june_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("july_ground_temperature")]
public float july_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("august_ground_temperature")]
public float august_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("september_ground_temperature")]
public float september_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("october_ground_temperature")]
public float october_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("november_ground_temperature")]
public float november_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("december_ground_temperature")]
public float december_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;
    }
    
    [JsonProperty("Site:GroundTemperature:FCfactorMethod")]
    [Description("These temperatures are specifically for underground walls and ground floors defin" +
        "ed with the C-factor and F-factor methods, and should be close to the monthly av" +
        "erage outdoor air temperature delayed by 3 months for the location.")]
    public class Site_GroundTemperature_FCfactorMethod
    {
        

[JsonProperty("january_ground_temperature")]
public float january_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("february_ground_temperature")]
public float february_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("march_ground_temperature")]
public float march_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("april_ground_temperature")]
public float april_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("may_ground_temperature")]
public float may_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("june_ground_temperature")]
public float june_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("july_ground_temperature")]
public float july_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("august_ground_temperature")]
public float august_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("september_ground_temperature")]
public float september_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("october_ground_temperature")]
public float october_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("november_ground_temperature")]
public float november_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("december_ground_temperature")]
public float december_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;
    }
    
    [JsonProperty("Site:GroundTemperature:Shallow")]
    [Description("These temperatures are specifically for the Surface Ground Heat Exchanger and sho" +
        "uld probably be close to the average outdoor air temperature for the location. T" +
        "hey are not used in other models.")]
    public class Site_GroundTemperature_Shallow
    {
        

[JsonProperty("january_surface_ground_temperature")]
public float january_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("february_surface_ground_temperature")]
public float february_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("march_surface_ground_temperature")]
public float march_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("april_surface_ground_temperature")]
public float april_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("may_surface_ground_temperature")]
public float may_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("june_surface_ground_temperature")]
public float june_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("july_surface_ground_temperature")]
public float july_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("august_surface_ground_temperature")]
public float august_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("september_surface_ground_temperature")]
public float september_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("october_surface_ground_temperature")]
public float october_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("november_surface_ground_temperature")]
public float november_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("december_surface_ground_temperature")]
public float december_surface_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;
    }
    
    [JsonProperty("Site:GroundTemperature:Deep")]
    [Description("These temperatures are specifically for the ground heat exchangers that would use" +
        " \"deep\" (3-4 m depth) ground temperatures for their heat source. They are not us" +
        "ed in other models.")]
    public class Site_GroundTemperature_Deep
    {
        

[JsonProperty("january_deep_ground_temperature")]
public float january_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("february_deep_ground_temperature")]
public float february_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("march_deep_ground_temperature")]
public float march_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("april_deep_ground_temperature")]
public float april_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("may_deep_ground_temperature")]
public float may_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("june_deep_ground_temperature")]
public float june_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("july_deep_ground_temperature")]
public float july_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("august_deep_ground_temperature")]
public float august_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("september_deep_ground_temperature")]
public float september_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("october_deep_ground_temperature")]
public float october_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("november_deep_ground_temperature")]
public float november_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("december_deep_ground_temperature")]
public float december_deep_ground_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;
    }
    
    [JsonProperty("Site:GroundTemperature:Undisturbed:FiniteDifference")]
    [Description("Undisturbed ground temperature object using a detailed finite difference 1-D mode" +
        "l")]
    public class Site_GroundTemperature_Undisturbed_FiniteDifference
    {
        

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_moisture_content_volume_fraction")]
public float soil_moisture_content_volume_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public float soil_moisture_content_volume_fraction_at_saturation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("evapotranspiration_ground_cover_parameter")]
public float evapotranspiration_ground_cover_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;
    }
    
    [JsonProperty("Site:GroundTemperature:Undisturbed:KusudaAchenbach")]
    [Description("Undisturbed ground temperature object using the Kusuda-Achenbach 1965 correlation" +
        ".")]
    public class Site_GroundTemperature_Undisturbed_KusudaAchenbach
    {
        

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_soil_surface_temperature")]
public float average_soil_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_amplitude_of_surface_temperature")]
public float average_amplitude_of_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phase_shift_of_minimum_surface_temperature")]
public float phase_shift_of_minimum_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Site:GroundTemperature:Undisturbed:Xing")]
    [Description("Undisturbed ground temperature object using the Xing 2014 2 harmonic parameter mo" +
        "del.")]
    public class Site_GroundTemperature_Undisturbed_Xing
    {
        

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_soil_surface_tempeature")]
public float average_soil_surface_tempeature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_surface_temperature_amplitude_1")]
public float soil_surface_temperature_amplitude_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_surface_temperature_amplitude_2")]
public float soil_surface_temperature_amplitude_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phase_shift_of_temperature_amplitude_1")]
public float phase_shift_of_temperature_amplitude_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phase_shift_of_temperature_amplitude_2")]
public float phase_shift_of_temperature_amplitude_2
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Site:GroundDomain:Slab")]
    [Description("Ground-coupled slab model for on-grade and in-grade cases with or without insulat" +
        "ion.")]
    public class Site_GroundDomain_Slab
    {
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        
        private void InGrade;
        
        private void OnGrade;
        
        private void No;
        
        private void Yes;
        
        private void Full;
        
        private void Perimeter;
        
        private void No;
        
        private void Yes;
        
        private void Hourly;
        
        private void Timestep;
        

[JsonProperty("ground_domain_depth")]
public float ground_domain_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("aspect_ratio")]
public float aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("perimeter_offset")]
public float perimeter_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2800;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)850;

[JsonProperty("soil_moisture_content_volume_fraction")]
public float soil_moisture_content_volume_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public float soil_moisture_content_volume_fraction_at_saturation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evapotranspiration_ground_cover_parameter")]
public float evapotranspiration_ground_cover_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("slab_boundary_condition_model_name")]
public string slab_boundary_condition_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slab_location")]
public SlablocationType slab_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slab_material_name")]
public string slab_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("horizontal_insulation")]
public HorizontalinsulationType horizontal_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (HorizontalinsulationType)No;

[JsonProperty("horizontal_insulation_material_name")]
public string horizontal_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("horizontal_insulation_extents")]
public HorizontalinsulationextentsType horizontal_insulation_extents
{
    get
    {
    }
    set
    {
    }
}
 = (HorizontalinsulationextentsType)Full;

[JsonProperty("perimeter_insulation_width")]
public float perimeter_insulation_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_insulation")]
public VerticalinsulationType vertical_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (VerticalinsulationType)No;

[JsonProperty("vertical_insulation_material_name")]
public string vertical_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_insulation_depth")]
public float vertical_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simulation_timestep")]
public SimulationtimestepType simulation_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (SimulationtimestepType)Hourly;

[JsonProperty("geometric_mesh_coefficient")]
public float geometric_mesh_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.6;

[JsonProperty("mesh_density_parameter")]
public float mesh_density_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
        
        [Description("This field specifies whether the slab is located \"in-grade\" or \"on-grade\"")]
        public enum SlablocationType
        {
        }
        
        [Description("This field specifies the presence of insulation beneath the slab. Only required f" +
            "or in-grade case.")]
        public enum HorizontalinsulationType
        {
        }
        
        [Description("This field specifies whether the horizontal insulation fully insulates the surfac" +
            "e or is perimeter only insulation")]
        public enum HorizontalinsulationextentsType
        {
        }
        
        [Description("This field specifies the presence of vertical insulation at the slab edge.")]
        public enum VerticalinsulationType
        {
        }
        
        [Description("This field specifies the ground domain simulation timestep.")]
        public enum SimulationtimestepType
        {
        }
    }
    
    [JsonProperty("Site:GroundDomain:Basement")]
    [Description("Ground-coupled basement model for simulating basements or other underground zones" +
        ".")]
    public class Site_GroundDomain_Basement
    {
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        
        private void No;
        
        private void Yes;
        
        private void Full;
        
        private void Perimeter;
        
        private void No;
        
        private void Yes;
        
        private void Hourly;
        
        private void Timestep;
        

[JsonProperty("ground_domain_depth")]
public float ground_domain_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("aspect_ratio")]
public float aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("perimeter_offset")]
public float perimeter_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2800;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)850;

[JsonProperty("soil_moisture_content_volume_fraction")]
public float soil_moisture_content_volume_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public float soil_moisture_content_volume_fraction_at_saturation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evapotranspiration_ground_cover_parameter")]
public float evapotranspiration_ground_cover_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("basement_floor_boundary_condition_model_name")]
public string basement_floor_boundary_condition_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("horizontal_insulation")]
public HorizontalinsulationType horizontal_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (HorizontalinsulationType)No;

[JsonProperty("horizontal_insulation_material_name")]
public string horizontal_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("horizontal_insulation_extents")]
public HorizontalinsulationextentsType horizontal_insulation_extents
{
    get
    {
    }
    set
    {
    }
}
 = (HorizontalinsulationextentsType)Full;

[JsonProperty("perimeter_horizontal_insulation_width")]
public float perimeter_horizontal_insulation_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basement_wall_depth")]
public float basement_wall_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basement_wall_boundary_condition_model_name")]
public string basement_wall_boundary_condition_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_insulation")]
public VerticalinsulationType vertical_insulation
{
    get
    {
    }
    set
    {
    }
}
 = (VerticalinsulationType)No;

[JsonProperty("basement_wall_vertical_insulation_material_name")]
public string basement_wall_vertical_insulation_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_insulation_depth")]
public float vertical_insulation_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simulation_timestep")]
public SimulationtimestepType simulation_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (SimulationtimestepType)Hourly;

[JsonProperty("mesh_density_parameter")]
public float mesh_density_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
        
        [Description("This field specifies the presence of insulation beneath the basement floor.")]
        public enum HorizontalinsulationType
        {
        }
        
        [Description("This field specifies whether the horizontal insulation fully insulates the surfac" +
            "e or is perimeter only insulation")]
        public enum HorizontalinsulationextentsType
        {
        }
        
        public enum VerticalinsulationType
        {
        }
        
        [Description("This field specifies the basement domain simulation interval.")]
        public enum SimulationtimestepType
        {
        }
    }
    
    [JsonProperty("Site:GroundReflectance")]
    [Description("Specifies the ground reflectance values used to calculate ground reflected solar." +
        " The ground reflectance can be further modified when snow is on the ground by Si" +
        "te:GroundReflectance:SnowModifier.")]
    public class Site_GroundReflectance
    {
        

[JsonProperty("january_ground_reflectance")]
public float january_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("february_ground_reflectance")]
public float february_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("march_ground_reflectance")]
public float march_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("april_ground_reflectance")]
public float april_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("may_ground_reflectance")]
public float may_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("june_ground_reflectance")]
public float june_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("july_ground_reflectance")]
public float july_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("august_ground_reflectance")]
public float august_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("september_ground_reflectance")]
public float september_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("october_ground_reflectance")]
public float october_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("november_ground_reflectance")]
public float november_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("december_ground_reflectance")]
public float december_ground_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;
    }
    
    [JsonProperty("Site:GroundReflectance:SnowModifier")]
    [Description("Specifies ground reflectance multipliers when snow resident on the ground. These " +
        "multipliers are applied to the \"normal\" ground reflectances specified in Site:Gr" +
        "oundReflectance.")]
    public class Site_GroundReflectance_SnowModifier
    {
        

[JsonProperty("ground_reflected_solar_modifier")]
public float ground_reflected_solar_modifier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("daylighting_ground_reflected_solar_modifier")]
public float daylighting_ground_reflected_solar_modifier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("Site:WaterMainsTemperature")]
    [Description("Used to calculate water mains temperatures delivered by underground water main pi" +
        "pes. Water mains temperatures are a function of outdoor climate conditions and v" +
        "ary with time of year.")]
    public class Site_WaterMainsTemperature
    {
        
        private void Correlation;
        
        private void CorrelationFromWeatherFile;
        
        private void Schedule;
        

[JsonProperty("calculation_method")]
public CalculationmethodType calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (CalculationmethodType)CorrelationFromWeatherFile;

[JsonProperty("temperature_schedule_name")]
public string temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("annual_average_outdoor_air_temperature")]
public float annual_average_outdoor_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_difference_in_monthly_average_outdoor_air_temperatures")]
public float maximum_difference_in_monthly_average_outdoor_air_temperatures
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If calculation method is CorrelationFromWeatherFile, the two numeric input fields" +
            " are ignored. Instead, EnergyPlus calculates them from weather file.")]
        public enum CalculationmethodType
        {
        }
    }
    
    [JsonProperty("Site:Precipitation")]
    [Description("Used to describe the amount of water precipitation at the building site. Precipit" +
        "ation includes both rain and the equivalent water content of snow.")]
    public class Site_Precipitation
    {
        
        private void ScheduleAndDesignLevel;
        

[JsonProperty("precipitation_model_type")]
public PrecipitationmodeltypeType precipitation_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_level_for_total_annual_precipitation")]
public float design_level_for_total_annual_precipitation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("precipitation_rates_schedule_name")]
public string precipitation_rates_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_total_annual_precipitation")]
public float average_total_annual_precipitation
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum PrecipitationmodeltypeType
        {
        }
    }
    
    [JsonProperty("RoofIrrigation")]
    [Description("Used to describe the amount of irrigation on the ecoroof surface over the course " +
        "of the simulation runperiod.")]
    public class RoofIrrigation
    {
        
        private void Schedule;
        
        private void SmartSchedule;
        

[JsonProperty("irrigation_model_type")]
public IrrigationmodeltypeType irrigation_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("irrigation_rate_schedule_name")]
public string irrigation_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("irrigation_maximum_saturation_threshold")]
public float irrigation_maximum_saturation_threshold
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;
        
        [Description("SmartSchedule will not allow irrigation when soil is already moist. Current thres" +
            "hold set at 30% of saturation.")]
        public enum IrrigationmodeltypeType
        {
        }
    }
    
    [JsonProperty("Site:SolarAndVisibleSpectrum")]
    [Description("If this object is omitted, the default solar and visible spectrum data will be us" +
        "ed.")]
    public class Site_SolarAndVisibleSpectrum
    {
        
        private void Default;
        
        private void UserDefined;
        

[JsonProperty("spectrum_data_method")]
public SpectrumdatamethodType spectrum_data_method
{
    get
    {
    }
    set
    {
    }
}
 = (SpectrumdatamethodType)Default;

[JsonProperty("solar_spectrum_data_object_name")]
public string solar_spectrum_data_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_spectrum_data_object_name")]
public string visible_spectrum_data_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("The method specifies which of the solar and visible spectrum data to use in the c" +
            "alculations. Choices: Default - existing hard-wired spectrum data in EnergyPlus." +
            " UserDefined - user specified spectrum data referenced by the next two fields")]
        public enum SpectrumdatamethodType
        {
        }
    }
    
    [JsonProperty("Site:SpectrumData")]
    [Description("Spectrum Data Type is followed by up to 107 sets of normal-incidence measured val" +
        "ues of [wavelength, spectrum] for wavelengths covering the solar (0.25 to 2.5 mi" +
        "crons) or visible spectrum (0.38 to 0.78 microns)")]
    public class Site_SpectrumData
    {
        
        private void Solar;
        
        private void Visible;
        

[JsonProperty("spectrum_data_type")]
public SpectrumdatatypeType spectrum_data_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wavelength")]
public float wavelength
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("spectrum")]
public float spectrum
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wavelength_1")]
public float wavelength_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("spectrum_2")]
public float spectrum_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("extensions")]
public string extensions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SpectrumdatatypeType
        {
        }
    }
}
namespace EnergyPlus.NodeBranchManagement
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Branch")]
    [Description("List components on the branch in simulation and connection order Note: this shoul" +
        "d NOT include splitters or mixers which define endpoints of branches")]
    public class Branch
    {
        

[JsonProperty("pressure_drop_curve_name")]
public string pressure_drop_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("components")]
public string components
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("BranchList")]
    [Description("Branches MUST be listed in Flow order: Inlet branch, then parallel branches, then" +
        " Outlet branch. Branches are simulated in the order listed. Branch names cannot " +
        "be duplicated within a single branch list.")]
    public class BranchList
    {
        

[JsonProperty("branches")]
public string branches
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Connector:Splitter")]
    [Description("Split one air/water stream into N outlet streams. Branch names cannot be duplicat" +
        "ed within a single Splitter list.")]
    public class Connector_Splitter
    {
        

[JsonProperty("inlet_branch_name")]
public string inlet_branch_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("branches")]
public string branches
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Connector:Mixer")]
    [Description("Mix N inlet air/water streams into one. Branch names cannot be duplicated within " +
        "a single mixer list.")]
    public class Connector_Mixer
    {
        

[JsonProperty("outlet_branch_name")]
public string outlet_branch_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("branches")]
public string branches
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ConnectorList")]
    [Description("only two connectors allowed per loop if two entered, one must be Connector:Splitt" +
        "er and one must be Connector:Mixer")]
    public class ConnectorList
    {
        
        private void Connector:Mixer;
        
        private void Connector:Splitter;
        
        private void Connector:Mixer;
        
        private void Connector:Splitter;
        

[JsonProperty("connector_1_object_type")]
public ConnectorobjecttypeType connector_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("connector_1_name")]
public string connector_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("connector_2_object_type")]
public ConnectorobjecttypeType connector_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("connector_2_name")]
public string connector_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ConnectorobjecttypeType
        {
        }
        
        public enum ConnectorobjecttypeType
        {
        }
    }
    
    [JsonProperty("NodeList")]
    [Description("This object is used in places where lists of nodes may be needed, e.g. ZoneHVAC:E" +
        "quipmentConnections field Zone Air Inlet Node or NodeList Name")]
    public class NodeList
    {
        

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("OutdoorAir:Node")]
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node. It allows the height above ground to be specified. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object. This object defines local outdoor air environmental conditions.")]
    public class OutdoorAir_Node
    {
        
        private void No;
        
        private void Yes;
        
        private void Absolute;
        
        private void Relative;
        

[JsonProperty("height_above_ground")]
public float height_above_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-1;

[JsonProperty("drybulb_temperature_schedule_name")]
public string drybulb_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wetbulb_temperature_schedule_name")]
public string wetbulb_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_speed_schedule_name")]
public string wind_speed_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_direction_schedule_name")]
public string wind_direction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_pressure_coefficient_curve_name")]
public string wind_pressure_coefficient_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("symmetric_wind_pressure_coefficient_curve")]
public SymmetricwindpressurecoefficientcurveType symmetric_wind_pressure_coefficient_curve
{
    get
    {
    }
    set
    {
    }
}
 = (SymmetricwindpressurecoefficientcurveType)No;

[JsonProperty("wind_angle_type")]
public WindangletypeType wind_angle_type
{
    get
    {
    }
    set
    {
    }
}
 = (WindangletypeType)Absolute;
        
        [Description("Specify whether the pressure curve is symmetric or not. Specify Yes for curves th" +
            "at should be evaluated from 0 to 180 degrees Specify No for curves that should b" +
            "e evaluated from 0 to 360 degrees")]
        public enum SymmetricwindpressurecoefficientcurveType
        {
        }
        
        [Description("Specify whether the angle used to compute the wind pressure coefficient is absolu" +
            "te or relative Specify Relative to compute the angle between the wind direction " +
            "and the surface azimuth Specify Absolute to use the wind direction angle directl" +
            "y")]
        public enum WindangletypeType
        {
        }
    }
    
    [JsonProperty("OutdoorAir:NodeList")]
    [Description(@"This object sets the temperature and humidity conditions for an outdoor air node using the weather data values. to vary outdoor air node conditions with height above ground use OutdoorAir:Node instead of this object. This object may be used more than once. The same node name may not appear in both an OutdoorAir:Node object and an OutdoorAir:NodeList object.")]
    public class OutdoorAir_NodeList
    {
        

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Pipe:Adiabatic")]
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    public class Pipe_Adiabatic
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Pipe:Adiabatic:Steam")]
    [Description("Passes Inlet Node state variables to Outlet Node state variables")]
    public class Pipe_Adiabatic_Steam
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Pipe:Indoor")]
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    public class Pipe_Indoor
    {
        
        private void Schedule;
        
        private void Zone;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_inlet_node_name")]
public string fluid_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_outlet_node_name")]
public string fluid_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("environment_type")]
public EnvironmenttypeType environment_type
{
    get
    {
    }
    set
    {
    }
}
 = (EnvironmenttypeType)Zone;

[JsonProperty("ambient_temperature_zone_name")]
public string ambient_temperature_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_air_velocity_schedule_name")]
public string ambient_air_velocity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_inside_diameter")]
public float pipe_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_length")]
public float pipe_length
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum EnvironmenttypeType
        {
        }
    }
    
    [JsonProperty("Pipe:Outdoor")]
    [Description("Pipe model with transport delay and heat transfer to the environment.")]
    public class Pipe_Outdoor
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_inlet_node_name")]
public string fluid_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_outlet_node_name")]
public string fluid_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string ambient_temperature_outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_inside_diameter")]
public float pipe_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_length")]
public float pipe_length
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Pipe:Underground")]
    [Description("Buried Pipe model: For pipes buried at a depth less than one meter, this is an al" +
        "ternative object to: HeatExchanger:Surface")]
    public class Pipe_Underground
    {
        
        private void NoSun;
        
        private void SunExposed;
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_inlet_node_name")]
public string fluid_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fluid_outlet_node_name")]
public string fluid_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sun_exposure")]
public SunexposureType sun_exposure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_inside_diameter")]
public float pipe_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_length")]
public float pipe_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_material_name")]
public string soil_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SunexposureType
        {
        }
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
    }
    
    [JsonProperty("PipingSystem:Underground:Domain")]
    [Description("The ground domain object for underground piping system simulation.")]
    public class PipingSystem_Underground_Domain
    {
        
        private void SymmetricGeometric;
        
        private void Uniform;
        
        private void SymmetricGeometric;
        
        private void Uniform;
        
        private void SymmetricGeometric;
        
        private void Uniform;
        
        private void Site:GroundTemperature:Undisturbed:FiniteDifference;
        
        private void Site:GroundTemperature:Undisturbed:KusudaAchenbach;
        
        private void Site:GroundTemperature:Undisturbed:Xing;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("xmax")]
public float xmax
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ymax")]
public float ymax
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zmax")]
public float zmax
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("x_direction_mesh_density_parameter")]
public float x_direction_mesh_density_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("x_direction_mesh_type")]
public XdirectionmeshtypeType x_direction_mesh_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("x_direction_geometric_coefficient")]
public float x_direction_geometric_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.3;

[JsonProperty("y_direction_mesh_density_parameter")]
public float y_direction_mesh_density_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("y_direction_mesh_type")]
public YdirectionmeshtypeType y_direction_mesh_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("y_direction_geometric_coefficient")]
public float y_direction_geometric_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.3;

[JsonProperty("z_direction_mesh_density_parameter")]
public float z_direction_mesh_density_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("z_direction_mesh_type")]
public ZdirectionmeshtypeType z_direction_mesh_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("z_direction_geometric_coefficient")]
public float z_direction_geometric_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.3;

[JsonProperty("soil_thermal_conductivity")]
public float soil_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_density")]
public float soil_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_specific_heat")]
public float soil_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("soil_moisture_content_volume_fraction")]
public float soil_moisture_content_volume_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("soil_moisture_content_volume_fraction_at_saturation")]
public float soil_moisture_content_volume_fraction_at_saturation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("undisturbed_ground_temperature_model_type")]
public UndisturbedgroundtemperaturemodeltypeType undisturbed_ground_temperature_model_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("undisturbed_ground_temperature_model_name")]
public string undisturbed_ground_temperature_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("this_domain_includes_basement_surface_interaction")]
public ThisdomainincludesbasementsurfaceinteractionType this_domain_includes_basement_surface_interaction
{
    get
    {
    }
    set
    {
    }
}
 = (ThisdomainincludesbasementsurfaceinteractionType)No;

[JsonProperty("width_of_basement_floor_in_ground_domain")]
public float width_of_basement_floor_in_ground_domain
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("depth_of_basement_wall_in_ground_domain")]
public float depth_of_basement_wall_in_ground_domain
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shift_pipe_x_coordinates_by_basement_width")]
public ShiftpipexcoordinatesbybasementwidthType shift_pipe_x_coordinates_by_basement_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("name_of_basement_wall_boundary_condition_model")]
public string name_of_basement_wall_boundary_condition_model
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("name_of_basement_floor_boundary_condition_model")]
public string name_of_basement_floor_boundary_condition_model
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convergence_criterion_for_the_outer_cartesian_domain_iteration_loop")]
public float convergence_criterion_for_the_outer_cartesian_domain_iteration_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("maximum_iterations_in_the_outer_cartesian_domain_iteration_loop")]
public float maximum_iterations_in_the_outer_cartesian_domain_iteration_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("evapotranspiration_ground_cover_parameter")]
public float evapotranspiration_ground_cover_parameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("number_of_pipe_circuits_entered_for_this_domain")]
public float number_of_pipe_circuits_entered_for_this_domain
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_circuits")]
public string pipe_circuits
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum XdirectionmeshtypeType
        {
        }
        
        public enum YdirectionmeshtypeType
        {
        }
        
        public enum ZdirectionmeshtypeType
        {
        }
        
        public enum UndisturbedgroundtemperaturemodeltypeType
        {
        }
        
        [Description("if Yes, then the following basement inputs are used if No, then the following bas" +
            "ement inputs are *ignored*")]
        public enum ThisdomainincludesbasementsurfaceinteractionType
        {
        }
        
        [Description("Required only if Domain Has Basement Interaction")]
        public enum ShiftpipexcoordinatesbybasementwidthType
        {
        }
    }
    
    [JsonProperty("PipingSystem:Underground:PipeCircuit")]
    [Description("The pipe circuit object in an underground piping system. This object is simulated" +
        " within an underground piping domain object and connected on a branch on a plant" +
        " loop.")]
    public class PipingSystem_Underground_PipeCircuit
    {
        

[JsonProperty("pipe_thermal_conductivity")]
public float pipe_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_density")]
public float pipe_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_specific_heat")]
public float pipe_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_inner_diameter")]
public float pipe_inner_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_outer_diameter")]
public float pipe_outer_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("circuit_inlet_node")]
public string circuit_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("circuit_outlet_node")]
public string circuit_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convergence_criterion_for_the_inner_radial_iteration_loop")]
public float convergence_criterion_for_the_inner_radial_iteration_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("maximum_iterations_in_the_inner_radial_iteration_loop")]
public float maximum_iterations_in_the_inner_radial_iteration_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500;

[JsonProperty("number_of_soil_nodes_in_the_inner_radial_near_pipe_mesh_region")]
public float number_of_soil_nodes_in_the_inner_radial_near_pipe_mesh_region
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("radial_thickness_of_inner_radial_near_pipe_mesh_region")]
public float radial_thickness_of_inner_radial_near_pipe_mesh_region
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_pipe_segments_entered_for_this_pipe_circuit")]
public float number_of_pipe_segments_entered_for_this_pipe_circuit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pipe_segments")]
public string pipe_segments
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PipingSystem:Underground:PipeSegment")]
    [Description("The pipe segment to be used in an underground piping system This object represent" +
        "s a single pipe leg positioned axially in the local z-direction, at a given x, y" +
        " location in the domain")]
    public class PipingSystem_Underground_PipeSegment
    {
        
        private void DecreasingZ;
        
        private void IncreasingZ;
        

[JsonProperty("x_position")]
public float x_position
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("y_position")]
public float y_position
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_direction")]
public FlowdirectionType flow_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This segment will be simulated such that the flow is in the selected direction. T" +
            "his can allow for detailed analysis of circuiting effects in a single domain.")]
        public enum FlowdirectionType
        {
        }
    }
    
    [JsonProperty("Duct")]
    [Description("Passes inlet node state variables to outlet node state variables")]
    public class Duct
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.NonZoneEquipment
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("LoadProfile:Plant")]
    [Description(@"Used to simulate a scheduled plant loop demand profile. Load and flow rate are specified using schedules. Positive values are heating loads, and negative values are cooling loads. The actual load met is dependent on the performance of the supply loop components.")]
    public class LoadProfile_Plant
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_schedule_name")]
public string load_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("peak_flow_rate")]
public float peak_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_fraction_schedule_name")]
public string flow_rate_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.OperationalFaults
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("FaultModel:TemperatureSensorOffset:OutdoorAir")]
    [Description("This object describes outdoor air temperature sensor offset")]
    public class FaultModel_TemperatureSensorOffset_OutdoorAir
    {
        
        private void Controller:OutdoorAir;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_type")]
public ControllerobjecttypeType controller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_name")]
public string controller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_sensor_offset")]
public float temperature_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControllerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:HumiditySensorOffset:OutdoorAir")]
    [Description("This object describes outdoor air humidity sensor offset")]
    public class FaultModel_HumiditySensorOffset_OutdoorAir
    {
        
        private void Controller:OutdoorAir;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_type")]
public ControllerobjecttypeType controller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_name")]
public string controller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidity_sensor_offset")]
public float humidity_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControllerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:EnthalpySensorOffset:OutdoorAir")]
    [Description("This object describes outdoor air enthalpy sensor offset")]
    public class FaultModel_EnthalpySensorOffset_OutdoorAir
    {
        
        private void Controller:OutdoorAir;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_type")]
public ControllerobjecttypeType controller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_name")]
public string controller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_sensor_offset")]
public float enthalpy_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControllerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:TemperatureSensorOffset:ReturnAir")]
    [Description("This object describes return air temperature sensor offset")]
    public class FaultModel_TemperatureSensorOffset_ReturnAir
    {
        
        private void Controller:OutdoorAir;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_type")]
public ControllerobjecttypeType controller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_name")]
public string controller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_sensor_offset")]
public float temperature_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControllerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:EnthalpySensorOffset:ReturnAir")]
    [Description("This object describes return air enthalpy sensor offset")]
    public class FaultModel_EnthalpySensorOffset_ReturnAir
    {
        
        private void Controller:OutdoorAir;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_type")]
public ControllerobjecttypeType controller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_object_name")]
public string controller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_sensor_offset")]
public float enthalpy_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControllerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:TemperatureSensorOffset:ChillerSupplyWater")]
    [Description("This object describes fault of chiller supply water temperature sensor offset")]
    public class FaultModel_TemperatureSensorOffset_ChillerSupplyWater
    {
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_object_type")]
public ChillerobjecttypeType chiller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_object_name")]
public string chiller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_sensor_offset")]
public float reference_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Enter the type of a chiller object")]
        public enum ChillerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:TemperatureSensorOffset:CoilSupplyAir")]
    [Description("This object describes fault of coil supply air temperature sensor offset")]
    public class FaultModel_TemperatureSensorOffset_CoilSupplyAir
    {
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:Detailedgeometry;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Gas;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Heating:DX;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_object_type")]
public CoilobjecttypeType coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_object_name")]
public string coil_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_coil_controller_name")]
public string water_coil_controller_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_sensor_offset")]
public float reference_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Enter the type of the coil affected")]
        public enum CoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:TemperatureSensorOffset:CondenserSupplyWater")]
    [Description("This object describes fault of condenser supply water temperature sensor offset")]
    public class FaultModel_TemperatureSensorOffset_CondenserSupplyWater
    {
        
        private void CoolingTower:SingleSpeed;
        
        private void CoolingTower:TwoSpeed;
        
        private void CoolingTower:VariableSpeed;
        
        private void CoolingTower:VariableSpeed:MERKEL;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_tower_object_type")]
public CoolingtowerobjecttypeType cooling_tower_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_tower_object_name")]
public string cooling_tower_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_sensor_offset")]
public float reference_sensor_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Enter the type of the cooling tower affected")]
        public enum CoolingtowerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:ThermostatOffset")]
    [Description("This object describes fault of thermostat offset")]
    public class FaultModel_ThermostatOffset
    {
        

[JsonProperty("thermostat_name")]
public string thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_thermostat_offset")]
public float reference_thermostat_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
    }
    
    [JsonProperty("FaultModel:HumidistatOffset")]
    [Description("This object describes fault of humidistat offset")]
    public class FaultModel_HumidistatOffset
    {
        
        private void ThermostatOffsetDependent;
        
        private void ThermostatOffsetIndependent;
        

[JsonProperty("humidistat_name")]
public string humidistat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidistat_offset_type")]
public HumidistatoffsettypeType humidistat_offset_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidistatoffsettypeType)ThermostatOffsetIndependent;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_humidistat_offset")]
public float reference_humidistat_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("related_thermostat_offset_fault_name")]
public string related_thermostat_offset_fault_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Two types are available: Type ThermostatOffsetIndependent Type ThermostatOffsetDe" +
            "pendent")]
        public enum HumidistatoffsettypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:AirFilter")]
    [Description("This object describes fault of dirty air filters")]
    public class FaultModel_Fouling_AirFilter
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:VariableVolume;
        

[JsonProperty("fan_object_type")]
public FanobjecttypeType fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure_fraction_schedule_name")]
public string pressure_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_curve_name")]
public string fan_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Choose the type of the fan Support for Fan:SystemModel is pending")]
        public enum FanobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:Boiler")]
    [Description("This object describes the fouling fault of boilers with water-based heat exchange" +
        "rs")]
    public class FaultModel_Fouling_Boiler
    {
        
        private void Boiler:HotWater;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("boiler_object_type")]
public BoilerobjecttypeType boiler_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("boiler_object_name")]
public string boiler_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fouling_factor")]
public float fouling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Enter the type of a boiler object The fault applies to the hot-water boilers")]
        public enum BoilerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:EvaporativeCooler")]
    [Description("This object describes the fouling fault of the wetted coil evaporative cooler")]
    public class FaultModel_Fouling_EvaporativeCooler
    {
        
        private void EvaporativeCooler:Indirect:WetCoil;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_cooler_object_type")]
public EvaporativecoolerobjecttypeType evaporative_cooler_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_cooler_object_name")]
public string evaporative_cooler_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fouling_factor")]
public float fouling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Enter the type of a Evaporative Cooler object The fault applies to the wetted coi" +
            "l evaporative cooler The fault does not apply to direct evaporative coolers or t" +
            "he dry coil indirect evaporative coolers")]
        public enum EvaporativecoolerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:Chiller")]
    [Description("This object describes the fouling fault of chillers with water-cooled condensers")]
    public class FaultModel_Fouling_Chiller
    {
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_object_type")]
public ChillerobjecttypeType chiller_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_object_name")]
public string chiller_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fouling_factor")]
public float fouling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Enter the type of a chiller object The fault applies to the chillers with water-c" +
            "ooled condensers")]
        public enum ChillerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:CoolingTower")]
    [Description("This object describes the fault of fouling cooling towers")]
    public class FaultModel_Fouling_CoolingTower
    {
        
        private void CoolingTower:SingleSpeed;
        
        private void CoolingTower:TwoSpeed;
        
        private void CoolingTower:VariableSpeed:MERKEL;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_tower_object_type")]
public CoolingtowerobjecttypeType cooling_tower_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_tower_object_name")]
public string cooling_tower_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_ua_reduction_factor")]
public float reference_ua_reduction_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Enter the type of the cooling tower affected")]
        public enum CoolingtowerobjecttypeType
        {
        }
    }
    
    [JsonProperty("FaultModel:Fouling:Coil")]
    [Description("This object describes fouling water heating or cooling coils")]
    public class FaultModel_Fouling_Coil
    {
        
        private void FouledUARated;
        
        private void FoulingFactor;
        

[JsonProperty("coil_name")]
public string coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("severity_schedule_name")]
public string severity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fouling_input_method")]
public FoulinginputmethodType fouling_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (FoulinginputmethodType)FouledUARated;

[JsonProperty("uafouled")]
public float uafouled
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_side_fouling_factor")]
public float water_side_fouling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("air_side_fouling_factor")]
public float air_side_fouling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("outside_coil_surface_area")]
public float outside_coil_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inside_to_outside_coil_surface_area_ratio")]
public float inside_to_outside_coil_surface_area_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.07;
        
        public enum FoulinginputmethodType
        {
        }
    }
}
namespace EnergyPlus.OutputReporting
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Output:VariableDictionary")]
    [Description(@"Produces a list summarizing the output variables and meters that are available for reporting for the model being simulated (rdd output file). The list varies depending on the types of objects present in the idf file. For example, variables related to lights will only appear if a Lights object is present. The IDF option generates complete Output:Variable objects to simplify adding the desired output to the idf file.")]
    public class Output_VariableDictionary
    {
        
        private void IDF;
        
        private void regular;
        
        private void Name;
        
        private void Unsorted;
        

[JsonProperty("key_field")]
public KeyfieldType key_field
{
    get
    {
    }
    set
    {
    }
}
 = (KeyfieldType)regular;

[JsonProperty("sort_option")]
public SortoptionType sort_option
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum KeyfieldType
        {
        }
        
        public enum SortoptionType
        {
        }
    }
    
    [JsonProperty("Output:Surfaces:List")]
    [Description("Produces a report summarizing the details of surfaces in the eio output file.")]
    public class Output_Surfaces_List
    {
        
        private void CostInfo;
        
        private void DecayCurvesFromComponentLoadsSummary;
        
        private void Details;
        
        private void DetailsWithVertices;
        
        private void Lines;
        
        private void Vertices;
        
        private void ViewFactorInfo;
        
        private void IDF;
        

[JsonProperty("report_type")]
public ReporttypeType report_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("report_specifications")]
public ReportspecificationsType report_specifications
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ReporttypeType
        {
        }
        
        [Description("(IDF, only for Output:Surfaces:List, Lines report -- will print transformed coord" +
            "inates in IDF style)")]
        public enum ReportspecificationsType
        {
        }
    }
    
    [JsonProperty("Output:Surfaces:Drawing")]
    [Description("Produces reports/files that are capable of rendering graphically or being importe" +
        "d into other programs. Rendering does not alter the actual inputs/surfaces.")]
    public class Output_Surfaces_Drawing
    {
        
        private void DXF;
        
        private void DXF:WireFrame;
        
        private void VRML;
        
        private void RegularPolyline;
        
        private void ThickPolyline;
        
        private void Triangulate3DFace;
        

[JsonProperty("report_type")]
public ReporttypeType report_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("report_specifications_1")]
public ReportspecificationsType report_specifications_1
{
    get
    {
    }
    set
    {
    }
}
 = (ReportspecificationsType)Triangulate3DFace;

[JsonProperty("report_specifications_2")]
public string report_specifications_2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ReporttypeType
        {
        }
        
        [Description("Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF This fie" +
            "ld is ignored for DXF:WireFrame and VRML")]
        public enum ReportspecificationsType
        {
        }
    }
    
    [JsonProperty("Output:Schedules")]
    [Description("Produces a condensed reporting that illustrates the full range of schedule values" +
        " in the eio output file. In the style of input: DaySchedule,  WeekSchedule, and " +
        "Annual Schedule.")]
    public class Output_Schedules
    {
        
        private void Hourly;
        
        private void Timestep;
        

[JsonProperty("key_field")]
public KeyfieldType key_field
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum KeyfieldType
        {
        }
    }
    
    [JsonProperty("Output:Constructions")]
    [Description("Adds a report to the eio output file which shows details for each construction, i" +
        "ncluding overall properties, a list of material layers, and calculated results r" +
        "elated to conduction transfer functions.")]
    public class Output_Constructions
    {
        
        private void Constructions;
        
        private void Materials;
        
        private void Constructions;
        
        private void Materials;
        

[JsonProperty("details_type_1")]
public DetailstypeType details_type_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("details_type_2")]
public DetailstypeType details_type_2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DetailstypeType
        {
        }
        
        public enum DetailstypeType
        {
        }
    }
    
    [JsonProperty("Output:EnergyManagementSystem")]
    [Description("This object is used to control the output produced by the Energy Management Syste" +
        "m")]
    public class Output_EnergyManagementSystem
    {
        
        private void None;
        
        private void NotByUniqueKeyNames;
        
        private void Verbose;
        
        private void None;
        
        private void NotByUniqueKeyNames;
        
        private void Verbose;
        
        private void ErrorsOnly;
        
        private void None;
        
        private void Verbose;
        

[JsonProperty("actuator_availability_dictionary_reporting")]
public ActuatoravailabilitydictionaryreportingType actuator_availability_dictionary_reporting
{
    get
    {
    }
    set
    {
    }
}
 = (ActuatoravailabilitydictionaryreportingType)None;

[JsonProperty("internal_variable_availability_dictionary_reporting")]
public InternalvariableavailabilitydictionaryreportingType internal_variable_availability_dictionary_reporting
{
    get
    {
    }
    set
    {
    }
}
 = (InternalvariableavailabilitydictionaryreportingType)None;

[JsonProperty("ems_runtime_language_debug_output_level")]
public EmsruntimelanguagedebugoutputlevelType ems_runtime_language_debug_output_level
{
    get
    {
    }
    set
    {
    }
}
 = (EmsruntimelanguagedebugoutputlevelType)None;
        
        public enum ActuatoravailabilitydictionaryreportingType
        {
        }
        
        public enum InternalvariableavailabilitydictionaryreportingType
        {
        }
        
        public enum EmsruntimelanguagedebugoutputlevelType
        {
        }
    }
    
    [JsonProperty("OutputControl:SurfaceColorScheme")]
    [Description(@"This object is used to set colors for reporting on various building elements particularly for the DXF reports. We know the user can enter 0 to 255 and the color map is available in DXF output. Therefore, we are limiting the colors in that range. You can extend by editing the IDD but you do so on your own. Colors not changed in any scheme will remain as the default scheme uses.")]
    public class OutputControl_SurfaceColorScheme
    {
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        
        private void AttachedBuildingShades;
        
        private void DaylightReferencePoint1;
        
        private void DaylightReferencePoint2;
        
        private void DetachedBuildingShades;
        
        private void DetachedFixedShades;
        
        private void Doors;
        
        private void Floors;
        
        private void GlassDoors;
        
        private void Photovoltaics;
        
        private void Roofs;
        
        private void Text;
        
        private void TubularDaylightDiffusers;
        
        private void TubularDaylightDomes;
        
        private void Walls;
        
        private void Windows;
        

[JsonProperty("drawing_element_1_type")]
public DrawingelementtypeType drawing_element_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_1")]
public float color_for_drawing_element_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_2_type")]
public DrawingelementtypeType drawing_element_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_2")]
public float color_for_drawing_element_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_3_type")]
public DrawingelementtypeType drawing_element_3_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_3")]
public float color_for_drawing_element_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_4_type")]
public DrawingelementtypeType drawing_element_4_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_4")]
public float color_for_drawing_element_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_5_type")]
public DrawingelementtypeType drawing_element_5_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_5")]
public float color_for_drawing_element_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_6_type")]
public DrawingelementtypeType drawing_element_6_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_6")]
public float color_for_drawing_element_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_7_type")]
public DrawingelementtypeType drawing_element_7_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_7")]
public float color_for_drawing_element_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_8_type")]
public DrawingelementtypeType drawing_element_8_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_8")]
public float color_for_drawing_element_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_9_type")]
public DrawingelementtypeType drawing_element_9_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_9")]
public float color_for_drawing_element_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_10_type")]
public DrawingelementtypeType drawing_element_10_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_10")]
public float color_for_drawing_element_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_11_type")]
public DrawingelementtypeType drawing_element_11_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_11")]
public float color_for_drawing_element_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_12_type")]
public DrawingelementtypeType drawing_element_12_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_12")]
public float color_for_drawing_element_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_13_type")]
public DrawingelementtypeType drawing_element_13_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_13")]
public float color_for_drawing_element_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_14_type")]
public DrawingelementtypeType drawing_element_14_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_14")]
public float color_for_drawing_element_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drawing_element_15_type")]
public DrawingelementtypeType drawing_element_15_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("color_for_drawing_element_15")]
public float color_for_drawing_element_15
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
        
        public enum DrawingelementtypeType
        {
        }
    }
    
    [JsonProperty("Output:Table:SummaryReports")]
    [Description(@"This object allows the user to call report types that are predefined and will appear with the other tabular reports. These predefined reports are sensitive to the OutputControl:Table:Style object and appear in the same files as the tabular reports. The entries for this object is a list of the predefined reports that should appear in the tabular report output file.")]
    public class Output_Table_SummaryReports
    {
        

[JsonProperty("reports")]
public string reports
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Output:Table:TimeBins")]
    [Description("Produces a bin report in the table output file which shows the amount of time in " +
        "hours that occurs in different bins for a single specific output variable or met" +
        "er. Two different types of binning are reported: by month and by hour of the day" +
        ".")]
    public class Output_Table_TimeBins
    {
        
        private void Energy;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        

[JsonProperty("key_value")]
public string key_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)*;

[JsonProperty("variable_name")]
public string variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interval_start")]
public float interval_start
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interval_size")]
public float interval_size
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interval_count")]
public float interval_count
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_type")]
public VariabletypeType variable_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Optional input on the type of units for the variable used by other fields in the " +
            "object.")]
        public enum VariabletypeType
        {
        }
    }
    
    [JsonProperty("Output:Table:Monthly")]
    [Description(@"Provides a generic method of setting up tables of monthly results. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Monthly object often produces multiple tables in the output. A table is produced for every instance of a particular output variable. For example, a table defined with zone variables will be produced once for every zone.")]
    public class Output_Table_Monthly
    {
        

[JsonProperty("digits_after_decimal")]
public float digits_after_decimal
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("variable_details")]
public string variable_details
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Output:Table:Annual")]
    [Description(@"Provides a generic method of setting up tables of annual results with one row per object. The report has multiple columns that are each defined using a repeated group of fields for any number of columns. A single Output:Table:Annual produces a single table in the output.")]
    public class Output_Table_Annual
    {
        

[JsonProperty("filter")]
public string filter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_details")]
public string variable_details
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("OutputControl:Table:Style")]
    [Description(@"default style for the OutputControl:Table:Style is comma -- this works well for importing into spreadsheet programs such as Excel(tm) but not so well for word processing programs -- there tab may be a better choice. fixed puts spaces between the ""columns"". HTML produces tables in HTML. XML produces an XML file. note - if no OutputControl:Table:Style is included, the defaults are comma and None.")]
    public class OutputControl_Table_Style
    {
        
        private void All;
        
        private void Comma;
        
        private void CommaAndHTML;
        
        private void CommaAndXML;
        
        private void Fixed;
        
        private void HTML;
        
        private void Tab;
        
        private void TabAndHTML;
        
        private void XML;
        
        private void XMLandHTML;
        
        private void InchPound;
        
        private void JtoGJ;
        
        private void JtoKWH;
        
        private void JtoMJ;
        
        private void None;
        

[JsonProperty("column_separator")]
public ColumnseparatorType column_separator
{
    get
    {
    }
    set
    {
    }
}
 = (ColumnseparatorType)Comma;

[JsonProperty("unit_conversion")]
public UnitconversionType unit_conversion
{
    get
    {
    }
    set
    {
    }
}
 = (UnitconversionType)None;
        
        public enum ColumnseparatorType
        {
        }
        
        public enum UnitconversionType
        {
        }
    }
    
    [JsonProperty("OutputControl:ReportingTolerances")]
    [Description("Calculations of the time that setpoints are not met use a tolerance of 0.2C. This" +
        " object allows changing the tolerance used to determine when setpoints are being" +
        " met.")]
    public class OutputControl_ReportingTolerances
    {
        

[JsonProperty("tolerance_for_time_heating_setpoint_not_met")]
public float tolerance_for_time_heating_setpoint_not_met
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("tolerance_for_time_cooling_setpoint_not_met")]
public float tolerance_for_time_cooling_setpoint_not_met
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;
    }
    
    [JsonProperty("Output:Variable")]
    [Description(@"each Output:Variable command picks variables to be put onto the standard output file (.eso) some variables may not be reported for every simulation. a list of variables that can be reported are available after a run on the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.")]
    public class Output_Variable
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Detailed;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("key_value")]
public string key_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)*;

[JsonProperty("variable_name")]
public string variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (ReportingfrequencyType)Hourly;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Detailed lists every instance (i.e. HVAC variable timesteps) Timestep refers to t" +
            "he zone Timestep/Number of Timesteps in hour value RunPeriod and Environment are" +
            " the same")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("Output:Meter")]
    [Description(@"Each Output:Meter command picks meters to be put onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class Output_Meter
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Detailed;
        
        private void Detailed;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("key_name")]
public string key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (ReportingfrequencyType)Hourly;
        
        [Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
            "and Environment are the same")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("Output:Meter:MeterFileOnly")]
    [Description(@"Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr). Not all meters are reported in every simulation. A list of meters that can be reported a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class Output_Meter_MeterFileOnly
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Detailed;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("key_name")]
public string key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (ReportingfrequencyType)Hourly;
        
        [Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
            "and Environment are the same")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("Output:Meter:Cumulative")]
    [Description(@"Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class Output_Meter_Cumulative
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Detailed;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("key_name")]
public string key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (ReportingfrequencyType)Hourly;
        
        [Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
            "and Environment are the same")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("Output:Meter:Cumulative:MeterFileOnly")]
    [Description(@"Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in every simulation. a list of meters that can be reported are available after a run on the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.")]
    public class Output_Meter_Cumulative_MeterFileOnly
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Detailed;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("key_name")]
public string key_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (ReportingfrequencyType)Hourly;
        
        [Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
            "and Environment are the same")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("Meter:Custom")]
    [Description(@"Used to allow users to combine specific variables and/or meters into ""custom"" meter configurations. To access these meters by name, one must first run a simulation to generate the RDD/MDD files and names. A Meter:Custom cannot reference another Meter:Custom.")]
    public class Meter_Custom
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void Generic;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Water;
        

[JsonProperty("resource_type")]
public ResourcetypeType resource_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_details")]
public string variable_details
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ResourcetypeType
        {
        }
    }
    
    [JsonProperty("Meter:CustomDecrement")]
    [Description("Used to allow users to combine specific variables and/or meters into \"custom\" met" +
        "er configurations. To access these meters by name, one must first run a simulati" +
        "on to generate the RDD/MDD files and names.")]
    public class Meter_CustomDecrement
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void Generic;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Water;
        

[JsonProperty("resource_type")]
public ResourcetypeType resource_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_meter_name")]
public string source_meter_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("variable_details")]
public string variable_details
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ResourcetypeType
        {
        }
    }
    
    [JsonProperty("OutputControl:Files")]
    [Description("Conditionally turn on/off output from EnergyPlus.")]
    public class OutputControl_Files
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("output_csv")]
public OutputcsvType output_csv
{
    get
    {
    }
    set
    {
    }
}
 = (OutputcsvType)No;

[JsonProperty("output_mtr")]
public OutputmtrType output_mtr
{
    get
    {
    }
    set
    {
    }
}
 = (OutputmtrType)Yes;

[JsonProperty("output_eso")]
public OutputesoType output_eso
{
    get
    {
    }
    set
    {
    }
}
 = (OutputesoType)Yes;

[JsonProperty("output_eio")]
public OutputeioType output_eio
{
    get
    {
    }
    set
    {
    }
}
 = (OutputeioType)Yes;

[JsonProperty("output_tabular")]
public OutputtabularType output_tabular
{
    get
    {
    }
    set
    {
    }
}
 = (OutputtabularType)Yes;

[JsonProperty("output_sqlite")]
public OutputsqliteType output_sqlite
{
    get
    {
    }
    set
    {
    }
}
 = (OutputsqliteType)Yes;

[JsonProperty("output_json")]
public OutputjsonType output_json
{
    get
    {
    }
    set
    {
    }
}
 = (OutputjsonType)Yes;

[JsonProperty("output_audit")]
public OutputauditType output_audit
{
    get
    {
    }
    set
    {
    }
}
 = (OutputauditType)Yes;

[JsonProperty("output_zone_sizing")]
public OutputzonesizingType output_zone_sizing
{
    get
    {
    }
    set
    {
    }
}
 = (OutputzonesizingType)Yes;

[JsonProperty("output_system_sizing")]
public OutputsystemsizingType output_system_sizing
{
    get
    {
    }
    set
    {
    }
}
 = (OutputsystemsizingType)Yes;

[JsonProperty("output_dxf")]
public OutputdxfType output_dxf
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdxfType)Yes;

[JsonProperty("output_bnd")]
public OutputbndType output_bnd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputbndType)Yes;

[JsonProperty("output_rdd")]
public OutputrddType output_rdd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputrddType)Yes;

[JsonProperty("output_mdd")]
public OutputmddType output_mdd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputmddType)Yes;

[JsonProperty("output_mtd")]
public OutputmtdType output_mtd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputmtdType)Yes;

[JsonProperty("output_end")]
public OutputendType output_end
{
    get
    {
    }
    set
    {
    }
}
 = (OutputendType)Yes;

[JsonProperty("output_shd")]
public OutputshdType output_shd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputshdType)Yes;

[JsonProperty("output_dfs")]
public OutputdfsType output_dfs
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdfsType)Yes;

[JsonProperty("output_glhe")]
public OutputglheType output_glhe
{
    get
    {
    }
    set
    {
    }
}
 = (OutputglheType)Yes;

[JsonProperty("output_delightin")]
public OutputdelightinType output_delightin
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdelightinType)Yes;

[JsonProperty("output_delighteldmp")]
public OutputdelighteldmpType output_delighteldmp
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdelighteldmpType)Yes;

[JsonProperty("output_delightdfdmp")]
public OutputdelightdfdmpType output_delightdfdmp
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdelightdfdmpType)Yes;

[JsonProperty("output_edd")]
public OutputeddType output_edd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputeddType)Yes;

[JsonProperty("output_dbg")]
public OutputdbgType output_dbg
{
    get
    {
    }
    set
    {
    }
}
 = (OutputdbgType)Yes;

[JsonProperty("output_perflog")]
public OutputperflogType output_perflog
{
    get
    {
    }
    set
    {
    }
}
 = (OutputperflogType)Yes;

[JsonProperty("output_sln")]
public OutputslnType output_sln
{
    get
    {
    }
    set
    {
    }
}
 = (OutputslnType)Yes;

[JsonProperty("output_sci")]
public OutputsciType output_sci
{
    get
    {
    }
    set
    {
    }
}
 = (OutputsciType)Yes;

[JsonProperty("output_wrl")]
public OutputwrlType output_wrl
{
    get
    {
    }
    set
    {
    }
}
 = (OutputwrlType)Yes;

[JsonProperty("output_screen")]
public OutputscreenType output_screen
{
    get
    {
    }
    set
    {
    }
}
 = (OutputscreenType)Yes;

[JsonProperty("output_extshd")]
public OutputextshdType output_extshd
{
    get
    {
    }
    set
    {
    }
}
 = (OutputextshdType)Yes;

[JsonProperty("output_tarcog")]
public OutputtarcogType output_tarcog
{
    get
    {
    }
    set
    {
    }
}
 = (OutputtarcogType)Yes;
        
        public enum OutputcsvType
        {
        }
        
        public enum OutputmtrType
        {
        }
        
        public enum OutputesoType
        {
        }
        
        public enum OutputeioType
        {
        }
        
        public enum OutputtabularType
        {
        }
        
        public enum OutputsqliteType
        {
        }
        
        public enum OutputjsonType
        {
        }
        
        public enum OutputauditType
        {
        }
        
        public enum OutputzonesizingType
        {
        }
        
        public enum OutputsystemsizingType
        {
        }
        
        public enum OutputdxfType
        {
        }
        
        public enum OutputbndType
        {
        }
        
        public enum OutputrddType
        {
        }
        
        public enum OutputmddType
        {
        }
        
        public enum OutputmtdType
        {
        }
        
        public enum OutputendType
        {
        }
        
        public enum OutputshdType
        {
        }
        
        public enum OutputdfsType
        {
        }
        
        public enum OutputglheType
        {
        }
        
        public enum OutputdelightinType
        {
        }
        
        public enum OutputdelighteldmpType
        {
        }
        
        public enum OutputdelightdfdmpType
        {
        }
        
        public enum OutputeddType
        {
        }
        
        public enum OutputdbgType
        {
        }
        
        public enum OutputperflogType
        {
        }
        
        public enum OutputslnType
        {
        }
        
        public enum OutputsciType
        {
        }
        
        public enum OutputwrlType
        {
        }
        
        public enum OutputscreenType
        {
        }
        
        public enum OutputextshdType
        {
        }
        
        [Description("Not Implemented Yet")]
        public enum OutputtarcogType
        {
        }
    }
    
    [JsonProperty("Output:JSON")]
    [Description("Output from EnergyPlus can be written to JSON format files.")]
    public class Output_JSON
    {
        
        private void TimeSeries;
        
        private void TimeSeriesAndTabular;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("option_type")]
public OptiontypeType option_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("output_json")]
public OutputjsonType output_json
{
    get
    {
    }
    set
    {
    }
}
 = (OutputjsonType)Yes;

[JsonProperty("output_cbor")]
public OutputcborType output_cbor
{
    get
    {
    }
    set
    {
    }
}
 = (OutputcborType)No;

[JsonProperty("output_messagepack")]
public OutputmessagepackType output_messagepack
{
    get
    {
    }
    set
    {
    }
}
 = (OutputmessagepackType)No;
        
        public enum OptiontypeType
        {
        }
        
        public enum OutputjsonType
        {
        }
        
        public enum OutputcborType
        {
        }
        
        public enum OutputmessagepackType
        {
        }
    }
    
    [JsonProperty("Output:SQLite")]
    [Description("Output from EnergyPlus can be written to an SQLite format file.")]
    public class Output_SQLite
    {
        
        private void Simple;
        
        private void SimpleAndTabular;
        
        private void InchPound;
        
        private void JtoGJ;
        
        private void JtoKWH;
        
        private void JtoMJ;
        
        private void None;
        
        private void UseOutputControlTableStyle;
        

[JsonProperty("option_type")]
public OptiontypeType option_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unit_conversion_for_tabular_data")]
public UnitconversionfortabulardataType unit_conversion_for_tabular_data
{
    get
    {
    }
    set
    {
    }
}
 = (UnitconversionfortabulardataType)UseOutputControlTableStyle;
        
        public enum OptiontypeType
        {
        }
        
        [Description("Unit conversion option used when writing SQLite Tabular Data This option applies " +
            "to TabularData and TabularDatawithString in the SQLite file")]
        public enum UnitconversionfortabulardataType
        {
        }
    }
    
    [JsonProperty("Output:EnvironmentalImpactFactors")]
    [Description("This is used to Automatically report the facility meters and turn on the Environm" +
        "ental Impact Report calculations for all of the Environmental Factors.")]
    public class Output_EnvironmentalImpactFactors
    {
        
        private void Annual;
        
        private void Daily;
        
        private void Environment;
        
        private void Hourly;
        
        private void Monthly;
        
        private void RunPeriod;
        
        private void Timestep;
        

[JsonProperty("reporting_frequency")]
public ReportingfrequencyType reporting_frequency
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Timestep refers to the zone Timestep/Number of Timesteps in hour value RunPeriod " +
            "and Environment are the same. Detailed is not a valid choice.")]
        public enum ReportingfrequencyType
        {
        }
    }
    
    [JsonProperty("EnvironmentalImpactFactors")]
    [Description("Used to help convert district and ideal energy use to a fuel type and provide tot" +
        "al carbon equivalent with coefficients Also used in Source=>Site conversions.")]
    public class EnvironmentalImpactFactors
    {
        

[JsonProperty("district_heating_efficiency")]
public float district_heating_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("district_cooling_cop")]
public float district_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("steam_conversion_efficiency")]
public float steam_conversion_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("total_carbon_equivalent_emission_factor_from_n2o")]
public float total_carbon_equivalent_emission_factor_from_n2o
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80.7272;

[JsonProperty("total_carbon_equivalent_emission_factor_from_ch4")]
public float total_carbon_equivalent_emission_factor_from_ch4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.2727;

[JsonProperty("total_carbon_equivalent_emission_factor_from_co2")]
public float total_carbon_equivalent_emission_factor_from_co2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2727;
    }
    
    [JsonProperty("FuelFactors")]
    [Description("Provides Fuel Factors for Emissions as well as Source=>Site conversions. OtherFue" +
        "l1, OtherFuel2 provide options for users who want to create and use fuels that m" +
        "ay not be mainstream (biomass, wood, pellets).")]
    public class FuelFactors
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("existing_fuel_resource_name")]
public ExistingfuelresourcenameType existing_fuel_resource_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("units_of_measure")]
public string units_of_measure
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_per_unit_factor")]
public float energy_per_unit_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_energy_factor")]
public float source_energy_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_energy_schedule_name")]
public string source_energy_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("co2_emission_factor")]
public float co2_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("co2_emission_factor_schedule_name")]
public string co2_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("co_emission_factor")]
public float co_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("co_emission_factor_schedule_name")]
public string co_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ch4_emission_factor")]
public float ch4_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ch4_emission_factor_schedule_name")]
public string ch4_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nox_emission_factor")]
public float nox_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nox_emission_factor_schedule_name")]
public string nox_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("n2o_emission_factor")]
public float n2o_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("n2o_emission_factor_schedule_name")]
public string n2o_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("so2_emission_factor")]
public float so2_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("so2_emission_factor_schedule_name")]
public string so2_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm_emission_factor")]
public float pm_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm_emission_factor_schedule_name")]
public string pm_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm10_emission_factor")]
public float pm10_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm10_emission_factor_schedule_name")]
public string pm10_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm2_5_emission_factor")]
public float pm2_5_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pm2_5_emission_factor_schedule_name")]
public string pm2_5_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nh3_emission_factor")]
public float nh3_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nh3_emission_factor_schedule_name")]
public string nh3_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nmvoc_emission_factor")]
public float nmvoc_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nmvoc_emission_factor_schedule_name")]
public string nmvoc_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hg_emission_factor")]
public float hg_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hg_emission_factor_schedule_name")]
public string hg_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pb_emission_factor")]
public float pb_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pb_emission_factor_schedule_name")]
public string pb_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_emission_factor")]
public float water_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_emission_factor_schedule_name")]
public string water_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nuclear_high_level_emission_factor")]
public float nuclear_high_level_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nuclear_high_level_emission_factor_schedule_name")]
public string nuclear_high_level_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nuclear_low_level_emission_factor")]
public float nuclear_low_level_emission_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nuclear_low_level_emission_factor_schedule_name")]
public string nuclear_low_level_emission_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ExistingfuelresourcenameType
        {
        }
    }
    
    [JsonProperty("Output:Diagnostics")]
    [Description("Special keys to produce certain warning messages or effect certain simulation cha" +
        "racteristics.")]
    public class Output_Diagnostics
    {
        

[JsonProperty("diagnostics")]
public string diagnostics
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Output:DebuggingData")]
    [Description("switch eplusout.dbg file on or off")]
    public class Output_DebuggingData
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("report_debugging_data")]
public ReportdebuggingdataType report_debugging_data
{
    get
    {
    }
    set
    {
    }
}
 = (ReportdebuggingdataType)No;

[JsonProperty("report_during_warmup")]
public ReportduringwarmupType report_during_warmup
{
    get
    {
    }
    set
    {
    }
}
 = (ReportduringwarmupType)No;
        
        public enum ReportdebuggingdataType
        {
        }
        
        public enum ReportduringwarmupType
        {
        }
    }
    
    [JsonProperty("Output:PreprocessorMessage")]
    [Description("This object does not come from a user input. This is generated by a pre-processor" +
        " so that various conditions can be gracefully passed on by the InputProcessor.")]
    public class Output_PreprocessorMessage
    {
        
        private void Fatal;
        
        private void Information;
        
        private void Severe;
        
        private void Warning;
        

[JsonProperty("preprocessor_name")]
public string preprocessor_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("error_severity")]
public ErrorseverityType error_severity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_1")]
public string message_line_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_2")]
public string message_line_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_3")]
public string message_line_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_4")]
public string message_line_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_5")]
public string message_line_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_6")]
public string message_line_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_7")]
public string message_line_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_8")]
public string message_line_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_9")]
public string message_line_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("message_line_10")]
public string message_line_10
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Depending on type, InputProcessor may terminate the program.")]
        public enum ErrorseverityType
        {
        }
    }
}
namespace EnergyPlus.Parametrics
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Parametric:SetValueForRun")]
    [Description(@"Parametric objects allow a set of multiple simulations to be defined in a single idf file. The parametric preprocessor scans the idf for Parametric:* objects then creates and runs multiple idf files, one for each defined simulation. The core parametric object is Parametric:SetValueForRun which defines the name of a parameter and sets the parameter to different values depending on which run is being simulated.")]
    public class Parametric_SetValueForRun
    {
        

[JsonProperty("values")]
public string values
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Parametric:Logic")]
    [Description(@"This object allows some types of objects to be included for some parametric cases and not for others. For example, you might want an overhang on a window in some parametric runs and not others. A single Parametric:Logic object is allowed per file. Consult the Input Output Reference for available commands and syntax.")]
    public class Parametric_Logic
    {
        

[JsonProperty("lines")]
public string lines
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Parametric:RunControl")]
    [Description("Controls which parametric runs are simulated. This object is optional. If it is n" +
        "ot included, then all parametric runs are performed.")]
    public class Parametric_RunControl
    {
        

[JsonProperty("runs")]
public string runs
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Parametric:FileNameSuffix")]
    [Description("Defines the suffixes to be appended to the idf and output file names for each par" +
        "ametric run. If this object is omitted, the suffix will default to the run numbe" +
        "r.")]
    public class Parametric_FileNameSuffix
    {
        

[JsonProperty("suffixes")]
public string suffixes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.PerformanceCurves
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Curve:Linear")]
    [Description(@"Linear curve with one independent variable. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x")]
    public class Curve_Linear
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:QuadLinear")]
    [Description(@"Linear curve with four independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*w + C3*x + C4*y + C5*z")]
    public class Curve_QuadLinear
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_w")]
public float coefficient2_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x")]
public float coefficient3_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_y")]
public float coefficient4_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_z")]
public float coefficient5_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_w")]
public float minimum_value_of_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_w")]
public float maximum_value_of_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_z")]
public float minimum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_z")]
public float maximum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_w")]
public InputunittypeforwType input_unit_type_for_w
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforwType)Dimensionless;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("input_unit_type_for_z")]
public InputunittypeforzType input_unit_type_for_z
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforzType)Dimensionless;
        
        public enum InputunittypeforwType
        {
        }
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum InputunittypeforzType
        {
        }
    }
    
    [JsonProperty("Curve:QuintLinear")]
    [Description(@"Linear curve with five independent variables. Input for the linear curve consists of a curve name, the two coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*v + C3*w + C4*x + C5*y + C6*z")]
    public class Curve_QuintLinear
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void VolumetricFlowPerPower;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_v")]
public float coefficient2_v
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_w")]
public float coefficient3_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_x")]
public float coefficient4_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_y")]
public float coefficient5_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_z")]
public float coefficient6_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_v")]
public float minimum_value_of_v
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_v")]
public float maximum_value_of_v
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_w")]
public float minimum_value_of_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_w")]
public float maximum_value_of_w
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_z")]
public float minimum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_z")]
public float maximum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_v")]
public InputunittypeforvType input_unit_type_for_v
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforvType)Dimensionless;

[JsonProperty("input_unit_type_for_w")]
public InputunittypeforwType input_unit_type_for_w
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforwType)Dimensionless;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("input_unit_type_for_z")]
public InputunittypeforzType input_unit_type_for_z
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforzType)Dimensionless;
        
        public enum InputunittypeforvType
        {
        }
        
        public enum InputunittypeforwType
        {
        }
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum InputunittypeforzType
        {
        }
    }
    
    [JsonProperty("Curve:Quadratic")]
    [Description(@"Quadratic curve with one independent variable. Input for a quadratic curve consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2")]
    public class Curve_Quadratic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Cubic")]
    [Description(@"Cubic curve with one independent variable. Input for a cubic curve consists of the curve name, the 4 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3")]
    public class Curve_Cubic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_x_3")]
public float coefficient4_x_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Quartic")]
    [Description(@"Quartic (fourth order polynomial) curve with one independent variable. Input for a Quartic curve consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*x**3 + C5*x**4")]
    public class Curve_Quartic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_x_3")]
public float coefficient4_x_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_x_4")]
public float coefficient5_x_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Exponent")]
    [Description(@"Exponent curve with one independent variable. Input for a exponent curve consists of the curve name, the 3 coefficients, and the maximum and minimum valid independent variable values. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x**C3 The independent variable x is raised to the C3 power, multiplied by C2, and C1 is added to the result.")]
    public class Curve_Exponent
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_constant")]
public float coefficient2_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_constant")]
public float coefficient3_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Bicubic")]
    [Description(@"Cubic curve with two independent variables. Input consists of the curve name, the ten coefficients, and the minimum and maximum values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2")]
    public class Curve_Bicubic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_y")]
public float coefficient4_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_y_2")]
public float coefficient5_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_x_y")]
public float coefficient6_x_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient7_x_3")]
public float coefficient7_x_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient8_y_3")]
public float coefficient8_y_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient9_x_2_y")]
public float coefficient9_x_2_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient10_x_y_2")]
public float coefficient10_x_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Biquadratic")]
    [Description(@"Quadratic curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y")]
    public class Curve_Biquadratic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_y")]
public float coefficient4_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_y_2")]
public float coefficient5_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_x_y")]
public float coefficient6_x_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:QuadraticLinear")]
    [Description(@"Quadratic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2) + (C4 + C5*x + C6*x**2)*y")]
    public class Curve_QuadraticLinear
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_y")]
public float coefficient4_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_x_y")]
public float coefficient5_x_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_x_2_y")]
public float coefficient6_x_2_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:CubicLinear")]
    [Description(@"Cubic-linear curve with two independent variables. Input consists of the curve name, the six coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = (C1 + C2*x + C3*x**2 + C4*x**3) + (C5 + C6*x)*y")]
    public class Curve_CubicLinear
    {
        
        private void Dimensionless;
        
        private void Temperature;
        
        private void Dimensionless;
        
        private void Temperature;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x")]
public float coefficient2_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x_2")]
public float coefficient3_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_x_3")]
public float coefficient4_x_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_y")]
public float coefficient5_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_x_y")]
public float coefficient6_x_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Triquadratic")]
    [Description(@"Quadratic curve with three independent variables. Input consists of the curve name, the twenty seven coefficients, and min and max values for each of the independent variables. Optional inputs for curve minimum and maximum may be used to limit the output of the performance curve. curve = a0 + a1*x**2 + a2*x + a3*y**2 + a4*y + a5*z**2 + a6*z + a7*x**2*y**2 + a8*x*y + a9*x*y**2 + a10*x**2*y + a11*x**2*z**2 + a12*x*z + a13*x*z**2 + a14*x**2*z + a15*y**2*z**2 + a16*y*z + a17*y*z**2 + a18*y**2*z + a19*x**2*y**2*z**2 + a20*x**2*y**2*z + a21*x**2*y*z**2 + a22*x*y**2*z**2 + a23*x**2*y*z + a24*x*y**2*z + a25*x*y*z**2 +a26*x*y*z")]
    public class Curve_Triquadratic
    {
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_constant")]
public float coefficient1_constant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_x_2")]
public float coefficient2_x_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_x")]
public float coefficient3_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_y_2")]
public float coefficient4_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_y")]
public float coefficient5_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_z_2")]
public float coefficient6_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient7_z")]
public float coefficient7_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient8_x_2_y_2")]
public float coefficient8_x_2_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient9_x_y")]
public float coefficient9_x_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient10_x_y_2")]
public float coefficient10_x_y_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient11_x_2_y")]
public float coefficient11_x_2_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient12_x_2_z_2")]
public float coefficient12_x_2_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient13_x_z")]
public float coefficient13_x_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient14_x_z_2")]
public float coefficient14_x_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient15_x_2_z")]
public float coefficient15_x_2_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient16_y_2_z_2")]
public float coefficient16_y_2_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient17_y_z")]
public float coefficient17_y_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient18_y_z_2")]
public float coefficient18_y_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient19_y_2_z")]
public float coefficient19_y_2_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient20_x_2_y_2_z_2")]
public float coefficient20_x_2_y_2_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient21_x_2_y_2_z")]
public float coefficient21_x_2_y_2_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient22_x_2_y_z_2")]
public float coefficient22_x_2_y_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient23_x_y_2_z_2")]
public float coefficient23_x_y_2_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient24_x_2_y_z")]
public float coefficient24_x_2_y_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient25_x_y_2_z")]
public float coefficient25_x_y_2_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient26_x_y_z_2")]
public float coefficient26_x_y_z_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient27_x_y_z")]
public float coefficient27_x_y_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_z")]
public float minimum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_z")]
public float maximum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("input_unit_type_for_z")]
public InputunittypeforzType input_unit_type_for_z
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforzType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum InputunittypeforzType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Functional:PressureDrop")]
    [Description("Sets up curve information for minor loss and/or friction calculations in plant pr" +
        "essure simulations Expression: DeltaP = {K + f*(L/D)} * (rho * V^2) / 2")]
    public class Curve_Functional_PressureDrop
    {
        

[JsonProperty("diameter")]
public float diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minor_loss_coefficient")]
public float minor_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("roughness")]
public float roughness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fixed_friction_factor")]
public float fixed_friction_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Curve:FanPressureRise")]
    [Description(@"Special curve type with two independent variables. Input for the fan total pressure rise curve consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1*Qfan**2+C2*Qfan+C3*Qfan*(Psm-Po)**0.5+C4*(Psm-Po) Po assumed to be zero See InputOut Reference for curve details")]
    public class Curve_FanPressureRise
    {
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_c4")]
public float coefficient4_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_qfan")]
public float minimum_value_of_qfan
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_qfan")]
public float maximum_value_of_qfan
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_psm")]
public float minimum_value_of_psm
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_psm")]
public float maximum_value_of_psm
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Curve:ExponentialSkewNormal")]
    [Description(@"Exponential-modified skew normal curve with one independent variable. Input consists of the curve name, the four coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = see Input Output Reference")]
    public class Curve_ExponentialSkewNormal
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_c4")]
public float coefficient4_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:Sigmoid")]
    [Description(@"Sigmoid curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2/[1+exp((C3-x)/C4)]**C5")]
    public class Curve_Sigmoid
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_c4")]
public float coefficient4_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_c5")]
public float coefficient5_c5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:RectangularHyperbola1")]
    [Description(@"Rectangular hyperbola type 1 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+C3")]
    public class Curve_RectangularHyperbola
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:RectangularHyperbola2")]
    [Description(@"Rectangular hyperbola type 2 curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = ((C1*x)/(C2+x))+(C3*x)")]
    public class Curve_RectangularHyperbola
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:ExponentialDecay")]
    [Description(@"Exponential decay curve with one independent variable. Input consists of the curve name, the three coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)")]
    public class Curve_ExponentialDecay
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:DoubleExponentialDecay")]
    [Description(@"Double exponential decay curve with one independent variable. Input consists of the curve name, the five coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1+C2*exp(C3*x)+C4*exp(C5*x)")]
    public class Curve_DoubleExponentialDecay
    {
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_c4")]
public float coefficient4_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_c5")]
public float coefficient5_c5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
    
    [JsonProperty("Curve:ChillerPartLoadWithLift")]
    [Description(@"This chiller part-load performance curve has three independent variables. Input consists of the curve name, the twelve coefficients, and the maximum and minimum valid independent variable values. Optional inputs for the curve minimum and maximum may be used to limit the output of the performance curve. curve = C1 + C2*x + C3*x**2 + C4*y + C5*y**2 + C6*x*y + C7*x**3 + C8*y**3 + C9*x**2*y + C10*x*y**2 + C11*x**2*y**2 + C12*z*y**3 x = dT* = normalized fractional Lift = dT / dTref y = PLR = part load ratio (cooling load/steady state capacity) z = Tdev* = normalized Tdev = Tdev / dTref Where: dT = Lift = Leaving Condenser Water Temperature - Leaving Chilled Water Temperature dTref = dT at the reference condition Tdev = Leaving Chilled Water Temperature - Reference Chilled Water Temperature")]
    public class Curve_ChillerPartLoadWithLift
    {
        
        private void Dimensionless;
        
        private void Dimensionless;
        
        private void Dimensionless;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("coefficient1_c1")]
public float coefficient1_c1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient2_c2")]
public float coefficient2_c2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient3_c3")]
public float coefficient3_c3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient4_c4")]
public float coefficient4_c4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient5_c5")]
public float coefficient5_c5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient6_c6")]
public float coefficient6_c6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient7_c7")]
public float coefficient7_c7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient8_c8")]
public float coefficient8_c8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient9_c9")]
public float coefficient9_c9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient10_c10")]
public float coefficient10_c10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient11_c11")]
public float coefficient11_c11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient12_c12")]
public float coefficient12_c12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_x")]
public float minimum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_x")]
public float maximum_value_of_x
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_y")]
public float minimum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_y")]
public float maximum_value_of_y
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_value_of_z")]
public float minimum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_of_z")]
public float maximum_value_of_z
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_curve_output")]
public float minimum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_curve_output")]
public float maximum_curve_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("input_unit_type_for_x")]
public InputunittypeforxType input_unit_type_for_x
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforxType)Dimensionless;

[JsonProperty("input_unit_type_for_y")]
public InputunittypeforyType input_unit_type_for_y
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforyType)Dimensionless;

[JsonProperty("input_unit_type_for_z")]
public InputunittypeforzType input_unit_type_for_z
{
    get
    {
    }
    set
    {
    }
}
 = (InputunittypeforzType)Dimensionless;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;
        
        public enum InputunittypeforxType
        {
        }
        
        public enum InputunittypeforyType
        {
        }
        
        public enum InputunittypeforzType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
}
namespace EnergyPlus.PerformanceTables
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Table:IndependentVariable")]
    [Description("An independent variable representing a single dimension of a Table:Lookup object." +
        "")]
    public class Table_IndependentVariable
    {
        
        private void Cubic;
        
        private void Linear;
        
        private void Constant;
        
        private void Linear;
        
        private void Angle;
        
        private void Dimensionless;
        
        private void Distance;
        
        private void MassFlow;
        
        private void Power;
        
        private void Temperature;
        
        private void VolumetricFlow;
        

[JsonProperty("interpolation_method")]
public InterpolationmethodType interpolation_method
{
    get
    {
    }
    set
    {
    }
}
 = (InterpolationmethodType)Linear;

[JsonProperty("extrapolation_method")]
public ExtrapolationmethodType extrapolation_method
{
    get
    {
    }
    set
    {
    }
}
 = (ExtrapolationmethodType)Constant;

[JsonProperty("minimum_value")]
public float minimum_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value")]
public float maximum_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalization_reference_value")]
public float normalization_reference_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unit_type")]
public UnittypeType unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (UnittypeType)Dimensionless;

[JsonProperty("external_file_name")]
public string external_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_file_column_number")]
public float external_file_column_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_file_starting_row_number")]
public float external_file_starting_row_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("values")]
public string values
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum InterpolationmethodType
        {
        }
        
        public enum ExtrapolationmethodType
        {
        }
        
        public enum UnittypeType
        {
        }
    }
    
    [JsonProperty("Table:IndependentVariableList")]
    [Description("A sorted list of independent variables used by one or more Table:Lookup objects.")]
    public class Table_IndependentVariableList
    {
        

[JsonProperty("independent_variables")]
public string independent_variables
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Table:Lookup")]
    [Description(@"Lookup tables are used in place of curves and can represent any number of independent variables (defined as Table:IndependentVariable objects in a Table:IndependentVariableList). Output values are interpolated within the bounds defined by each independent variable and extrapolated beyond the bounds according to the interpolation/extrapolation methods defined by each independent variable.")]
    public class Table_Lookup
    {
        
        private void AutomaticWithDivisor;
        
        private void DivisorOnly;
        
        private void None;
        
        private void Capacity;
        
        private void Dimensionless;
        
        private void Power;
        
        private void Pressure;
        
        private void Temperature;
        

[JsonProperty("independent_variable_list_name")]
public string independent_variable_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalization_method")]
public NormalizationmethodType normalization_method
{
    get
    {
    }
    set
    {
    }
}
 = (NormalizationmethodType)None;

[JsonProperty("normalization_divisor")]
public float normalization_divisor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_output")]
public float minimum_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_output")]
public float maximum_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("output_unit_type")]
public OutputunittypeType output_unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutputunittypeType)Dimensionless;

[JsonProperty("external_file_name")]
public string external_file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_file_column_number")]
public float external_file_column_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_file_starting_row_number")]
public float external_file_starting_row_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("values")]
public string values
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum NormalizationmethodType
        {
        }
        
        public enum OutputunittypeType
        {
        }
    }
}
namespace EnergyPlus.PlantHeatingandCoolingEquipment
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Boiler:HotWater")]
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to polynomial equations. A constant efficiency boiler may be modeled by leaving the normalized boiler efficiency curve name input blank.")]
    public class Boiler_HotWater
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void EnteringBoiler;
        
        private void LeavingBoiler;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_thermal_efficiency")]
public float nominal_thermal_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("efficiency_curve_temperature_evaluation_variable")]
public EfficiencycurvetemperatureevaluationvariableType efficiency_curve_temperature_evaluation_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("normalized_boiler_efficiency_curve_name")]
public string normalized_boiler_efficiency_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_water_flow_rate")]
public string design_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("boiler_water_inlet_node_name")]
public string boiler_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("boiler_water_outlet_node_name")]
public string boiler_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_upper_temperature_limit")]
public float water_outlet_upper_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99.9;

[JsonProperty("boiler_flow_mode")]
public BoilerflowmodeType boiler_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (BoilerflowmodeType)NotModulated;

[JsonProperty("parasitic_electric_load")]
public float parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FueltypeType
        {
        }
        
        public enum EfficiencycurvetemperatureevaluationvariableType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the boiler. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by boiler to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by boiler to vary flow to target a leaving temperature setpoint.")]
        public enum BoilerflowmodeType
        {
        }
    }
    
    [JsonProperty("Boiler:Steam")]
    [Description(@"This boiler model is an adaptation of the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Boiler performance curves are generated by fitting catalog data to third order polynomial equations. A constant efficiency boiler is modeled by setting the fuel use coefficients as follows: N9=1, N10=0, N11=0")]
    public class Boiler_Steam
    {
        
        private void Coal;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_operating_pressure")]
public float maximum_operating_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)160000;

[JsonProperty("theoretical_efficiency")]
public float theoretical_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("design_outlet_steam_temperature")]
public float design_outlet_steam_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_fuel_use_function_of_part_load_ratio_curve")]
public float coefficient_1_of_fuel_use_function_of_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_fuel_use_function_of_part_load_ratio_curve")]
public float coefficient_2_of_fuel_use_function_of_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_fuel_use_function_of_part_load_ratio_curve")]
public float coefficient_3_of_fuel_use_function_of_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("steam_outlet_node_name")]
public string steam_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("Chiller:Electric:EIR")]
    [Description("This chiller model is the empirical model from the DOE-2 building Energy simulati" +
        "on program. Chiller performance at off-reference conditions is modeled using thr" +
        "ee polynomial equations. Three curves objects are required.")]
    public class Chiller_Electric_EIR
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("reference_capacity")]
public string reference_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cop")]
public float reference_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_leaving_chilled_water_temperature")]
public float reference_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.67;

[JsonProperty("reference_entering_condenser_fluid_temperature")]
public float reference_entering_condenser_fluid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29.4;

[JsonProperty("reference_chilled_water_flow_rate")]
public string reference_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_condenser_fluid_flow_rate")]
public string reference_condenser_fluid_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_unloading_ratio")]
public float minimum_unloading_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterCooled;

[JsonProperty("condenser_fan_power_ratio")]
public float condenser_fan_power_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_of_compressor_electric_consumption_rejected_by_condenser")]
public float fraction_of_compressor_electric_consumption_rejected_by_condenser
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public float leaving_chilled_water_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public string design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public float condenser_heat_recovery_relative_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string heat_recovery_inlet_high_temperature_limit_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string heat_recovery_leaving_temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum CondensertypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
    }
    
    [JsonProperty("Chiller:Electric:ReformulatedEIR")]
    [Description(@"This chiller model is an empirical model, a reformulated version of Chiller:Electric:EIR where the performance is a function of condenser leaving fluid Temperature instead of condenser entering fluid Temperature. Chiller performance at off-reference conditions is modeled using three polynomial equations. Three curve objects are required.")]
    public class Chiller_Electric_ReformulatedEIR
    {
        
        private void LeavingCondenserWaterTemperature;
        
        private void Lift;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("reference_capacity")]
public string reference_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cop")]
public float reference_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_leaving_chilled_water_temperature")]
public float reference_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.67;

[JsonProperty("reference_leaving_condenser_water_temperature")]
public float reference_leaving_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("reference_chilled_water_flow_rate")]
public string reference_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_condenser_water_flow_rate")]
public string reference_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_type")]
public ElectricinputtocoolingoutputratiofunctionofpartloadratiocurvetypeType electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_type
{
    get
    {
    }
    set
    {
    }
}
 = (ElectricinputtocoolingoutputratiofunctionofpartloadratiocurvetypeType)LeavingCondenserWaterTemperature;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_unloading_ratio")]
public float minimum_unloading_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_compressor_electric_consumption_rejected_by_condenser")]
public float fraction_of_compressor_electric_consumption_rejected_by_condenser
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("leaving_chilled_water_lower_temperature_limit")]
public float leaving_chilled_water_lower_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("chiller_flow_mode_type")]
public ChillerflowmodetypeType chiller_flow_mode_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodetypeType)NotModulated;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public string design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public float condenser_heat_recovery_relative_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string heat_recovery_inlet_high_temperature_limit_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string heat_recovery_leaving_temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"Two curve types are available: Type LeavingCondenserWaterTemperature: based on the leaving condenser water temperature. Type Lift: based on the normalized lift, which is the temperature difference between the leaving condenser water temperature and the leaving evaporator water temperature.")]
        public enum ElectricinputtocoolingoutputratiofunctionofpartloadratiocurvetypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodetypeType
        {
        }
    }
    
    [JsonProperty("Chiller:Electric")]
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    public class Chiller_Electric
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_inlet_temperature")]
public float design_condenser_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_rise_coefficient")]
public float temperature_rise_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_outlet_temperature")]
public float design_chilled_water_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_fluid_flow_rate")]
public string design_condenser_fluid_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public float coefficient_1_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public float coefficient_2_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public float coefficient_3_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public float coefficient_1_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public float coefficient_2_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public float coefficient_3_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public float coefficient_1_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public float coefficient_2_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public float coefficient_3_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public float chilled_water_outlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public string design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public float condenser_heat_recovery_relative_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_inlet_high_temperature_limit_schedule_name")]
public string heat_recovery_inlet_high_temperature_limit_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_leaving_temperature_setpoint_node_name")]
public string heat_recovery_leaving_temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum CondensertypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
    }
    
    [JsonProperty("Chiller:Absorption:Indirect")]
    [Description(@"This indirect absorption chiller model is an enhanced model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. The chiller capacity is a function of condenser, chilled water, and generator temperatures. The heat input is a function of part-load ratio, condenser temperature, and chilled water temperature.")]
    public class Chiller_Absorption_Indirect
    {
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        
        private void HotWater;
        
        private void Steam;
        

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_pumping_power")]
public string nominal_pumping_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_inlet_temperature")]
public float design_condenser_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("condenser_inlet_temperature_lower_limit")]
public float condenser_inlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public float chilled_water_outlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("generator_heat_input_function_of_part_load_ratio_curve_name")]
public string generator_heat_input_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_electric_input_function_of_part_load_ratio_curve_name")]
public string pump_electric_input_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_inlet_node_name")]
public string generator_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_outlet_node_name")]
public string generator_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_correction_function_of_condenser_temperature_curve_name")]
public string capacity_correction_function_of_condenser_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_correction_function_of_chilled_water_temperature_curve_name")]
public string capacity_correction_function_of_chilled_water_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_correction_function_of_generator_temperature_curve_name")]
public string capacity_correction_function_of_generator_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_heat_input_correction_function_of_condenser_temperature_curve_name")]
public string generator_heat_input_correction_function_of_condenser_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_heat_input_correction_function_of_chilled_water_temperature_curve_name")]
public string generator_heat_input_correction_function_of_chilled_water_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_heat_source_type")]
public GeneratorheatsourcetypeType generator_heat_source_type
{
    get
    {
    }
    set
    {
    }
}
 = (GeneratorheatsourcetypeType)Steam;

[JsonProperty("design_generator_fluid_flow_rate")]
public string design_generator_fluid_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_lower_limit_generator_inlet")]
public float temperature_lower_limit_generator_inlet
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("degree_of_subcooling_in_steam_generator")]
public float degree_of_subcooling_in_steam_generator
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("degree_of_subcooling_in_steam_condensate_loop")]
public float degree_of_subcooling_in_steam_condensate_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
        
        [Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
        public enum GeneratorheatsourcetypeType
        {
        }
    }
    
    [JsonProperty("Chiller:Absorption")]
    [Description(@"This indirect absorption chiller model is the empirical model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. Two sets of coefficients are required.")]
    public class Chiller_Absorption
    {
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        
        private void HotWater;
        
        private void Steam;
        

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_pumping_power")]
public string nominal_pumping_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_inlet_temperature")]
public float design_condenser_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public float coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public float coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve")]
public float coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_the_pump_electric_use_part_load_ratio_curve")]
public float coefficient_1_of_the_pump_electric_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_the_pump_electric_use_part_load_ratio_curve")]
public float coefficient_2_of_the_pump_electric_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_the_pump_electric_use_part_load_ratio_curve")]
public float coefficient_3_of_the_pump_electric_use_part_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public float chilled_water_outlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_inlet_node_name")]
public string generator_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generator_outlet_node_name")]
public string generator_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("generator_heat_source_type")]
public GeneratorheatsourcetypeType generator_heat_source_type
{
    get
    {
    }
    set
    {
    }
}
 = (GeneratorheatsourcetypeType)Steam;

[JsonProperty("design_generator_fluid_flow_rate")]
public string design_generator_fluid_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("degree_of_subcooling_in_steam_generator")]
public float degree_of_subcooling_in_steam_generator
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
        
        [Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
        public enum GeneratorheatsourcetypeType
        {
        }
    }
    
    [JsonProperty("Chiller:ConstantCOP")]
    [Description("This constant COP chiller model provides a means of quickly specifying a Chiller " +
        "where performance data is not available.")]
    public class Chiller_ConstantCOP
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
    }
    
    [JsonProperty("Chiller:EngineDriven")]
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    public class Chiller_EngineDriven
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_inlet_temperature")]
public float design_condenser_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_rise_coefficient")]
public float temperature_rise_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_outlet_temperature")]
public float design_chilled_water_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public float coefficient_1_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public float coefficient_2_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public float coefficient_3_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public float coefficient_1_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public float coefficient_2_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public float coefficient_3_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public float coefficient_1_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public float coefficient_2_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public float coefficient_3_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public float chilled_water_outlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_use_curve_name")]
public string fuel_use_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("jacket_heat_recovery_curve_name")]
public string jacket_heat_recovery_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lube_heat_recovery_curve_name")]
public string lube_heat_recovery_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_exhaust_energy_curve_name")]
public string total_exhaust_energy_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_temperature_curve_name")]
public string exhaust_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public float coefficient_1_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public float coefficient_2_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public float maximum_exhaust_flow_per_unit_of_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_minimum_exhaust_temperature")]
public float design_minimum_exhaust_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public string design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node")]
public float maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public float condenser_heat_recovery_relative_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
        
        public enum FueltypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
    }
    
    [JsonProperty("Chiller:CombustionTurbine")]
    [Description("This chiller model is the empirical model from the Building Loads and System Ther" +
        "modynamics (BLAST) program. Chiller performance curves are generated by fitting " +
        "catalog data to third order polynomial equations. Three sets of coefficients are" +
        " required.")]
    public class Chiller_CombustionTurbine
    {
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void ConstantFlow;
        
        private void LeavingSetpointModulated;
        
        private void NotModulated;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_inlet_temperature")]
public float design_condenser_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_rise_coefficient")]
public float temperature_rise_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_outlet_temperature")]
public float design_chilled_water_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_capacity_ratio_curve")]
public float coefficient_1_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_capacity_ratio_curve")]
public float coefficient_2_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_capacity_ratio_curve")]
public float coefficient_3_of_capacity_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_power_ratio_curve")]
public float coefficient_1_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_power_ratio_curve")]
public float coefficient_2_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_power_ratio_curve")]
public float coefficient_3_of_power_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_full_load_ratio_curve")]
public float coefficient_1_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_full_load_ratio_curve")]
public float coefficient_2_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_full_load_ratio_curve")]
public float coefficient_3_of_full_load_ratio_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_temperature_lower_limit")]
public float chilled_water_outlet_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_fuel_input_curve")]
public float coefficient_1_of_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_fuel_input_curve")]
public float coefficient_2_of_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_fuel_input_curve")]
public float coefficient_3_of_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_temperature_based_fuel_input_curve")]
public float coefficient_1_of_temperature_based_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_temperature_based_fuel_input_curve")]
public float coefficient_2_of_temperature_based_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_temperature_based_fuel_input_curve")]
public float coefficient_3_of_temperature_based_fuel_input_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_exhaust_flow_curve")]
public float coefficient_1_of_exhaust_flow_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_exhaust_flow_curve")]
public float coefficient_2_of_exhaust_flow_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_exhaust_flow_curve")]
public float coefficient_3_of_exhaust_flow_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_exhaust_gas_temperature_curve")]
public float coefficient_1_of_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_exhaust_gas_temperature_curve")]
public float coefficient_2_of_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_exhaust_gas_temperature_curve")]
public float coefficient_3_of_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_temperature_based_exhaust_gas_temperature_curve")]
public float coefficient_1_of_temperature_based_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_temperature_based_exhaust_gas_temperature_curve")]
public float coefficient_2_of_temperature_based_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_temperature_based_exhaust_gas_temperature_curve")]
public float coefficient_3_of_temperature_based_exhaust_gas_temperature_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_recovery_lube_heat_curve")]
public float coefficient_1_of_recovery_lube_heat_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_recovery_lube_heat_curve")]
public float coefficient_2_of_recovery_lube_heat_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_recovery_lube_heat_curve")]
public float coefficient_3_of_recovery_lube_heat_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public float coefficient_1_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public float coefficient_2_of_u_factor_times_area_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_turbine_engine_capacity")]
public string gas_turbine_engine_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public float maximum_exhaust_flow_per_unit_of_power_output
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_steam_saturation_temperature")]
public float design_steam_saturation_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public string design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("heat_recovery_inlet_node_name")]
public string heat_recovery_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_outlet_node_name")]
public string heat_recovery_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_flow_mode")]
public ChillerflowmodeType chiller_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (ChillerflowmodeType)NotModulated;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)NaturalGas;

[JsonProperty("heat_recovery_maximum_temperature")]
public float heat_recovery_maximum_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_heat_recovery_relative_capacity_fraction")]
public float condenser_heat_recovery_relative_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("turbine_engine_efficiency")]
public float turbine_engine_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;
        
        public enum CondensertypeType
        {
        }
        
        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        public enum ChillerflowmodeType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("ChillerHeater:Absorption:DirectFired")]
    [Description("Direct fired gas absorption chiller-heater using performance curves similar to DO" +
        "E-2")]
    public class ChillerHeater_Absorption_DirectFired
    {
        
        private void EnteringCondenser;
        
        private void LeavingCondenser;
        
        private void AirCooled;
        
        private void WaterCooled;
        
        private void Diesel;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("nominal_cooling_capacity")]
public string nominal_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_to_cooling_capacity_ratio")]
public float heating_to_cooling_capacity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("fuel_input_to_cooling_output_ratio")]
public float fuel_input_to_cooling_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.97;

[JsonProperty("fuel_input_to_heating_output_ratio")]
public float fuel_input_to_heating_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("electric_input_to_cooling_output_ratio")]
public float electric_input_to_cooling_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("electric_input_to_heating_output_ratio")]
public float electric_input_to_heating_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_inlet_node_name")]
public string hot_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_outlet_node_name")]
public string hot_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("design_entering_condenser_water_temperature")]
public float design_entering_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29;

[JsonProperty("design_leaving_chilled_water_temperature")]
public float design_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_hot_water_flow_rate")]
public string design_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_cooling_capacity_curve_name")]
public string heating_capacity_function_of_cooling_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name")]
public string fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_curve_input_variable")]
public TemperaturecurveinputvariableType temperature_curve_input_variable
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecurveinputvariableType)EnteringCondenser;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterCooled;

[JsonProperty("chilled_water_temperature_lower_limit")]
public float chilled_water_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("fuel_higher_heating_value")]
public float fuel_higher_heating_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)NaturalGas;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
        public enum TemperaturecurveinputvariableType
        {
        }
        
        [Description("The condenser can either be air cooled or connected to a cooling tower.")]
        public enum CondensertypeType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("ChillerHeater:Absorption:DoubleEffect")]
    [Description("Exhaust fired absorption chiller-heater using performance curves similar to DOE-2" +
        "")]
    public class ChillerHeater_Absorption_DoubleEffect
    {
        
        private void EnteringCondenser;
        
        private void LeavingCondenser;
        
        private void AirCooled;
        
        private void WaterCooled;
        
        private void Generator:MicroTurbine;
        

[JsonProperty("nominal_cooling_capacity")]
public string nominal_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_to_cooling_capacity_ratio")]
public float heating_to_cooling_capacity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("thermal_energy_input_to_cooling_output_ratio")]
public float thermal_energy_input_to_cooling_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.97;

[JsonProperty("thermal_energy_input_to_heating_output_ratio")]
public float thermal_energy_input_to_heating_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.25;

[JsonProperty("electric_input_to_cooling_output_ratio")]
public float electric_input_to_cooling_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("electric_input_to_heating_output_ratio")]
public float electric_input_to_heating_output_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_inlet_node_name")]
public string hot_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_outlet_node_name")]
public string hot_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("design_entering_condenser_water_temperature")]
public float design_entering_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29;

[JsonProperty("design_leaving_chilled_water_temperature")]
public float design_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_hot_water_flow_rate")]
public string design_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("cooling_capacity_function_of_temperature_curve_name")]
public string cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_temperature_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name")]
public string electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_function_of_cooling_capacity_curve_name")]
public string heating_capacity_function_of_cooling_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name")]
public string fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_curve_input_variable")]
public TemperaturecurveinputvariableType temperature_curve_input_variable
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecurveinputvariableType)EnteringCondenser;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterCooled;

[JsonProperty("chilled_water_temperature_lower_limit")]
public float chilled_water_temperature_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("exhaust_source_object_type")]
public ExhaustsourceobjecttypeType exhaust_source_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_source_object_name")]
public string exhaust_source_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower).")]
        public enum TemperaturecurveinputvariableType
        {
        }
        
        [Description("The condenser can either be air cooled or connected to a cooling tower.")]
        public enum CondensertypeType
        {
        }
        
        public enum ExhaustsourceobjecttypeType
        {
        }
    }
    
    [JsonProperty("HeatPump:PlantLoop:EIR:Cooling")]
    [Description("An EIR formulated water to water heat pump model, cooling operation.")]
    public class HeatPump_PlantLoop_EIR_Cooling
    {
        
        private void AirSource;
        
        private void WaterSource;
        

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterSource;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("companion_heat_pump_name")]
public string companion_heat_pump_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_reference_flow_rate")]
public string load_side_reference_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_reference_flow_rate")]
public string source_side_reference_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("reference_capacity")]
public string reference_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("reference_coefficient_of_performance")]
public float reference_coefficient_of_performance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("capacity_modifier_function_of_temperature_curve_name")]
public string capacity_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_output_ratio_modifier_function_of_temperature_curve_name")]
public string electric_input_to_output_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name")]
public string electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("HeatPump:PlantLoop:EIR:Heating")]
    [Description("An EIR formulated water to water heat pump model, heating operation")]
    public class HeatPump_PlantLoop_EIR_Heating
    {
        
        private void AirSource;
        
        private void WaterSource;
        

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterSource;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("companion_heat_pump_name")]
public string companion_heat_pump_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_reference_flow_rate")]
public string load_side_reference_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_reference_flow_rate")]
public string source_side_reference_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("reference_capacity")]
public string reference_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("reference_coefficient_of_performance")]
public float reference_coefficient_of_performance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("capacity_modifier_function_of_temperature_curve_name")]
public string capacity_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_output_ratio_modifier_function_of_temperature_curve_name")]
public string electric_input_to_output_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name")]
public string electric_input_to_output_ratio_modifier_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum CondensertypeType
        {
        }
    }
    
    [JsonProperty("HeatPump:WaterToWater:EquationFit:Heating")]
    [Description("simple water-water hp curve-fit model")]
    public class HeatPump_WaterToWater_EquationFit_Heating
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_load_side_flow_rate")]
public string reference_load_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_source_side_flow_rate")]
public string reference_source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_heating_capacity")]
public string reference_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_heating_power_consumption")]
public string reference_heating_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_curve_name")]
public string heating_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_compressor_power_curve_name")]
public string heating_compressor_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_coefficient_of_performance")]
public float reference_coefficient_of_performance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("companion_cooling_heat_pump_name")]
public string companion_cooling_heat_pump_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("HeatPump:WaterToWater:EquationFit:Cooling")]
    [Description("simple water-water heat pump curve-fit model")]
    public class HeatPump_WaterToWater_EquationFit_Cooling
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_load_side_flow_rate")]
public string reference_load_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_source_side_flow_rate")]
public string reference_source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cooling_capacity")]
public string reference_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cooling_power_consumption")]
public string reference_cooling_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_curve_name")]
public string cooling_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_compressor_power_curve_name")]
public string cooling_compressor_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_coefficient_of_performance")]
public float reference_coefficient_of_performance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)8;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("companion_heating_heat_pump_name")]
public string companion_heating_heat_pump_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("HeatPump:WaterToWater:ParameterEstimation:Cooling")]
    [Description("OSU parameter estimation model")]
    public class HeatPump_WaterToWater_ParameterEstimation_Cooling
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public float nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_flow_rate")]
public float load_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_flow_rate")]
public float source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_heat_transfer_coefficient")]
public float load_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_coefficient")]
public float source_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piston_displacement")]
public float piston_displacement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_clearance_factor")]
public float compressor_clearance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_suction_and_discharge_pressure_drop")]
public float compressor_suction_and_discharge_pressure_drop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("superheating")]
public float superheating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_part_of_electromechanical_power_losses")]
public float constant_part_of_electromechanical_power_losses
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loss_factor")]
public float loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_pressure_cut_off")]
public float high_pressure_cut_off
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500000000;

[JsonProperty("low_pressure_cut_off")]
public float low_pressure_cut_off
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("HeatPump:WaterToWater:ParameterEstimation:Heating")]
    [Description("OSU parameter estimation model")]
    public class HeatPump_WaterToWater_ParameterEstimation_Heating
    {
        

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_inlet_node_name")]
public string load_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_outlet_node_name")]
public string load_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cop")]
public float nominal_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public float nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_part_load_ratio")]
public float minimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_part_load_ratio")]
public float maximum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimum_part_load_ratio")]
public float optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_flow_rate")]
public float load_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_flow_rate")]
public float source_side_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_side_heat_transfer_coefficient")]
public float load_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_coefficient")]
public float source_side_heat_transfer_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piston_displacement")]
public float piston_displacement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_clearance_factor")]
public float compressor_clearance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_suction_and_discharge_pressure_drop")]
public float compressor_suction_and_discharge_pressure_drop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("superheating")]
public float superheating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_part_of_electromechanical_power_losses")]
public float constant_part_of_electromechanical_power_losses
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loss_factor")]
public float loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_pressure_cut_off")]
public float high_pressure_cut_off
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)500000000;

[JsonProperty("low_pressure_cut_off")]
public float low_pressure_cut_off
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("DistrictCooling")]
    [Description("Centralized source of chilled water, such as a district cooling system.")]
    public class DistrictCooling
    {
        

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_fraction_schedule_name")]
public string capacity_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("DistrictHeating")]
    [Description("Centralized source of hot water, such as a district heating system.")]
    public class DistrictHeating
    {
        

[JsonProperty("hot_water_inlet_node_name")]
public string hot_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_outlet_node_name")]
public string hot_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_capacity")]
public string nominal_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_fraction_schedule_name")]
public string capacity_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantComponent:TemperatureSource")]
    [Description(@"Simulates an object of pre-determined (constant or scheduled) source temperature The object introduces fluid into the plant loop at the specified temperature and at the same flow rate as the fluid enters the component Fluid entering the component vanishes equivalent to the relief air in an air system")]
    public class PlantComponent_TemperatureSource
    {
        
        private void Constant;
        
        private void Scheduled;
        

[JsonProperty("inlet_node")]
public string inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node")]
public string outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_volume_flow_rate")]
public string design_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_specification_type")]
public TemperaturespecificationtypeType temperature_specification_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_temperature")]
public float source_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_temperature_schedule_name")]
public string source_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TemperaturespecificationtypeType
        {
        }
    }
    
    [JsonProperty("CentralHeatPumpSystem")]
    [Description(@"This chiller bank can contain multiple chiller heaters and heat pump performance objects. Its function is to encapsulate the extra controls needed to turn individual modules on/off and whether they are to operate in cooling-only, heating-only or simultaneous cooling/heating mode and whether to connect the source water to the evaporator or condenser side.")]
    public class CentralHeatPumpSystem
    {
        
        private void SmartMixing;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        
        private void ChillerHeaterPerformance:Electric:EIR;
        

[JsonProperty("control_method")]
public ControlmethodType control_method
{
    get
    {
    }
    set
    {
    }
}
 = (ControlmethodType)SmartMixing;

[JsonProperty("cooling_loop_inlet_node_name")]
public string cooling_loop_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_loop_outlet_node_name")]
public string cooling_loop_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_loop_inlet_node_name")]
public string source_loop_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_loop_outlet_node_name")]
public string source_loop_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_loop_inlet_node_name")]
public string heating_loop_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_loop_outlet_node_name")]
public string heating_loop_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ancillary_power")]
public float ancillary_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ancillary_operation_schedule_name")]
public string ancillary_operation_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_object_type_1")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_1")]
public string chiller_heater_modules_performance_component_name_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_1")]
public string chiller_heater_modules_control_schedule_name_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_1")]
public float number_of_chiller_heater_modules_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_2")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_2")]
public string chiller_heater_modules_performance_component_name_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_2")]
public string chiller_heater_modules_control_schedule_name_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_2")]
public float number_of_chiller_heater_modules_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_performance_component_object_type_3")]
public ChillerheaterperformancecomponentobjecttypeType chiller_heater_performance_component_object_type_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_performance_component_name_3")]
public string chiller_heater_performance_component_name_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_3")]
public string chiller_heater_modules_control_schedule_name_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_3")]
public float number_of_chiller_heater_modules_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_4")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_4")]
public string chiller_heater_modules_performance_component_name_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_4")]
public string chiller_heater_modules_control_schedule_name_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_4")]
public float number_of_chiller_heater_modules_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_5")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_models_performance_component_name_5")]
public string chiller_heater_models_performance_component_name_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_5")]
public string chiller_heater_modules_control_schedule_name_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_5")]
public float number_of_chiller_heater_modules_5
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_6")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_6")]
public string chiller_heater_modules_performance_component_name_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_6")]
public string chiller_heater_modules_control_schedule_name_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_6")]
public float number_of_chiller_heater_modules_6
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_7")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_7")]
public string chiller_heater_modules_performance_component_name_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_7")]
public string chiller_heater_modules_control_schedule_name_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_7")]
public float number_of_chiller_heater_modules_7
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_8")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_8")]
public string chiller_heater_modules_performance_component_name_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_8")]
public string chiller_heater_modules_control_schedule_name_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_8")]
public float number_of_chiller_heater_modules_8
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_9")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_9")]
public string chiller_heater_modules_performance_component_name_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_9")]
public string chiller_heater_modules_control_schedule_name_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_9")]
public float number_of_chiller_heater_modules_9
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_10")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_10")]
public string chiller_heater_modules_performance_component_name_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_10")]
public string chiller_heater_modules_control_schedule_name_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_10")]
public float number_of_chiller_heater_modules_10
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_11")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_11")]
public string chiller_heater_modules_performance_component_name_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_module_control_schedule_name_11")]
public string chiller_heater_module_control_schedule_name_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_11")]
public float number_of_chiller_heater_modules_11
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_12")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_12")]
public string chiller_heater_modules_performance_component_name_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_12")]
public string chiller_heater_modules_control_schedule_name_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_12")]
public float number_of_chiller_heater_modules_12
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_13")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_13")]
public string chiller_heater_modules_performance_component_name_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_13")]
public string chiller_heater_modules_control_schedule_name_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_13")]
public float number_of_chiller_heater_modules_13
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_14")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_14")]
public string chiller_heater_modules_performance_component_name_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_14")]
public string chiller_heater_modules_control_schedule_name_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_14")]
public float number_of_chiller_heater_modules_14
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_15")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_15")]
public string chiller_heater_modules_performance_component_name_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_15")]
public string chiller_heater_modules_control_schedule_name_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_15")]
public float number_of_chiller_heater_modules_15
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_16")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_16")]
public string chiller_heater_modules_performance_component_name_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_16")]
public string chiller_heater_modules_control_schedule_name_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_16")]
public float number_of_chiller_heater_modules_16
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_17")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_17")]
public string chiller_heater_modules_performance_component_name_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_17")]
public string chiller_heater_modules_control_schedule_name_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_17")]
public float number_of_chiller_heater_modules_17
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_18")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_18")]
public string chiller_heater_modules_performance_component_name_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_control_schedule_name_18")]
public string chiller_heater_modules_control_control_schedule_name_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_18")]
public float number_of_chiller_heater_modules_18
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_19")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_19")]
public string chiller_heater_modules_performance_component_name_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_19")]
public string chiller_heater_modules_control_schedule_name_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_19")]
public float number_of_chiller_heater_modules_19
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("chiller_heater_modules_performance_component_object_type_20")]
public ChillerheatermodulesperformancecomponentobjecttypeType chiller_heater_modules_performance_component_object_type_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_performance_component_name_20")]
public string chiller_heater_modules_performance_component_name_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chiller_heater_modules_control_schedule_name_20")]
public string chiller_heater_modules_control_schedule_name_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_chiller_heater_modules_20")]
public float number_of_chiller_heater_modules_20
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        public enum ControlmethodType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheaterperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
        
        public enum ChillerheatermodulesperformancecomponentobjecttypeType
        {
        }
    }
    
    [JsonProperty("ChillerHeaterPerformance:Electric:EIR")]
    [Description(@"This chiller model is a generic chiller-heater where the cooling mode performance is a function of condenser entering or leaving fluid temperature and the heating mode performance is typically a function of condenser leaving fluid temperature. Performance at off-reference conditions is modeled using three polynomial equations per mode. Six curve objects are required.")]
    public class ChillerHeaterPerformance_Electric_EIR
    {
        
        private void ConstantFlow;
        
        private void VariableFlow;
        
        private void AirCooled;
        
        private void WaterCooled;
        
        private void EnteringCondenser;
        
        private void LeavingCondenser;
        
        private void EnteringCondenser;
        
        private void LeavingCondenser;
        

[JsonProperty("reference_cooling_mode_evaporator_capacity")]
public string reference_cooling_mode_evaporator_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cooling_mode_cop")]
public float reference_cooling_mode_cop
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_cooling_mode_leaving_chilled_water_temperature")]
public float reference_cooling_mode_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.67;

[JsonProperty("reference_cooling_mode_entering_condenser_fluid_temperature")]
public float reference_cooling_mode_entering_condenser_fluid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29.44;

[JsonProperty("reference_cooling_mode_leaving_condenser_water_temperature")]
public float reference_cooling_mode_leaving_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("reference_heating_mode_cooling_capacity_ratio")]
public float reference_heating_mode_cooling_capacity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.75;

[JsonProperty("reference_heating_mode_cooling_power_input_ratio")]
public float reference_heating_mode_cooling_power_input_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.38;

[JsonProperty("reference_heating_mode_leaving_chilled_water_temperature")]
public float reference_heating_mode_leaving_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.67;

[JsonProperty("reference_heating_mode_leaving_condenser_water_temperature")]
public float reference_heating_mode_leaving_condenser_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)49;

[JsonProperty("reference_heating_mode_entering_condenser_fluid_temperature")]
public float reference_heating_mode_entering_condenser_fluid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)29.44;

[JsonProperty("heating_mode_entering_chilled_water_temperature_low_limit")]
public float heating_mode_entering_chilled_water_temperature_low_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12.22;

[JsonProperty("chilled_water_flow_mode_type")]
public ChilledwaterflowmodetypeType chilled_water_flow_mode_type
{
    get
    {
    }
    set
    {
    }
}
 = (ChilledwaterflowmodetypeType)ConstantFlow;

[JsonProperty("design_chilled_water_flow_rate")]
public string design_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_water_flow_rate")]
public string design_condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_hot_water_flow_rate")]
public float design_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("compressor_motor_efficiency")]
public float compressor_motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)WaterCooled;

[JsonProperty("cooling_mode_temperature_curve_condenser_water_independent_variable")]
public CoolingmodetemperaturecurvecondenserwaterindependentvariableType cooling_mode_temperature_curve_condenser_water_independent_variable
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingmodetemperaturecurvecondenserwaterindependentvariableType)EnteringCondenser;

[JsonProperty("cooling_mode_cooling_capacity_function_of_temperature_curve_name")]
public string cooling_mode_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve" +
    "_name")]
public string cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_c" +
    "urve_name")]
public string cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_mode_cooling_capacity_optimum_part_load_ratio")]
public float cooling_mode_cooling_capacity_optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heating_mode_temperature_curve_condenser_water_independent_variable")]
public HeatingmodetemperaturecurvecondenserwaterindependentvariableType heating_mode_temperature_curve_condenser_water_independent_variable
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingmodetemperaturecurvecondenserwaterindependentvariableType)LeavingCondenser;

[JsonProperty("heating_mode_cooling_capacity_function_of_temperature_curve_name")]
public string heating_mode_cooling_capacity_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve" +
    "_name")]
public string heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_c" +
    "urve_name")]
public string heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_mode_cooling_capacity_optimum_part_load_ratio")]
public float heating_mode_cooling_capacity_optimum_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("sizing_factor")]
public float sizing_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Sets chilled water flow rate to either constant or variable.")]
        public enum ChilledwaterflowmodetypeType
        {
        }
        
        public enum CondensertypeType
        {
        }
        
        [Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature")]
        public enum CoolingmodetemperaturecurvecondenserwaterindependentvariableType
        {
        }
        
        [Description(@"Sets the second independent variable in the three temperature dependent performance curves to either the leaving or entering condenser water temperature. Manufacturers express the performance of their chillers using either the leaving condenser water temperature (to the tower) or the entering condenser water temperature (from the tower). Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser")]
        public enum HeatingmodetemperaturecurvecondenserwaterindependentvariableType
        {
        }
    }
}
namespace EnergyPlus.PlantCondenserControl
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("PlantEquipmentList")]
    [Description(@"List plant equipment in order of operating priority, 1st in list will be used 1st, etc Use only plant equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available plant equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    public class PlantEquipmentList
    {
        

[JsonProperty("equipment")]
public string equipment
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("CondenserEquipmentList")]
    [Description(@"List condenser equipment in order of operating priority, 1st in list will be used 1st, etc Use only condenser equipment in this list. If no equipment object types and equipment names are specified, then the corresponding PlantEquipmentOperation:* object will assume all available condenser equipment for the loop should be OFF (not operate) within the specified lower/upper limit.")]
    public class CondenserEquipmentList
    {
        

[JsonProperty("equipment")]
public string equipment
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:Uncontrolled")]
    [Description("Plant equipment operation scheme for uncontrolled operation. Specifies a group of" +
        " equipment that runs if the loop is active, unless turned off by the loop flow r" +
        "esolver to maintain continuity in the fluid loop.")]
    public class PlantEquipmentOperation_Uncontrolled
    {
        

[JsonProperty("equipment_list_name")]
public string equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:CoolingLoad")]
    [Description("Plant equipment operation scheme for cooling load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive coolin" +
        "g load ranges.")]
    public class PlantEquipmentOperation_CoolingLoad
    {
        

[JsonProperty("load_range_1_lower_limit")]
public float load_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_1_upper_limit")]
public float load_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_2_lower_limit")]
public float load_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_2_upper_limit")]
public float load_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_3_lower_limit")]
public float load_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_3_upper_limit")]
public float load_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_4_lower_limit")]
public float load_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_4_upper_limit")]
public float load_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_5_lower_limit")]
public float load_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_5_upper_limit")]
public float load_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_6_lower_limit")]
public float load_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_6_upper_limit")]
public float load_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_7_lower_limit")]
public float load_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_7_upper_limit")]
public float load_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_8_lower_limit")]
public float load_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_8_upper_limit")]
public float load_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_9_lower_limit")]
public float load_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_9_upper_limit")]
public float load_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_10_lower_limit")]
public float load_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_10_upper_limit")]
public float load_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:HeatingLoad")]
    [Description("Plant equipment operation scheme for heating load range operation. Specifies one " +
        "or more groups of equipment which are available to operate for successive heatin" +
        "g load ranges.")]
    public class PlantEquipmentOperation_HeatingLoad
    {
        

[JsonProperty("load_range_1_lower_limit")]
public float load_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_1_upper_limit")]
public float load_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_2_lower_limit")]
public float load_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_2_upper_limit")]
public float load_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_3_lower_limit")]
public float load_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_3_upper_limit")]
public float load_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_4_lower_limit")]
public float load_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_4_upper_limit")]
public float load_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_5_lower_limit")]
public float load_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_5_upper_limit")]
public float load_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_6_lower_limit")]
public float load_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_6_upper_limit")]
public float load_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_7_lower_limit")]
public float load_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_7_upper_limit")]
public float load_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_8_lower_limit")]
public float load_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_8_upper_limit")]
public float load_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_9_lower_limit")]
public float load_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_9_upper_limit")]
public float load_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_10_lower_limit")]
public float load_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_range_10_upper_limit")]
public float load_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorDryBulb")]
    [Description("Plant equipment operation scheme for outdoor dry-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dry-bulb temperature ranges.")]
    public class PlantEquipmentOperation_OutdoorDryBulb
    {
        

[JsonProperty("dry_bulb_temperature_range_1_lower_limit")]
public float dry_bulb_temperature_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_1_upper_limit")]
public float dry_bulb_temperature_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_2_lower_limit")]
public float dry_bulb_temperature_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_2_upper_limit")]
public float dry_bulb_temperature_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_3_lower_limit")]
public float dry_bulb_temperature_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_3_upper_limit")]
public float dry_bulb_temperature_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_4_lower_limit")]
public float dry_bulb_temperature_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_4_upper_limit")]
public float dry_bulb_temperature_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_5_lower_limit")]
public float dry_bulb_temperature_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_5_upper_limit")]
public float dry_bulb_temperature_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_6_lower_limit")]
public float dry_bulb_temperature_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_6_upper_limit")]
public float dry_bulb_temperature_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_7_lower_limit")]
public float dry_bulb_temperature_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_7_upper_limit")]
public float dry_bulb_temperature_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_8_lower_limit")]
public float dry_bulb_temperature_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_8_upper_limit")]
public float dry_bulb_temperature_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_9_lower_limit")]
public float dry_bulb_temperature_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_9_upper_limit")]
public float dry_bulb_temperature_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_10_lower_limit")]
public float dry_bulb_temperature_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_range_10_upper_limit")]
public float dry_bulb_temperature_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorWetBulb")]
    [Description("Plant equipment operation scheme for outdoor wet-bulb temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor wet-bulb temperature ranges.")]
    public class PlantEquipmentOperation_OutdoorWetBulb
    {
        

[JsonProperty("wet_bulb_temperature_range_1_lower_limit")]
public float wet_bulb_temperature_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_1_upper_limit")]
public float wet_bulb_temperature_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_2_lower_limit")]
public float wet_bulb_temperature_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_2_upper_limit")]
public float wet_bulb_temperature_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_3_lower_limit")]
public float wet_bulb_temperature_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_3_upper_limit")]
public float wet_bulb_temperature_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_4_lower_limit")]
public float wet_bulb_temperature_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_4_upper_limit")]
public float wet_bulb_temperature_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_5_lower_limit")]
public float wet_bulb_temperature_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_5_upper_limit")]
public float wet_bulb_temperature_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_6_lower_limit")]
public float wet_bulb_temperature_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_6_upper_limit")]
public float wet_bulb_temperature_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_7_lower_limit")]
public float wet_bulb_temperature_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_7_upper_limit")]
public float wet_bulb_temperature_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_8_lower_limit")]
public float wet_bulb_temperature_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_8_upper_limit")]
public float wet_bulb_temperature_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_9_lower_limit")]
public float wet_bulb_temperature_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_9_upper_limit")]
public float wet_bulb_temperature_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_10_lower_limit")]
public float wet_bulb_temperature_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_range_10_upper_limit")]
public float wet_bulb_temperature_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorRelativeHumidity")]
    [Description("Plant equipment operation scheme for outdoor relative humidity range operation. S" +
        "pecifies one or more groups of equipment which are available to operate for succ" +
        "essive outdoor relative humidity ranges.")]
    public class PlantEquipmentOperation_OutdoorRelativeHumidity
    {
        

[JsonProperty("relative_humidity_range_1_lower_limit")]
public float relative_humidity_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_1_upper_limit")]
public float relative_humidity_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_2_lower_limit")]
public float relative_humidity_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_2_upper_limit")]
public float relative_humidity_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_3_lower_limit")]
public float relative_humidity_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_3_upper_limit")]
public float relative_humidity_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_4_lower_limit")]
public float relative_humidity_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_4_upper_limit")]
public float relative_humidity_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_5_lower_limit")]
public float relative_humidity_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_5_upper_limit")]
public float relative_humidity_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_6_lower_limit")]
public float relative_humidity_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_6_upper_limit")]
public float relative_humidity_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_7_lower_limit")]
public float relative_humidity_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_7_upper_limit")]
public float relative_humidity_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_8_lower_limit")]
public float relative_humidity_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_8_upper_limit")]
public float relative_humidity_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_9_lower_limit")]
public float relative_humidity_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_9_upper_limit")]
public float relative_humidity_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_10_lower_limit")]
public float relative_humidity_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_range_10_upper_limit")]
public float relative_humidity_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorDewpoint")]
    [Description("Plant equipment operation scheme for outdoor dewpoint temperature range operation" +
        ". Specifies one or more groups of equipment which are available to operate for s" +
        "uccessive outdoor dewpoint temperature ranges.")]
    public class PlantEquipmentOperation_OutdoorDewpoint
    {
        

[JsonProperty("dewpoint_temperature_range_1_lower_limit")]
public float dewpoint_temperature_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_1_upper_limit")]
public float dewpoint_temperature_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_2_lower_limit")]
public float dewpoint_temperature_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_2_upper_limit")]
public float dewpoint_temperature_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_3_lower_limit")]
public float dewpoint_temperature_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_3_upper_limit")]
public float dewpoint_temperature_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_4_lower_limit")]
public float dewpoint_temperature_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_4_upper_limit")]
public float dewpoint_temperature_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_5_lower_limit")]
public float dewpoint_temperature_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_5_upper_limit")]
public float dewpoint_temperature_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_6_lower_limit")]
public float dewpoint_temperature_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_6_upper_limit")]
public float dewpoint_temperature_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_7_lower_limit")]
public float dewpoint_temperature_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_7_upper_limit")]
public float dewpoint_temperature_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_8_lower_limit")]
public float dewpoint_temperature_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_8_upper_limit")]
public float dewpoint_temperature_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_9_lower_limit")]
public float dewpoint_temperature_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_9_upper_limit")]
public float dewpoint_temperature_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_10_lower_limit")]
public float dewpoint_temperature_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_range_10_upper_limit")]
public float dewpoint_temperature_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:ComponentSetpoint")]
    [Description("Plant equipment operation scheme for component setpoint operation. Specifies one " +
        "or pieces of equipment which are controlled to meet the temperature setpoint at " +
        "the component outlet node.")]
    public class PlantEquipmentOperation_ComponentSetpoint
    {
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        

[JsonProperty("equipment_1_object_type")]
public string equipment_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_1_name")]
public string equipment_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_1_node_name")]
public string demand_calculation_1_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_1_node_name")]
public string setpoint_1_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_flow_rate")]
public string component_1_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_1_type")]
public OperationtypeType operation_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_2_object_type")]
public string equipment_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_2_name")]
public string equipment_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_2_node_name")]
public string demand_calculation_2_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_2_node_name")]
public string setpoint_2_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_flow_rate")]
public string component_2_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_2_type")]
public OperationtypeType operation_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_3_object_type")]
public string equipment_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_3_name")]
public string equipment_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_3_node_name")]
public string demand_calculation_3_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_3_node_name")]
public string setpoint_3_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_flow_rate")]
public string component_3_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_3_type")]
public OperationtypeType operation_3_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_4_object_type")]
public string equipment_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_4_name")]
public string equipment_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_4_node_name")]
public string demand_calculation_4_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_4_node_name")]
public string setpoint_4_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_flow_rate")]
public string component_4_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_4_type")]
public OperationtypeType operation_4_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_5_object_type")]
public string equipment_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_5_name")]
public string equipment_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_5_node_name")]
public string demand_calculation_5_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_5_node_name")]
public string setpoint_5_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_flow_rate")]
public string component_5_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_5_type")]
public OperationtypeType operation_5_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_6_object_type")]
public string equipment_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_6_name")]
public string equipment_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_6_node_name")]
public string demand_calculation_6_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_6_node_name")]
public string setpoint_6_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_flow_rate")]
public string component_6_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_6_type")]
public OperationtypeType operation_6_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_7_object_type")]
public string equipment_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_7_name")]
public string equipment_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_7_node_name")]
public string demand_calculation_7_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_7_node_name")]
public string setpoint_7_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_flow_rate")]
public string component_7_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_7_type")]
public OperationtypeType operation_7_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_8_object_type")]
public string equipment_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_8_name")]
public string equipment_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_8_node_name")]
public string demand_calculation_8_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_8_node_name")]
public string setpoint_8_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_flow_rate")]
public string component_8_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_8_type")]
public OperationtypeType operation_8_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_9_object_type")]
public string equipment_9_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_9_name")]
public string equipment_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_9_node_name")]
public string demand_calculation_9_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_9_node_name")]
public string setpoint_9_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_flow_rate")]
public string component_9_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_9_type")]
public OperationtypeType operation_9_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_10_object_type")]
public string equipment_10_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_10_name")]
public string equipment_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_calculation_10_node_name")]
public string demand_calculation_10_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_10_node_name")]
public string setpoint_10_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_flow_rate")]
public string component_10_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operation_10_type")]
public OperationtypeType operation_10_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
        
        public enum OperationtypeType
        {
        }
    }
    
    [JsonProperty("PlantEquipmentOperation:ThermalEnergyStorage")]
    [Description("Plant equipment operation scheme for simpler input to control thermal (ice) energ" +
        "y storage systems. It replaces a host of setpoint managers with simple, single i" +
        "nput values. For more complex controls, use the ComponentSetpoint scheme.")]
    public class PlantEquipmentOperation_ThermalEnergyStorage
    {
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        
        private void Chiller:Absorption;
        
        private void Chiller:Absorption:Indirect;
        
        private void Chiller:CombustionTurbine;
        
        private void Chiller:ConstantCOP;
        
        private void Chiller:Electric;
        
        private void Chiller:Electric:EIR;
        
        private void Chiller:Electric:ReformulatedEIR;
        
        private void Chiller:EngineDriven;
        
        private void ThermalStorage:Ice:Detailed;
        
        private void ThermalStorage:Ice:Simple;
        
        private void Cooling;
        
        private void Dual;
        
        private void Heating;
        

[JsonProperty("on_peak_schedule")]
public string on_peak_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charging_availability_schedule")]
public string charging_availability_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("non_charging_chilled_water_temperature")]
public float non_charging_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charging_chilled_water_temperature")]
public float charging_chilled_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_object_type")]
public ComponentobjecttypeType component_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_name")]
public string component_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_demand_calculation_node_name")]
public string component_1_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_setpoint_node_name")]
public string component_1_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_flow_rate")]
public string component_1_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_operation_type")]
public ComponentoperationtypeType component_1_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_object_type")]
public ComponentobjecttypeType component_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_name")]
public string component_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_demand_calculation_node_name")]
public string component_2_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_setpoint_node_name")]
public string component_2_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_flow_rate")]
public string component_2_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_operation_type")]
public ComponentoperationtypeType component_2_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_object_type")]
public ComponentobjecttypeType component_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_name")]
public string component_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_demand_calculation_node_name")]
public string component_3_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_setpoint_node_name")]
public string component_3_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_flow_rate")]
public string component_3_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_operation_type")]
public ComponentoperationtypeType component_3_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_object_type")]
public ComponentobjecttypeType component_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_name")]
public string component_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_demand_calculation_node_name")]
public string component_4_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_setpoint_node_name")]
public string component_4_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_flow_rate")]
public string component_4_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_operation_type")]
public ComponentoperationtypeType component_4_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_object_type")]
public ComponentobjecttypeType component_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_name")]
public string component_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_demand_calculation_node_name")]
public string component_5_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_setpoint_node_name")]
public string component_5_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_flow_rate")]
public string component_5_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_operation_type")]
public ComponentoperationtypeType component_5_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_object_type")]
public ComponentobjecttypeType component_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_name")]
public string component_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_demand_calculation_node_name")]
public string component_6_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_setpoint_node_name")]
public string component_6_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_flow_rate")]
public string component_6_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_operation_type")]
public ComponentoperationtypeType component_6_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_object_type")]
public ComponentobjecttypeType component_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_name")]
public string component_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_demand_calculation_node_name")]
public string component_7_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_setpoint_node_name")]
public string component_7_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_flow_rate")]
public string component_7_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_operation_type")]
public ComponentoperationtypeType component_7_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_object_type")]
public ComponentobjecttypeType component_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_name")]
public string component_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_demand_calculation_node_name")]
public string component_8_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_setpoint_node_name")]
public string component_8_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_flow_rate")]
public string component_8_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_operation_type")]
public ComponentoperationtypeType component_8_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_object_type")]
public ComponentobjecttypeType component_9_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_name")]
public string component_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_demand_calculation_node_name")]
public string component_9_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_setpoint_node_name")]
public string component_9_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_flow_rate")]
public string component_9_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_9_operation_type")]
public ComponentoperationtypeType component_9_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_object_type")]
public ComponentobjecttypeType component_10_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_name")]
public string component_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_demand_calculation_node_name")]
public string component_10_demand_calculation_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_setpoint_node_name")]
public string component_10_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_flow_rate")]
public string component_10_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_10_operation_type")]
public ComponentoperationtypeType component_10_operation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This field is the type of object and should either be a chiller or some ice stora" +
            "ge equipment.")]
        public enum ComponentobjecttypeType
        {
        }
        
        [Description("This field is the operation type for the component listed above. For this plant e" +
            "quipment operation scheme, \"Cooling\" should be selected for chiller equipment wh" +
            "ile ice storage equipment should be defined as \"Dual\".")]
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentoperationtypeType
        {
        }
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorDryBulbDifference")]
    [Description(@"Plant equipment operation scheme for outdoor dry-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dry-bulb temperature.")]
    public class PlantEquipmentOperation_OutdoorDryBulbDifference
    {
        

[JsonProperty("reference_temperature_node_name")]
public string reference_temperature_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_1_lower_limit")]
public float dry_bulb_temperature_difference_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_1_upper_limit")]
public float dry_bulb_temperature_difference_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_2_lower_limit")]
public float dry_bulb_temperature_difference_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_2_upper_limit")]
public float dry_bulb_temperature_difference_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_3_lower_limit")]
public float dry_bulb_temperature_difference_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_3_upper_limit")]
public float dry_bulb_temperature_difference_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_4_lower_limit")]
public float dry_bulb_temperature_difference_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_4_upper_limit")]
public float dry_bulb_temperature_difference_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_5_lower_limit")]
public float dry_bulb_temperature_difference_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_5_upper_limit")]
public float dry_bulb_temperature_difference_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_6_lower_limit")]
public float dry_bulb_temperature_difference_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_6_upper_limit")]
public float dry_bulb_temperature_difference_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_7_lower_limit")]
public float dry_bulb_temperature_difference_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_7_upper_limit")]
public float dry_bulb_temperature_difference_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_8_lower_limit")]
public float dry_bulb_temperature_difference_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_8_upper_limit")]
public float dry_bulb_temperature_difference_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_9_lower_limit")]
public float dry_bulb_temperature_difference_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_9_upper_limit")]
public float dry_bulb_temperature_difference_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_10_lower_limit")]
public float dry_bulb_temperature_difference_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dry_bulb_temperature_difference_range_10_upper_limit")]
public float dry_bulb_temperature_difference_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorWetBulbDifference")]
    [Description(@"Plant equipment operation scheme for outdoor wet-bulb temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor wet-bulb temperature.")]
    public class PlantEquipmentOperation_OutdoorWetBulbDifference
    {
        

[JsonProperty("reference_temperature_node_name")]
public string reference_temperature_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_1_lower_limit")]
public float wet_bulb_temperature_difference_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_1_upper_limit")]
public float wet_bulb_temperature_difference_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_2_lower_limit")]
public float wet_bulb_temperature_difference_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_2_upper_limit")]
public float wet_bulb_temperature_difference_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_3_lower_limit")]
public float wet_bulb_temperature_difference_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_3_upper_limit")]
public float wet_bulb_temperature_difference_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_4_lower_limit")]
public float wet_bulb_temperature_difference_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_4_upper_limit")]
public float wet_bulb_temperature_difference_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_5_lower_limit")]
public float wet_bulb_temperature_difference_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_5_upper_limit")]
public float wet_bulb_temperature_difference_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_6_lower_limit")]
public float wet_bulb_temperature_difference_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_6_upper_limit")]
public float wet_bulb_temperature_difference_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_7_lower_limit")]
public float wet_bulb_temperature_difference_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_7_upper_limit")]
public float wet_bulb_temperature_difference_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_8_lower_limit")]
public float wet_bulb_temperature_difference_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_8_upper_limit")]
public float wet_bulb_temperature_difference_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_9_lower_limit")]
public float wet_bulb_temperature_difference_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_9_upper_limit")]
public float wet_bulb_temperature_difference_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_10_lower_limit")]
public float wet_bulb_temperature_difference_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wet_bulb_temperature_difference_range_10_upper_limit")]
public float wet_bulb_temperature_difference_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperation:OutdoorDewpointDifference")]
    [Description(@"Plant equipment operation scheme for outdoor dewpoint temperature difference operation. Specifies one or more groups of equipment which are available to operate for successive ranges based the difference between a reference node temperature and the outdoor dewpoint temperature.")]
    public class PlantEquipmentOperation_OutdoorDewpointDifference
    {
        

[JsonProperty("reference_temperature_node_name")]
public string reference_temperature_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_1_lower_limit")]
public float dewpoint_temperature_difference_range_1_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_1_upper_limit")]
public float dewpoint_temperature_difference_range_1_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_1_equipment_list_name")]
public string range_1_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_2_lower_limit")]
public float dewpoint_temperature_difference_range_2_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_2_upper_limit")]
public float dewpoint_temperature_difference_range_2_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_2_equipment_list_name")]
public string range_2_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_3_lower_limit")]
public float dewpoint_temperature_difference_range_3_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_3_upper_limit")]
public float dewpoint_temperature_difference_range_3_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_3_equipment_list_name")]
public string range_3_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_4_lower_limit")]
public float dewpoint_temperature_difference_range_4_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_4_upper_limit")]
public float dewpoint_temperature_difference_range_4_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_4_equipment_list_name")]
public string range_4_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_5_lower_limit")]
public float dewpoint_temperature_difference_range_5_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_5_upper_limit")]
public float dewpoint_temperature_difference_range_5_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_5_equipment_list_name")]
public string range_5_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_6_lower_limit")]
public float dewpoint_temperature_difference_range_6_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_6_upper_limit")]
public float dewpoint_temperature_difference_range_6_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_6_equipment_list_name")]
public string range_6_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_7_lower_limit")]
public float dewpoint_temperature_difference_range_7_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_7_upper_limit")]
public float dewpoint_temperature_difference_range_7_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_7_equipment_list_name")]
public string range_7_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_8_lower_limit")]
public float dewpoint_temperature_difference_range_8_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_8_upper_limit")]
public float dewpoint_temperature_difference_range_8_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_8_equipment_list_name")]
public string range_8_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_9_lower_limit")]
public float dewpoint_temperature_difference_range_9_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_9_upper_limit")]
public float dewpoint_temperature_difference_range_9_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_9_equipment_list_name")]
public string range_9_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_10_lower_limit")]
public float dewpoint_temperature_difference_range_10_lower_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_difference_range_10_upper_limit")]
public float dewpoint_temperature_difference_range_10_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("range_10_equipment_list_name")]
public string range_10_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PlantEquipmentOperationSchemes")]
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only plant equipment should be listed on a Control Scheme for this item.")]
    public class PlantEquipmentOperationSchemes
    {
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:ComponentSetpoint;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:ThermalEnergyStorage;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        

[JsonProperty("control_scheme_1_object_type")]
public ControlschemeobjecttypeType control_scheme_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_1_name")]
public string control_scheme_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_1_schedule_name")]
public string control_scheme_1_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_object_type")]
public ControlschemeobjecttypeType control_scheme_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_name")]
public string control_scheme_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_schedule_name")]
public string control_scheme_2_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_object_type")]
public ControlschemeobjecttypeType control_scheme_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_name")]
public string control_scheme_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_schedule_name")]
public string control_scheme_3_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_object_type")]
public ControlschemeobjecttypeType control_scheme_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_name")]
public string control_scheme_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_schedule_name")]
public string control_scheme_4_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_object_type")]
public ControlschemeobjecttypeType control_scheme_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_name")]
public string control_scheme_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_schedule_name")]
public string control_scheme_5_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_object_type")]
public ControlschemeobjecttypeType control_scheme_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_name")]
public string control_scheme_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_schedule_name")]
public string control_scheme_6_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_object_type")]
public ControlschemeobjecttypeType control_scheme_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_name")]
public string control_scheme_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_schedule_name")]
public string control_scheme_7_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_object_type")]
public ControlschemeobjecttypeType control_scheme_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_name")]
public string control_scheme_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_schedule_name")]
public string control_scheme_8_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
    }
    
    [JsonProperty("CondenserEquipmentOperationSchemes")]
    [Description(@"Operation schemes are listed in ""priority"" order. Note that each scheme must address the entire load and/or condition ranges for the simulation. The actual one selected for use will be the first that is ""Scheduled"" on. That is, if control scheme 1 is not ""on"" and control scheme 2 is -- then control scheme 2 is selected. Only condenser equipment should be listed on a Control Scheme for this item.")]
    public class CondenserEquipmentOperationSchemes
    {
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        
        private void PlantEquipmentOperation:CoolingLoad;
        
        private void PlantEquipmentOperation:HeatingLoad;
        
        private void PlantEquipmentOperation:OutdoorDewpoint;
        
        private void PlantEquipmentOperation:OutdoorDewpointDifference;
        
        private void PlantEquipmentOperation:OutdoorDryBulb;
        
        private void PlantEquipmentOperation:OutdoorDryBulbDifference;
        
        private void PlantEquipmentOperation:OutdoorRelativeHumidity;
        
        private void PlantEquipmentOperation:OutdoorWetBulb;
        
        private void PlantEquipmentOperation:OutdoorWetBulbDifference;
        
        private void PlantEquipmentOperation:Uncontrolled;
        
        private void PlantEquipmentOperation:UserDefined;
        

[JsonProperty("control_scheme_1_object_type")]
public ControlschemeobjecttypeType control_scheme_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_1_name")]
public string control_scheme_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_1_schedule_name")]
public string control_scheme_1_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_object_type")]
public ControlschemeobjecttypeType control_scheme_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_name")]
public string control_scheme_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_2_schedule_name")]
public string control_scheme_2_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_object_type")]
public ControlschemeobjecttypeType control_scheme_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_name")]
public string control_scheme_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_3_schedule_name")]
public string control_scheme_3_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_object_type")]
public ControlschemeobjecttypeType control_scheme_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_name")]
public string control_scheme_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_4_schedule_name")]
public string control_scheme_4_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_object_type")]
public ControlschemeobjecttypeType control_scheme_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_name")]
public string control_scheme_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_5_schedule_name")]
public string control_scheme_5_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_object_type")]
public ControlschemeobjecttypeType control_scheme_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_name")]
public string control_scheme_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_6_schedule_name")]
public string control_scheme_6_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_object_type")]
public ControlschemeobjecttypeType control_scheme_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_name")]
public string control_scheme_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_7_schedule_name")]
public string control_scheme_7_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_object_type")]
public ControlschemeobjecttypeType control_scheme_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_name")]
public string control_scheme_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_scheme_8_schedule_name")]
public string control_scheme_8_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
        
        public enum ControlschemeobjecttypeType
        {
        }
    }
}
namespace EnergyPlus.PlantCondenserFlowControl
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("TemperingValve")]
    [Description("Temperature-controlled diversion valve used to divert flow around one or more pla" +
        "nt components such as a hot water heater. It can only be used on one of two bran" +
        "ches between a Splitter and a Mixer.")]
    public class TemperingValve
    {
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stream_2_source_node_name")]
public string stream_2_source_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_node_name")]
public string temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_outlet_node_name")]
public string pump_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.PlantCondenserLoops
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("PlantLoop")]
    [Description("Defines a central plant loop.")]
    public class PlantLoop
    {
        
        private void Steam;
        
        private void UserDefinedFluidType;
        
        private void Water;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        
        private void DualSetpointDeadband;
        
        private void SingleSetpoint;
        
        private void CommonPipe;
        
        private void None;
        
        private void TwoWayCommonPipe;
        
        private void LoopFlowCorrection;
        
        private void None;
        
        private void PumpPowerCorrection;
        

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtypeType)Water;

[JsonProperty("user_defined_fluid_type")]
public string user_defined_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_equipment_operation_scheme_name")]
public string plant_equipment_operation_scheme_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loop_temperature_setpoint_node_name")]
public string loop_temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_loop_temperature")]
public float maximum_loop_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_loop_temperature")]
public float minimum_loop_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_loop_flow_rate")]
public string maximum_loop_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_loop_flow_rate")]
public float minimum_loop_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("plant_loop_volume")]
public string plant_loop_volume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("plant_side_inlet_node_name")]
public string plant_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_side_outlet_node_name")]
public string plant_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_side_branch_list_name")]
public string plant_side_branch_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_side_connector_list_name")]
public string plant_side_connector_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_inlet_node_name")]
public string demand_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_outlet_node_name")]
public string demand_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_branch_list_name")]
public string demand_side_branch_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_connector_list_name")]
public string demand_side_connector_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_distribution_scheme")]
public LoaddistributionschemeType load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (LoaddistributionschemeType)SequentialLoad;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_loop_demand_calculation_scheme")]
public PlantloopdemandcalculationschemeType plant_loop_demand_calculation_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (PlantloopdemandcalculationschemeType)SingleSetpoint;

[JsonProperty("common_pipe_simulation")]
public CommonpipesimulationType common_pipe_simulation
{
    get
    {
    }
    set
    {
    }
}
 = (CommonpipesimulationType)None;

[JsonProperty("pressure_simulation_type")]
public PressuresimulationtypeType pressure_simulation_type
{
    get
    {
    }
    set
    {
    }
}
 = (PressuresimulationtypeType)None;

[JsonProperty("loop_circulation_time")]
public float loop_circulation_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
        
        public enum FluidtypeType
        {
        }
        
        public enum LoaddistributionschemeType
        {
        }
        
        public enum PlantloopdemandcalculationschemeType
        {
        }
        
        [Description(@"Specifies a primary-secondary loop configuration. The plant side is the primary loop, and the demand side is the secondary loop. A secondary supply pump is required on the demand side. None = Primary-only, no secondary simulation CommonPipe = Primary-secondary with no temperature control at primary-secondary interface TwoWayCommonPipe = Primary-secondary with control of secondary supply temperature or primary return temperature (requires a setpoint be placed on the plant side or demand side inlet node).")]
        public enum CommonpipesimulationType
        {
        }
        
        public enum PressuresimulationtypeType
        {
        }
    }
    
    [JsonProperty("CondenserLoop")]
    [Description("Defines a central plant condenser loop. CondenserLoop and PlantLoop are nearly id" +
        "entical except some components and operation schemes are applicable to only one " +
        "loop type or the other.")]
    public class CondenserLoop
    {
        
        private void UserDefinedFluidType;
        
        private void Water;
        
        private void Optimal;
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        
        private void LoopFlowCorrection;
        
        private void None;
        
        private void PumpPowerCorrection;
        

[JsonProperty("fluid_type")]
public FluidtypeType fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtypeType)Water;

[JsonProperty("user_defined_fluid_type")]
public string user_defined_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_equipment_operation_scheme_name")]
public string condenser_equipment_operation_scheme_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_loop_temperature_setpoint_node_name")]
public string condenser_loop_temperature_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_loop_temperature")]
public float maximum_loop_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_loop_temperature")]
public float minimum_loop_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_loop_flow_rate")]
public string maximum_loop_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_loop_flow_rate")]
public float minimum_loop_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condenser_loop_volume")]
public string condenser_loop_volume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("condenser_side_inlet_node_name")]
public string condenser_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_side_outlet_node_name")]
public string condenser_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_side_branch_list_name")]
public string condenser_side_branch_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_side_connector_list_name")]
public string condenser_side_connector_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_inlet_node_name")]
public string demand_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_side_outlet_node_name")]
public string demand_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_demand_side_branch_list_name")]
public string condenser_demand_side_branch_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_demand_side_connector_list_name")]
public string condenser_demand_side_connector_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("load_distribution_scheme")]
public LoaddistributionschemeType load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (LoaddistributionschemeType)SequentialLoad;

[JsonProperty("pressure_simulation_type")]
public PressuresimulationtypeType pressure_simulation_type
{
    get
    {
    }
    set
    {
    }
}
 = (PressuresimulationtypeType)None;

[JsonProperty("loop_circulation_time")]
public float loop_circulation_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
        
        public enum FluidtypeType
        {
        }
        
        public enum LoaddistributionschemeType
        {
        }
        
        public enum PressuresimulationtypeType
        {
        }
    }
}
namespace EnergyPlus.Pumps
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Pump:VariableSpeed")]
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    public class Pump_VariableSpeed
    {
        
        private void Continuous;
        
        private void Intermittent;
        
        private void ManualControl;
        
        private void PressureSetpointControl;
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_maximum_flow_rate")]
public string design_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_pump_head")]
public float design_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("design_power_consumption")]
public string design_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public float coefficient_1_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public float coefficient_2_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public float coefficient_3_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public float coefficient_4_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_minimum_flow_rate")]
public string design_minimum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Continuous;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_curve_name")]
public string pump_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("impeller_diameter")]
public float impeller_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vfd_control_type")]
public VfdcontroltypeType vfd_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_rpm_schedule_name")]
public string pump_rpm_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_pressure_schedule")]
public string minimum_pressure_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_pressure_schedule")]
public string maximum_pressure_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_rpm_schedule")]
public string minimum_rpm_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_rpm_schedule")]
public string maximum_rpm_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("design_electric_power_per_unit_flow_rate")]
public float design_electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)348701.1;

[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public float design_shaft_power_per_unit_flow_rate_per_unit_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.282051282;

[JsonProperty("design_minimum_flow_rate_fraction")]
public float design_minimum_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum PumpcontroltypeType
        {
        }
        
        public enum VfdcontroltypeType
        {
        }
        
        [Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
        public enum DesignpowersizingmethodType
        {
        }
    }
    
    [JsonProperty("Pump:ConstantSpeed")]
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit.")]
    public class Pump_ConstantSpeed
    {
        
        private void Continuous;
        
        private void Intermittent;
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public string design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_pump_head")]
public float design_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("design_power_consumption")]
public string design_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Continuous;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_curve_name")]
public string pump_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("impeller_diameter")]
public float impeller_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rotational_speed")]
public float rotational_speed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("design_electric_power_per_unit_flow_rate")]
public float design_electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)348701.1;

[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public float design_shaft_power_per_unit_flow_rate_per_unit_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.282051282;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum PumpcontroltypeType
        {
        }
        
        [Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
        public enum DesignpowersizingmethodType
        {
        }
    }
    
    [JsonProperty("Pump:VariableSpeed:Condensate")]
    [Description("This pump model is described in the ASHRAE secondary HVAC toolkit. Variable Speed" +
        " Condensate pump for Steam Systems")]
    public class Pump_VariableSpeed_Condensate
    {
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_steam_volume_flow_rate")]
public string design_steam_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_pump_head")]
public float design_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("design_power_consumption")]
public string design_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public float coefficient_1_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public float coefficient_2_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public float coefficient_3_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public float coefficient_4_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("design_electric_power_per_unit_flow_rate")]
public float design_electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)348701.1;

[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public float design_shaft_power_per_unit_flow_rate_per_unit_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.282051282;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
        public enum DesignpowersizingmethodType
        {
        }
    }
    
    [JsonProperty("HeaderedPumps:ConstantSpeed")]
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    public class HeaderedPumps_ConstantSpeed
    {
        
        private void Sequential;
        
        private void Continuous;
        
        private void Intermittent;
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_design_flow_rate")]
public string total_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_pumps_in_bank")]
public float number_of_pumps_in_bank
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_sequencing_control_scheme")]
public FlowsequencingcontrolschemeType flow_sequencing_control_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (FlowsequencingcontrolschemeType)Sequential;

[JsonProperty("design_pump_head")]
public float design_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("design_power_consumption")]
public string design_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Continuous;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("design_electric_power_per_unit_flow_rate")]
public float design_electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)348701.1;

[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public float design_shaft_power_per_unit_flow_rate_per_unit_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.282051282;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FlowsequencingcontrolschemeType
        {
        }
        
        public enum PumpcontroltypeType
        {
        }
        
        [Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
        public enum DesignpowersizingmethodType
        {
        }
    }
    
    [JsonProperty("HeaderedPumps:VariableSpeed")]
    [Description("This Headered pump object describes a pump bank with more than 1 pump in parallel" +
        "")]
    public class HeaderedPumps_VariableSpeed
    {
        
        private void Sequential;
        
        private void Continuous;
        
        private void Intermittent;
        
        private void PowerPerFlow;
        
        private void PowerPerFlowPerPressure;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_design_flow_rate")]
public string total_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_pumps_in_bank")]
public float number_of_pumps_in_bank
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_sequencing_control_scheme")]
public FlowsequencingcontrolschemeType flow_sequencing_control_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (FlowsequencingcontrolschemeType)Sequential;

[JsonProperty("design_pump_head")]
public float design_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("design_power_consumption")]
public string design_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_1_of_the_part_load_performance_curve")]
public float coefficient_1_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_2_of_the_part_load_performance_curve")]
public float coefficient_2_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("coefficient_3_of_the_part_load_performance_curve")]
public float coefficient_3_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("coefficient_4_of_the_part_load_performance_curve")]
public float coefficient_4_of_the_part_load_performance_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_flow_rate_fraction")]
public float minimum_flow_rate_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("pump_control_type")]
public PumpcontroltypeType pump_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpcontroltypeType)Continuous;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_radiative_fraction")]
public float skin_loss_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_power_sizing_method")]
public DesignpowersizingmethodType design_power_sizing_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignpowersizingmethodType)PowerPerFlowPerPressure;

[JsonProperty("design_electric_power_per_unit_flow_rate")]
public float design_electric_power_per_unit_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)348701.1;

[JsonProperty("design_shaft_power_per_unit_flow_rate_per_unit_head")]
public float design_shaft_power_per_unit_flow_rate_per_unit_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.282051282;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum FlowsequencingcontrolschemeType
        {
        }
        
        public enum PumpcontroltypeType
        {
        }
        
        [Description(@"Used to indicate which sizing factor is used to calculate Design Power Consumption. PowerPerFlow indicates that Design Electric Power per Unit Flow Rate is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * scaling factor PowerPerFlowPerPressure indicates that Design Shaft Power per Unit Flow Rate per Unit Head is used as scaling factor. Design Power Consumption = Design Maximum Flow Rate * Design Pump Head * scaling factor / Motor Efficiency")]
        public enum DesignpowersizingmethodType
        {
        }
    }
}
namespace EnergyPlus.PythonPluginSystem
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("PythonPlugin:SearchPaths")]
    [Description(@"Add directories to the search path for Python plugin modules The directory containing the EnergyPlus executable file is automatically added so that the Python interpreter can find the packaged up pyenergyplus Python package. By default, the current working directory and input file directory are also added to the search path. However, this object allows modifying this behavior. With this object, searching these directories can be disabled, and users can add supplemental search paths that point to libraries of plugin scripts.")]
    public class PythonPlugin_SearchPaths
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("add_current_working_directory_to_search_path")]
public AddcurrentworkingdirectorytosearchpathType add_current_working_directory_to_search_path
{
    get
    {
    }
    set
    {
    }
}
 = (AddcurrentworkingdirectorytosearchpathType)Yes;

[JsonProperty("add_input_file_directory_to_search_path")]
public AddinputfiledirectorytosearchpathType add_input_file_directory_to_search_path
{
    get
    {
    }
    set
    {
    }
}
 = (AddinputfiledirectorytosearchpathType)Yes;

[JsonProperty("py_search_paths")]
public string py_search_paths
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Adding the current working directory allows Python to find plugin scripts in the " +
            "current directory.")]
        public enum AddcurrentworkingdirectorytosearchpathType
        {
        }
        
        [Description("Enabling this will allow Python to find plugin scripts in the same directory as t" +
            "he running input file, even if that is not the current working directory.")]
        public enum AddinputfiledirectorytosearchpathType
        {
        }
    }
    
    [JsonProperty("PythonPlugin:Instance")]
    [Description("A single plugin to be executed during the simulation, which can contain multiple " +
        "calling points for the same class instance by overriding multiple calling point " +
        "methods.")]
    public class PythonPlugin_Instance
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("run_during_warmup_days")]
public RunduringwarmupdaysType run_during_warmup_days
{
    get
    {
    }
    set
    {
    }
}
 = (RunduringwarmupdaysType)No;

[JsonProperty("python_module_name")]
public string python_module_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plugin_class_name")]
public string plugin_class_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If this field is enabled, the plugin will be executed during warmup days, otherwi" +
            "se it will only be executed once warmup is completed and the actual run period b" +
            "egins")]
        public enum RunduringwarmupdaysType
        {
        }
    }
    
    [JsonProperty("PythonPlugin:Variables")]
    [Description("This object defines name identifiers for custom Python Plugin variable data that " +
        "should be shared among all running Python Plugins.")]
    public class PythonPlugin_Variables
    {
        

[JsonProperty("global_py_vars")]
public string global_py_vars
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PythonPlugin:TrendVariable")]
    [Description("This object sets up a Python plugin trend variable from an Python plugin variable" +
        " A trend variable logs values across timesteps")]
    public class PythonPlugin_TrendVariable
    {
        

[JsonProperty("name_of_a_python_plugin_variable")]
public string name_of_a_python_plugin_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_timesteps_to_be_logged")]
public float number_of_timesteps_to_be_logged
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("PythonPlugin:OutputVariable")]
    [Description("This object sets up an EnergyPlus output variable from a Python Plugin variable")]
    public class PythonPlugin_OutputVariable
    {
        
        private void Averaged;
        
        private void Metered;
        
        private void Summed;
        
        private void SystemTimestep;
        
        private void ZoneTimestep;
        
        private void Coal;
        
        private void CondensateWaterCollected;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void ElectricityProducedOnSite;
        
        private void EnergyTransfer;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void MainsWaterSupply;
        
        private void NaturalGas;
        
        private void OnSiteWaterProduced;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void RainWaterCollected;
        
        private void SolarAirHeating;
        
        private void SolarWaterHeating;
        
        private void Steam;
        
        private void WaterUse;
        
        private void WellWaterDrawn;
        
        private void Building;
        
        private void HVAC;
        
        private void Plant;
        
        private void System;
        
        private void Baseboard;
        
        private void Boilers;
        
        private void Chillers;
        
        private void Cooling;
        
        private void CoolingCoils;
        
        private void ExteriorEquipment;
        
        private void ExteriorLights;
        
        private void Fans;
        
        private void HeatRecovery;
        
        private void HeatRecoveryForCooling;
        
        private void HeatRecoveryForHeating;
        
        private void HeatRejection;
        
        private void Heating;
        
        private void HeatingCoils;
        
        private void Humidifier;
        
        private void InteriorEquipment;
        
        private void InteriorLights;
        
        private void OnSiteGeneration;
        
        private void Pumps;
        
        private void Refrigeration;
        
        private void WaterSystems;
        

[JsonProperty("python_plugin_variable_name")]
public string python_plugin_variable_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_data_in_variable")]
public TypeofdatainvariableType type_of_data_in_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("update_frequency")]
public UpdatefrequencyType update_frequency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("units")]
public string units
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("resource_type")]
public ResourcetypeType resource_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("group_type")]
public GrouptypeType group_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_category")]
public EndusecategoryType end_use_category
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If Metered is selected, the variable is automatically set to a \"Summed\" type, and" +
            " the Resource Type, Group Type, and End-Use Subcategory fields on this object ar" +
            "e required")]
        public enum TypeofdatainvariableType
        {
        }
        
        public enum UpdatefrequencyType
        {
        }
        
        [Description(@"This field is optional for regular output variables with ""Type of Data in Variable"" set to either Averaged or Summed. For Metered variables, this field is required. Choose the type of fuel, water, electricity, pollution or heat rate that should be metered.")]
        public enum ResourcetypeType
        {
        }
        
        [Description(@"This field is optional for regular output variables with ""Type of Data in Variable"" set to either Averaged or Summed. For Metered variables, this field is required. Choose a general classification, building (internal services), HVAC (air systems), or plant (hydronic systems), or system")]
        public enum GrouptypeType
        {
        }
        
        [Description("This field is optional for regular output variables with \"Type of Data in Variabl" +
            "e\" set to either Averaged or Summed. For Metered variables, this field is requir" +
            "ed. Choose how the metered output should be classified for end-use category")]
        public enum EndusecategoryType
        {
        }
    }
}
namespace EnergyPlus.Refrigeration
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Refrigeration:Case")]
    [Description(@"The Refrigeration Case object works in conjunction with a compressor rack, a refrigeration system, or a secondary loop to simulate the performance of a refrigerated case system. The object calculates the energy use for lights, fans and anti-sweat heaters and accounts for the sensible and latent heat exchange with the surrounding environment (termed ""case credits"") which impacts the temperature and humidity in the zone where the case is located.")]
    public class Refrigeration_Case
    {
        
        private void CaseTemperatureMethod;
        
        private void DewpointMethod;
        
        private void RelativeHumidityMethod;
        
        private void Constant;
        
        private void DewpointMethod;
        
        private void HeatBalanceMethod;
        
        private void Linear;
        
        private void None;
        
        private void Electric;
        
        private void ElectricWithTemperatureTermination;
        
        private void HotFluid;
        
        private void HotFluidWithTemperatureTermination;
        
        private void HotGas;
        
        private void HotGasWithTemperatureTermination;
        
        private void None;
        
        private void OffCycle;
        
        private void CaseTemperatureMethod;
        
        private void DewpointMethod;
        
        private void None;
        
        private void RelativeHumidityMethod;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_ambient_temperature")]
public float rated_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)23.9;

[JsonProperty("rated_ambient_relative_humidity")]
public float rated_ambient_relative_humidity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)55;

[JsonProperty("rated_total_cooling_capacity_per_unit_length")]
public float rated_total_cooling_capacity_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1900;

[JsonProperty("rated_latent_heat_ratio")]
public float rated_latent_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("rated_runtime_fraction")]
public float rated_runtime_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("case_length")]
public float case_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("case_operating_temperature")]
public float case_operating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("latent_case_credit_curve_type")]
public LatentcasecreditcurvetypeType latent_case_credit_curve_type
{
    get
    {
    }
    set
    {
    }
}
 = (LatentcasecreditcurvetypeType)CaseTemperatureMethod;

[JsonProperty("latent_case_credit_curve_name")]
public string latent_case_credit_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("standard_case_fan_power_per_unit_length")]
public float standard_case_fan_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("operating_case_fan_power_per_unit_length")]
public float operating_case_fan_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)75;

[JsonProperty("standard_case_lighting_power_per_unit_length")]
public float standard_case_lighting_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("installed_case_lighting_power_per_unit_length")]
public float installed_case_lighting_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("case_lighting_schedule_name")]
public string case_lighting_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_lighting_energy_to_case")]
public float fraction_of_lighting_energy_to_case
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("case_anti_sweat_heater_power_per_unit_length")]
public float case_anti_sweat_heater_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_anti_sweat_heater_power_per_unit_length")]
public float minimum_anti_sweat_heater_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("anti_sweat_heater_control_type")]
public AntisweatheatercontroltypeType anti_sweat_heater_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (AntisweatheatercontroltypeType)None;

[JsonProperty("humidity_at_zero_anti_sweat_heater_energy")]
public float humidity_at_zero_anti_sweat_heater_energy
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-10;

[JsonProperty("case_height")]
public float case_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("fraction_of_anti_sweat_heater_energy_to_case")]
public float fraction_of_anti_sweat_heater_energy_to_case
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("case_defrost_power_per_unit_length")]
public float case_defrost_power_per_unit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("case_defrost_type")]
public CasedefrosttypeType case_defrost_type
{
    get
    {
    }
    set
    {
    }
}
 = (CasedefrosttypeType)OffCycle;

[JsonProperty("case_defrost_schedule_name")]
public string case_defrost_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("case_defrost_drip_down_schedule_name")]
public string case_defrost_drip_down_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_energy_correction_curve_type")]
public DefrostenergycorrectioncurvetypeType defrost_energy_correction_curve_type
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostenergycorrectioncurvetypeType)None;

[JsonProperty("defrost_energy_correction_curve_name")]
public string defrost_energy_correction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("under_case_hvac_return_air_fraction")]
public float under_case_hvac_return_air_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("refrigerated_case_restocking_schedule_name")]
public string refrigerated_case_restocking_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("case_credit_fraction_schedule_name")]
public string case_credit_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_evaporator_temperature_or_brine_inlet_temperature")]
public float design_evaporator_temperature_or_brine_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_refrigerant_charge_inventory")]
public float average_refrigerant_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("under_case_hvac_return_air_node_name")]
public string under_case_hvac_return_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LatentcasecreditcurvetypeType
        {
        }
        
        public enum AntisweatheatercontroltypeType
        {
        }
        
        public enum CasedefrosttypeType
        {
        }
        
        [Description("Case Temperature, Relative Humidity, and Dewpoint Method are applicable to case d" +
            "efrost types with temperature termination only.")]
        public enum DefrostenergycorrectioncurvetypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:CompressorRack")]
    [Description(@"Works in conjunction with the refrigeration case and walk-in objects to simulate the performance of a refrigerated case system. This object models the electric consumption of the rack compressors and the condenser fans. Heat can be rejected either outdoors or to a zone. Compressor rack waste heat can also be reclaimed for use by an optional air- or water-heating coil (Coil:Heating:Desuperheater and Coil:WaterHeating:Desuperheater).")]
    public class Refrigeration_CompressorRack
    {
        
        private void Outdoors;
        
        private void Zone;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void ConstantFlow;
        
        private void VariableFlow;
        

[JsonProperty("heat_rejection_location")]
public HeatrejectionlocationType heat_rejection_location
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrejectionlocationType)Outdoors;

[JsonProperty("design_compressor_rack_cop")]
public float design_compressor_rack_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("compressor_rack_cop_function_of_temperature_curve_name")]
public string compressor_rack_cop_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_condenser_fan_power")]
public float design_condenser_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)250;

[JsonProperty("condenser_fan_power_function_of_temperature_curve_name")]
public string condenser_fan_power_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("water_cooled_condenser_inlet_node_name")]
public string water_cooled_condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_condenser_outlet_node_name")]
public string water_cooled_condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_loop_flow_type")]
public WatercooledloopflowtypeType water_cooled_loop_flow_type
{
    get
    {
    }
    set
    {
    }
}
 = (WatercooledloopflowtypeType)VariableFlow;

[JsonProperty("water_cooled_condenser_outlet_temperature_schedule_name")]
public string water_cooled_condenser_outlet_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_condenser_design_flow_rate")]
public float water_cooled_condenser_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_condenser_maximum_flow_rate")]
public float water_cooled_condenser_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_condenser_maximum_water_outlet_temperature")]
public float water_cooled_condenser_maximum_water_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)55;

[JsonProperty("water_cooled_condenser_minimum_water_inlet_temperature")]
public float water_cooled_condenser_minimum_water_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("evaporative_condenser_availability_schedule_name")]
public string evaporative_condenser_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("evaporative_condenser_air_flow_rate")]
public string evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)200;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("design_evaporative_condenser_water_pump_power")]
public string design_evaporative_condenser_water_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1000;

[JsonProperty("evaporative_water_supply_tank_name")]
public string evaporative_water_supply_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_air_inlet_node_name")]
public string condenser_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name")]
public string refrigeration_case_name_or_walkin_name_or_caseandwalkinlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_rejection_zone_name")]
public string heat_rejection_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatrejectionlocationType
        {
        }
        
        [Description("Applicable only when Heat Rejection Location is Outdoors.")]
        public enum CondensertypeType
        {
        }
        
        [Description("Applicable only when Condenser Type is WaterCooled.")]
        public enum WatercooledloopflowtypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:CaseAndWalkInList")]
    [Description(@"Provides a list of all the refrigerated cases, walk in coolers, or air chillers cooled by a single refrigeration system. Note that the names of all cases, walk-ins ,air chillers, and CaseAndWalkInLists must be unique. That is, you cannot give a list the same name as one of list items. This list may contain a combination of case and walk-in names OR a list of air chiller names. Air chillers may not be included in any list that also includes cases or walk-ins.")]
    public class Refrigeration_CaseAndWalkInList
    {
        

[JsonProperty("cases_and_walkins")]
public string cases_and_walkins
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Refrigeration:Condenser:AirCooled")]
    [Description("Air cooled condenser for a refrigeration system (Refrigeration:System).")]
    public class Refrigeration_Condenser_AirCooled
    {
        
        private void Fixed;
        
        private void FixedLinear;
        
        private void TwoSpeed;
        
        private void VariableSpeed;
        

[JsonProperty("rated_effective_total_heat_rejection_rate_curve_name")]
public string rated_effective_total_heat_rejection_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_subcooling_temperature_difference")]
public float rated_subcooling_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condenser_fan_speed_control_type")]
public CondenserfanspeedcontroltypeType condenser_fan_speed_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondenserfanspeedcontroltypeType)Fixed;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)250;

[JsonProperty("minimum_fan_air_flow_ratio")]
public float minimum_fan_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("air_inlet_node_name_or_zone_name")]
public string air_inlet_node_name_or_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public float condenser_refrigerant_operating_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensate_receiver_refrigerant_inventory")]
public float condensate_receiver_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensate_piping_refrigerant_inventory")]
public float condensate_piping_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum CondenserfanspeedcontroltypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:Condenser:EvaporativeCooled")]
    [Description("Evaporative-cooled condenser for a refrigeration system (Refrigeration:System).")]
    public class Refrigeration_Condenser_EvaporativeCooled
    {
        
        private void Fixed;
        
        private void FixedLinear;
        
        private void TwoSpeed;
        
        private void VariableSpeed;
        

[JsonProperty("rated_effective_total_heat_rejection_rate")]
public float rated_effective_total_heat_rejection_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_subcooling_temperature_difference")]
public float rated_subcooling_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fan_speed_control_type")]
public FanspeedcontroltypeType fan_speed_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (FanspeedcontroltypeType)Fixed;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_fan_air_flow_ratio")]
public float minimum_fan_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("approach_temperature_constant_term")]
public float approach_temperature_constant_term
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6.63;

[JsonProperty("approach_temperature_coefficient_2")]
public float approach_temperature_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.468;

[JsonProperty("approach_temperature_coefficient_3")]
public float approach_temperature_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)17.93;

[JsonProperty("approach_temperature_coefficient_4")]
public float approach_temperature_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-0.322;

[JsonProperty("minimum_capacity_factor")]
public float minimum_capacity_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("maximum_capacity_factor")]
public float maximum_capacity_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public string rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)200;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("rated_water_pump_power")]
public string rated_water_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1000;

[JsonProperty("evaporative_water_supply_tank_name")]
public string evaporative_water_supply_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_availability_schedule_name")]
public string evaporative_condenser_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public float condenser_refrigerant_operating_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensate_receiver_refrigerant_inventory")]
public float condensate_receiver_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensate_piping_refrigerant_inventory")]
public float condensate_piping_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum FanspeedcontroltypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:Condenser:WaterCooled")]
    [Description("Water cooled condenser for a refrigeration system (Refrigeration:System).")]
    public class Refrigeration_Condenser_WaterCooled
    {
        
        private void ConstantFlow;
        
        private void VariableFlow;
        

[JsonProperty("rated_effective_total_heat_rejection_rate")]
public float rated_effective_total_heat_rejection_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_condensing_temperature")]
public float rated_condensing_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_subcooling_temperature_difference")]
public float rated_subcooling_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("rated_water_inlet_temperature")]
public float rated_water_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_cooled_loop_flow_type")]
public WatercooledloopflowtypeType water_cooled_loop_flow_type
{
    get
    {
    }
    set
    {
    }
}
 = (WatercooledloopflowtypeType)VariableFlow;

[JsonProperty("water_outlet_temperature_schedule_name")]
public string water_outlet_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_design_flow_rate")]
public float water_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_maximum_flow_rate")]
public float water_maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_maximum_water_outlet_temperature")]
public float water_maximum_water_outlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)55;

[JsonProperty("water_minimum_water_inlet_temperature")]
public float water_minimum_water_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public float condenser_refrigerant_operating_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_receiver_refrigerant_inventory")]
public float condensate_receiver_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_piping_refrigerant_inventory")]
public float condensate_piping_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum WatercooledloopflowtypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:Condenser:Cascade")]
    [Description(@"Cascade condenser for a refrigeration system (Refrigeration:System). The cascade condenser is unlike the other condenser options because it rejects heat to another, higher-temperature, refrigeration system. That is, the cascade condenser acts as a heat rejection object for one system, but acts as a refrigeration load for another system.")]
    public class Refrigeration_Condenser_Cascade
    {
        
        private void Fixed;
        
        private void Float;
        

[JsonProperty("rated_condensing_temperature")]
public float rated_condensing_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_approach_temperature_difference")]
public float rated_approach_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("rated_effective_total_heat_rejection_rate")]
public float rated_effective_total_heat_rejection_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensing_temperature_control_type")]
public CondensingtemperaturecontroltypeType condensing_temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensingtemperaturecontroltypeType)Fixed;

[JsonProperty("condenser_refrigerant_operating_charge_inventory")]
public float condenser_refrigerant_operating_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_receiver_refrigerant_inventory")]
public float condensate_receiver_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensate_piping_refrigerant_inventory")]
public float condensate_piping_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Fixed keeps condensing temperature constant Float sets the condensing temperature" +
            " according to the other loads on the higher temperature system")]
        public enum CondensingtemperaturecontroltypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:GasCooler:AirCooled")]
    [Description("The transcritical refrigeration system requires a single gas cooler to reject the" +
        " system heat.")]
    public class Refrigeration_GasCooler_AirCooled
    {
        
        private void Fixed;
        
        private void FixedLinear;
        
        private void TwoSpeed;
        
        private void VariableSpeed;
        

[JsonProperty("rated_total_heat_rejection_rate_curve_name")]
public string rated_total_heat_rejection_rate_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_cooler_fan_speed_control_type")]
public GascoolerfanspeedcontroltypeType gas_cooler_fan_speed_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (GascoolerfanspeedcontroltypeType)Fixed;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5000;

[JsonProperty("minimum_fan_air_flow_ratio")]
public float minimum_fan_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("transition_temperature")]
public float transition_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)27;

[JsonProperty("transcritical_approach_temperature")]
public float transcritical_approach_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("subcritical_temperature_difference")]
public float subcritical_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("minimum_condensing_temperature")]
public float minimum_condensing_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("gas_cooler_refrigerant_operating_charge_inventory")]
public float gas_cooler_refrigerant_operating_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("gas_cooler_receiver_refrigerant_inventory")]
public float gas_cooler_receiver_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("gas_cooler_outlet_piping_refrigerant_inventory")]
public float gas_cooler_outlet_piping_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum GascoolerfanspeedcontroltypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:TransferLoadList")]
    [Description(@"A refrigeration system may provide cooling to other, secondary, systems through either a secondary loop or a cascade condenser. If multiple transfer loads are served by a single primary system, use this list to group them together for reference by the primary system (see the field ""Refrigeration Transfer Load or TransferLoad List Name"" in the Refrigeration:System object).")]
    public class Refrigeration_TransferLoadList
    {
        

[JsonProperty("transfer_loads")]
public string transfer_loads
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Refrigeration:Subcooler")]
    [Description(@"Two types of subcoolers are modeled by the detailed refrigeration system. The liquid suction heat exchanger uses cool suction gas to subcool the hot condensate after it leaves the condenser and before it reaches the thermal expansion valve. A mechanical subcooler is used to transfer cooling capacity from one refrigeration system to another.")]
    public class Refrigeration_Subcooler
    {
        
        private void LiquidSuction;
        
        private void Mechanical;
        

[JsonProperty("subcooler_type")]
public SubcoolertypeType subcooler_type
{
    get
    {
    }
    set
    {
    }
}
 = (SubcoolertypeType)LiquidSuction;

[JsonProperty("liquid_suction_design_subcooling_temperature_difference")]
public float liquid_suction_design_subcooling_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_liquid_inlet_temperature")]
public float design_liquid_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_vapor_inlet_temperature")]
public float design_vapor_inlet_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_providing_system")]
public string capacity_providing_system
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_control_temperature")]
public float outlet_control_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("plan to add ambient subcoolers at future time")]
        public enum SubcoolertypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:Compressor")]
    [Description("Refrigeration system compressor. Data is available for many compressors in the Re" +
        "frigerationCompressor.idf dataset")]
    public class Refrigeration_Compressor
    {
        
        private void Subcritical;
        
        private void Transcritical;
        

[JsonProperty("refrigeration_compressor_power_curve_name")]
public string refrigeration_compressor_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigeration_compressor_capacity_curve_name")]
public string refrigeration_compressor_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_superheat")]
public float rated_superheat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_return_gas_temperature")]
public float rated_return_gas_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_liquid_temperature")]
public float rated_liquid_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_subcooling")]
public float rated_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("mode_of_operation")]
public ModeofoperationType mode_of_operation
{
    get
    {
    }
    set
    {
    }
}
 = (ModeofoperationType)Subcritical;

[JsonProperty("transcritical_compressor_power_curve_name")]
public string transcritical_compressor_power_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transcritical_compressor_capacity_curve_name")]
public string transcritical_compressor_capacity_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ModeofoperationType
        {
        }
    }
    
    [JsonProperty("Refrigeration:CompressorList")]
    [Description(@"List of all the compressors included within a single refrigeration system (Refrigeration:System). Each list must contain at least one compressor. The order in which the individual compressors are listed here will be the order in which the compressors are dispatched to meet the system load. IMPORTANT: List compressor names in the order in which the compressors will be loaded Data is available for many compressors in the RefrigerationCompressor.idf dataset")]
    public class Refrigeration_CompressorList
    {
        

[JsonProperty("compressors")]
public string compressors
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Refrigeration:System")]
    [Description("Simulates the performance of a supermarket refrigeration system when used along w" +
        "ith other objects to define the refrigeration load(s), the compressor(s), and th" +
        "e condenser.")]
    public class Refrigeration_System
    {
        
        private void ConstantSuctionTemperature;
        
        private void FloatSuctionTemperature;
        
        private void Flash Intercooler;
        
        private void None;
        
        private void Shell-and-Coil Intercooler;
        

[JsonProperty("refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string refrigerated_case_or_walkin_or_caseandwalkinlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigeration_transfer_load_or_transferload_list_name")]
public string refrigeration_transfer_load_or_transferload_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigeration_condenser_name")]
public string refrigeration_condenser_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_or_compressorlist_name")]
public string compressor_or_compressorlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_condensing_temperature")]
public float minimum_condensing_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigeration_system_working_fluid_type")]
public string refrigeration_system_working_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("suction_temperature_control_type")]
public SuctiontemperaturecontroltypeType suction_temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (SuctiontemperaturecontroltypeType)ConstantSuctionTemperature;

[JsonProperty("mechanical_subcooler_name")]
public string mechanical_subcooler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_suction_heat_exchanger_subcooler_name")]
public string liquid_suction_heat_exchanger_subcooler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sum_ua_suction_piping")]
public float sum_ua_suction_piping
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("suction_piping_zone_name")]
public string suction_piping_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("number_of_compressor_stages")]
public string number_of_compressor_stages
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1;

[JsonProperty("intercooler_type")]
public IntercoolertypeType intercooler_type
{
    get
    {
    }
    set
    {
    }
}
 = (IntercoolertypeType)None;

[JsonProperty("shell_and_coil_intercooler_effectiveness")]
public float shell_and_coil_intercooler_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("high_stage_compressor_or_compressorlist_name")]
public string high_stage_compressor_or_compressorlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SuctiontemperaturecontroltypeType
        {
        }
        
        public enum IntercoolertypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:TranscriticalSystem")]
    [Description("Detailed transcritical carbon dioxide (CO2) booster refrigeration systems used in" +
        " supermarkets. The object allows for modeling either a single stage system with " +
        "medium-temperature loads or a two stage system with both medium- and low-tempera" +
        "ture loads.")]
    public class Refrigeration_TranscriticalSystem
    {
        
        private void SingleStage;
        
        private void TwoStage;
        

[JsonProperty("system_type")]
public SystemtypeType system_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string medium_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string low_temperature_refrigerated_case_or_walkin_or_caseandwalkinlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigeration_gas_cooler_name")]
public string refrigeration_gas_cooler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_pressure_compressor_or_compressorlist_name")]
public string high_pressure_compressor_or_compressorlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_pressure_compressor_or_compressorlist_name")]
public string low_pressure_compressor_or_compressorlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("receiver_pressure")]
public float receiver_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4000000;

[JsonProperty("subcooler_effectiveness")]
public float subcooler_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("refrigeration_system_working_fluid_type")]
public string refrigeration_system_working_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sum_ua_suction_piping_for_medium_temperature_loads")]
public float sum_ua_suction_piping_for_medium_temperature_loads
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("medium_temperature_suction_piping_zone_name")]
public string medium_temperature_suction_piping_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sum_ua_suction_piping_for_low_temperature_loads")]
public float sum_ua_suction_piping_for_low_temperature_loads
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("low_temperature_suction_piping_zone_name")]
public string low_temperature_suction_piping_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum SystemtypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:SecondarySystem")]
    [Description(@"Works in conjunction with refrigerated cases and walkins to simulate the performance of a secondary loop supermarket refrigeration system. Heat from the refrigeration loads served by the secondary loop is absorbed by a primary refrigeration system (Refrigeration:System). The SecondarySystem object simulates a heat exchanger that is an evaporator, or refrigeration load, on the primary refrigeration system.")]
    public class Refrigeration_SecondarySystem
    {
        
        private void FluidAlwaysLiquid;
        
        private void FluidPhaseChange;
        
        private void Constant;
        
        private void Variable;
        

[JsonProperty("refrigerated_case_or_walkin_or_caseandwalkinlist_name")]
public string refrigerated_case_or_walkin_or_caseandwalkinlist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("circulating_fluid_type")]
public CirculatingfluidtypeType circulating_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("circulating_fluid_name")]
public string circulating_fluid_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_capacity")]
public float evaporator_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_flow_rate_for_secondary_fluid")]
public float evaporator_flow_rate_for_secondary_fluid
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_evaporating_temperature")]
public float evaporator_evaporating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_approach_temperature_difference")]
public float evaporator_approach_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_range_temperature_difference")]
public float evaporator_range_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_pumps_in_loop")]
public float number_of_pumps_in_loop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("total_pump_flow_rate")]
public float total_pump_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_pump_power")]
public float total_pump_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("total_pump_head")]
public float total_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phasechange_circulating_rate")]
public float phasechange_circulating_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("pump_drive_type")]
public PumpdrivetypeType pump_drive_type
{
    get
    {
    }
    set
    {
    }
}
 = (PumpdrivetypeType)Constant;

[JsonProperty("variable_speed_pump_cubic_curve_name")]
public string variable_speed_pump_cubic_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_motor_heat_to_fluid")]
public float pump_motor_heat_to_fluid
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.85;

[JsonProperty("sum_ua_distribution_piping")]
public float sum_ua_distribution_piping
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("distribution_piping_zone_name")]
public string distribution_piping_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sum_ua_receiver_separator_shell")]
public float sum_ua_receiver_separator_shell
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("receiver_separator_zone_name")]
public string receiver_separator_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_refrigerant_inventory")]
public float evaporator_refrigerant_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        [Description(@"If ""FluidAlwaysLiquid"" is selected, the fluid properties must be input using the objects: FluidProperties:Name, FluidProperties:GlycolConcentration, and, if user defined fluid type, FluidProperties:Temperatures and FluidProperties:Concentration. Many sets of fluid properties can be found in GlycolPropertiesRefData.idf. If ""FluidPhaseChange"" is selected, the refrigerant properties must be input using the objects: (if user defined fluid type): FluidProperties:Name, FluidProperties:Temperatures, FluidProperties:Saturated, and FluidProperties:Superheated. Many sets of refrigerant data can be found in FluidPropertiesRefData.idf.")]
        public enum CirculatingfluidtypeType
        {
        }
        
        public enum PumpdrivetypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:WalkIn")]
    [Description(@"Works in conjunction with a compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of a walk-in cooler. The walk-in cooler model uses information at rated conditions along with input descriptions for heat transfer surfaces facing multiple zones to determine performance.")]
    public class Refrigeration_WalkIn
    {
        
        private void Electric;
        
        private void HotFluid;
        
        private void None;
        
        private void OffCycle;
        
        private void TemperatureTermination;
        
        private void TimeSchedule;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_coil_cooling_capacity")]
public float rated_coil_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("operating_temperature")]
public float operating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_cooling_source_temperature")]
public float rated_cooling_source_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_total_heating_power")]
public float rated_total_heating_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_power_schedule_name")]
public string heating_power_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_cooling_coil_fan_power")]
public float rated_cooling_coil_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)375;

[JsonProperty("rated_circulation_fan_power")]
public float rated_circulation_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("rated_total_lighting_power")]
public float rated_total_lighting_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lighting_schedule_name")]
public string lighting_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_type")]
public DefrosttypeType defrost_type
{
    get
    {
    }
    set
    {
    }
}
 = (DefrosttypeType)Electric;

[JsonProperty("defrost_control_type")]
public DefrostcontroltypeType defrost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontroltypeType)TimeSchedule;

[JsonProperty("defrost_schedule_name")]
public string defrost_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_drip_down_schedule_name")]
public string defrost_drip_down_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_power")]
public float defrost_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_termination_defrost_fraction_to_ice")]
public float temperature_termination_defrost_fraction_to_ice
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("restocking_schedule_name")]
public string restocking_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("average_refrigerant_charge_inventory")]
public float average_refrigerant_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("insulated_floor_surface_area")]
public float insulated_floor_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("insulated_floor_u_value")]
public float insulated_floor_u_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3154;

[JsonProperty("zone_data")]
public string zone_data
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if " +
            "this walk in is cooled by brine from a secondary chiller")]
        public enum DefrosttypeType
        {
        }
        
        public enum DefrostcontroltypeType
        {
        }
    }
    
    [JsonProperty("Refrigeration:AirChiller")]
    [Description(@"Works in conjunction with a refrigeration chiller set, compressor rack, a refrigeration system, or a refrigeration secondary system to simulate the performance of an air chiller, similar to one found in a refrigerated warehouse. Energy use for fans and heaters is modeled based on inputs for nominal power, schedules, and control type. The air chiller model accounts for the sensible and latent heat exchange with the surrounding environment.")]
    public class Refrigeration_AirChiller
    {
        
        private void CapacityTotalSpecificConditions;
        
        private void EuropeanSC1NominalWet;
        
        private void EuropeanSC1Standard;
        
        private void EuropeanSC2NominalWet;
        
        private void EuropeanSC2Standard;
        
        private void EuropeanSC3NominalWet;
        
        private void EuropeanSC3Standard;
        
        private void EuropeanSC4NominalWet;
        
        private void EuropeanSC4Standard;
        
        private void EuropeanSC5NominalWet;
        
        private void EuropeanSC5Standard;
        
        private void FixedLinear;
        
        private void UnitLoadFactorSensibleOnly;
        
        private void European;
        
        private void LinearSHR60;
        
        private void QuadraticSHR;
        
        private void TabularRHxDT1xTRoom;
        
        private void Fixed;
        
        private void FixedLinear;
        
        private void TwoSpeed;
        
        private void VariableSpeed;
        
        private void Electric;
        
        private void HotFluid;
        
        private void None;
        
        private void OffCycle;
        
        private void TemperatureTermination;
        
        private void TimeSchedule;
        
        private void Ceiling;
        
        private void Floor;
        
        private void Middle;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_rating_type")]
public CapacityratingtypeType capacity_rating_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_unit_load_factor")]
public float rated_unit_load_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_capacity")]
public float rated_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_relative_humidity")]
public float rated_relative_humidity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)85;

[JsonProperty("rated_cooling_source_temperature")]
public float rated_cooling_source_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_temperature_difference_dt1")]
public float rated_temperature_difference_dt1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_temperature_difference_between_inlet_air_and_evaporating_temperature")]
public float maximum_temperature_difference_between_inlet_air_and_evaporating_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_material_correction_factor")]
public float coil_material_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("refrigerant_correction_factor")]
public float refrigerant_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("capacity_correction_curve_type")]
public CapacitycorrectioncurvetypeType capacity_correction_curve_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_correction_curve_name")]
public string capacity_correction_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shr60_correction_factor")]
public float shr60_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.48;

[JsonProperty("rated_total_heating_power")]
public float rated_total_heating_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_power_schedule_name")]
public string heating_power_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_speed_control_type")]
public FanspeedcontroltypeType fan_speed_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (FanspeedcontroltypeType)Fixed;

[JsonProperty("rated_fan_power")]
public float rated_fan_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)375;

[JsonProperty("rated_air_flow")]
public float rated_air_flow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_fan_air_flow_ratio")]
public float minimum_fan_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("defrost_type")]
public DefrosttypeType defrost_type
{
    get
    {
    }
    set
    {
    }
}
 = (DefrosttypeType)Electric;

[JsonProperty("defrost_control_type")]
public DefrostcontroltypeType defrost_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontroltypeType)TimeSchedule;

[JsonProperty("defrost_schedule_name")]
public string defrost_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_drip_down_schedule_name")]
public string defrost_drip_down_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_power")]
public float defrost_power
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_termination_defrost_fraction_to_ice")]
public float temperature_termination_defrost_fraction_to_ice
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_location")]
public VerticallocationType vertical_location
{
    get
    {
    }
    set
    {
    }
}
 = (VerticallocationType)Middle;

[JsonProperty("average_refrigerant_charge_inventory")]
public float average_refrigerant_charge_inventory
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description(@"In each case, select the rating option that corresponds to the expected service conditions. For example, U.S. manufacturers quote a separate Unit Load Factor for wet or frosted coils. If the evaporating temperature is less than 0C, input the frosted coil value. Within the European convention, select SC1, 2, 3, 4, or 5 depending upon the expected evaporating temperature.")]
        public enum CapacityratingtypeType
        {
        }
        
        [Description("In each case, select the correction curve type that corresponds to the rating typ" +
            "e. default LinearSHR60 unless Capacity Rating Type = CapacityTotalSpecificCondit" +
            "ions")]
        public enum CapacitycorrectioncurvetypeType
        {
        }
        
        public enum FanspeedcontroltypeType
        {
        }
        
        [Description("HotFluid includes either hot gas defrost for a DX system or Hot Brine defrost if " +
            "this walk in is cooled by brine from a secondary chiller")]
        public enum DefrosttypeType
        {
        }
        
        public enum DefrostcontroltypeType
        {
        }
        
        public enum VerticallocationType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:RefrigerationChillerSet")]
    [Description(@"Works in conjunction with one or multiple air chillers, compressor racks, refrigeration systems, or refrigeration secondary system objects to simulate the performance of a group of air chillers cooling a single zone. The chiller set model passes information about the zone conditions to determine the performance of individual chiller coils within the set, thus providing the sensible and latent heat exchange with the zone environment.")]
    public class ZoneHVAC_RefrigerationChillerSet
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chillers")]
public string chillers
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.RoomAirModels
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("RoomAirModelType")]
    [Description("Selects the type of room air model to be used in a given zone. If no RoomAirModel" +
        "Type object is specified then the default Mixing model (all zone air at the same" +
        " temperature) will be used.")]
    public class RoomAirModelType
    {
        
        private void AirflowNetwork;
        
        private void CrossVentilation;
        
        private void Mixing;
        
        private void OneNodeDisplacementVentilation;
        
        private void ThreeNodeDisplacementVentilation;
        
        private void UnderFloorAirDistributionExterior;
        
        private void UnderFloorAirDistributionInterior;
        
        private void UserDefined;
        
        private void Direct;
        
        private void Indirect;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("room_air_modeling_type")]
public RoomairmodelingtypeType room_air_modeling_type
{
    get
    {
    }
    set
    {
    }
}
 = (RoomairmodelingtypeType)Mixing;

[JsonProperty("air_temperature_coupling_strategy")]
public AirtemperaturecouplingstrategyType air_temperature_coupling_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (AirtemperaturecouplingstrategyType)Direct;
        
        [Description(@"Mixing = Complete mixing air model UserDefined = UserDefined Room Air Temperature Patterns needs RoomAir:TemperaturePattern:UserDefined object referencing this Zone OneNodeDisplacementVentilation = Mundt roomair model for displacement ventilation with single floor air node needs RoomAirSettings:OneNodeDisplacementVentilation object referencing this Zone ThreeNodeDisplacementVentilation = RoomAir modeling using UCSD three-node displacement ventilation model needs RoomAirSettings:ThreeNodeDisplacementVentilation object referencing this Zone CrossVentilation = RoomAir modeling using UCSD two-zone cross ventilation model needs RoomAirSettings:CrossVentilation object referencing this Zone UnderFloorAirDistributionInterior = 2-Node UFAD model for interior zones needs RoomAirSettings:UnderFloorAirDistributionInterior object referencing this Zone UnderFloorAirDistributionExterior = RoomAir modeling using 2-Node UFAD model for exterior zones needs RoomAirSettings:UnderFloorAirDistributionExterior object referencing this Zone AirflowNetwork = RoomAir modeling using AirflowNetwork needs RoomAirSettings:AirflowNetwork object referencing this Zone")]
        public enum RoomairmodelingtypeType
        {
        }
        
        public enum AirtemperaturecouplingstrategyType
        {
        }
    }
    
    [JsonProperty("RoomAir:TemperaturePattern:UserDefined")]
    [Description("Used to explicitly define temperature patterns that are to be applied to the mean" +
        " air temperature within a thermal zone. Used with RoomAirModelType = UserDefined" +
        ".")]
    public class RoomAir_TemperaturePattern_UserDefined
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pattern_control_schedule_name")]
public string pattern_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:TemperaturePattern:ConstantGradient")]
    [Description("Used to model room air with a fixed temperature gradient in the vertical directio" +
        "n. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    public class RoomAir_TemperaturePattern_ConstantGradient
    {
        

[JsonProperty("room_air_temperature_pattern_constant_gradient_name")]
public string room_air_temperature_pattern_constant_gradient_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public float control_integer_for_pattern_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermostat_offset")]
public float thermostat_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_offset")]
public float return_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_offset")]
public float exhaust_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_gradient")]
public float temperature_gradient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:TemperaturePattern:TwoGradient")]
    [Description("Used to model room air with two temperature gradients in the vertical direction. " +
        "Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    public class RoomAir_TemperaturePattern_TwoGradient
    {
        
        private void OutdoorDryBulbTemperature;
        
        private void SensibleCoolingLoad;
        
        private void SensibleHeatingLoad;
        
        private void ZoneAndOutdoorTemperatureDifference;
        
        private void ZoneDryBulbTemperature;
        

[JsonProperty("room_air_temperature_pattern_two_gradient_name")]
public string room_air_temperature_pattern_two_gradient_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public float control_integer_for_pattern_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermostat_height")]
public float thermostat_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_height")]
public float return_air_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_height")]
public float exhaust_air_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_gradient_lower_bound")]
public float temperature_gradient_lower_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_gradient_upper_bound")]
public float temperature_gradient_upper_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gradient_interpolation_mode")]
public GradientinterpolationmodeType gradient_interpolation_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("upper_temperature_bound")]
public float upper_temperature_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lower_temperature_bound")]
public float lower_temperature_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("upper_heat_rate_bound")]
public float upper_heat_rate_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("lower_heat_rate_bound")]
public float lower_heat_rate_bound
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum GradientinterpolationmodeType
        {
        }
    }
    
    [JsonProperty("RoomAir:TemperaturePattern:NondimensionalHeight")]
    [Description(@"Defines a distribution pattern for air temperatures relative to the current mean air temperature as a function of height. The height, referred to as Zeta, is nondimensional by normalizing with the zone ceiling height. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    public class RoomAir_TemperaturePattern_NondimensionalHeight
    {
        

[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public float control_integer_for_pattern_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermostat_offset")]
public float thermostat_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_offset")]
public float return_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_offset")]
public float exhaust_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pairs")]
public string pairs
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:TemperaturePattern:SurfaceMapping")]
    [Description(@"Defines a distribution pattern for the air temperatures adjacent to individual surfaces. This allows controlling the adjacent air temperature on a surface-by-surface basis rather than by height. This allows modeling different adjacent air temperatures on the opposite sides of the zone. Used in combination with RoomAir:TemperaturePattern:UserDefined.")]
    public class RoomAir_TemperaturePattern_SurfaceMapping
    {
        

[JsonProperty("control_integer_for_pattern_control_schedule_name")]
public float control_integer_for_pattern_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermostat_offset")]
public float thermostat_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_offset")]
public float return_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_offset")]
public float exhaust_air_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_deltas")]
public string surface_deltas
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:Node")]
    [Description("Define an air node for some types of nodal room air models")]
    public class RoomAir_Node
    {
        
        private void Ceiling;
        
        private void Control;
        
        private void Floor;
        
        private void Inlet;
        
        private void MundtRoom;
        
        private void Return;
        

[JsonProperty("node_type")]
public NodetypeType node_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_of_nodal_control_volume_center")]
public float height_of_nodal_control_volume_center
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_1_name")]
public string surface_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_2_name")]
public string surface_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_3_name")]
public string surface_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_4_name")]
public string surface_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_5_name")]
public string surface_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_6_name")]
public string surface_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_7_name")]
public string surface_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_8_name")]
public string surface_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_9_name")]
public string surface_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_10_name")]
public string surface_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_11_name")]
public string surface_11_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_12_name")]
public string surface_12_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_13_name")]
public string surface_13_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_14_name")]
public string surface_14_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_15_name")]
public string surface_15_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_16_name")]
public string surface_16_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_17_name")]
public string surface_17_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_18_name")]
public string surface_18_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_19_name")]
public string surface_19_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_20_name")]
public string surface_20_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_21_name")]
public string surface_21_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum NodetypeType
        {
        }
    }
    
    [JsonProperty("RoomAirSettings:OneNodeDisplacementVentilation")]
    [Description("The Mundt model for displacement ventilation")]
    public class RoomAirSettings_OneNodeDisplacementVentilation
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_convective_internal_loads_added_to_floor_air")]
public float fraction_of_convective_internal_loads_added_to_floor_air
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_infiltration_internal_loads_added_to_floor_air")]
public float fraction_of_infiltration_internal_loads_added_to_floor_air
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAirSettings:ThreeNodeDisplacementVentilation")]
    [Description("The UCSD model for Displacement Ventilation")]
    public class RoomAirSettings_ThreeNodeDisplacementVentilation
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gain_distribution_schedule_name")]
public string gain_distribution_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_plumes_per_occupant")]
public float number_of_plumes_per_occupant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("thermostat_height")]
public float thermostat_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("comfort_height")]
public float comfort_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("temperature_difference_threshold_for_reporting")]
public float temperature_difference_threshold_for_reporting
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;
    }
    
    [JsonProperty("RoomAirSettings:CrossVentilation")]
    [Description(@"This UCSD Cross Ventilation Room Air Model provides a simple model for heat transfer and vertical temperature profile prediction in cross ventilated rooms. The model distinguishes two regions in the room, the main jet region and the recirculations, and predicts characteristic airflow velocities and average air temperatures. Used with RoomAirModelType = CrossVentilation.")]
    public class RoomAirSettings_CrossVentilation
    {
        
        private void Jet;
        
        private void Recirculation;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gain_distribution_schedule_name")]
public string gain_distribution_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airflow_region_used_for_thermal_comfort_evaluation")]
public AirflowregionusedforthermalcomfortevaluationType airflow_region_used_for_thermal_comfort_evaluation
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Required field whenever thermal comfort is predicted defines Air temperature and " +
            "Airflow velocity that will be used in the Fanger model conditions must refer to " +
            "one of the two regions: jet or recirculation")]
        public enum AirflowregionusedforthermalcomfortevaluationType
        {
        }
    }
    
    [JsonProperty("RoomAirSettings:UnderFloorAirDistributionInterior")]
    [Description(@"This Room Air Model is applicable to interior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room. The model should be used with caution in zones which have large heat gains or losses through exterior walls or windows or which have considerable direct solar gain. Used with RoomAirModelType = UnderFloorAirDistributionInterior.")]
    public class RoomAirSettings_UnderFloorAirDistributionInterior
    {
        
        private void Custom;
        
        private void HorizontalSwirl;
        
        private void LinearBarGrille;
        
        private void Swirl;
        
        private void VariableArea;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_diffusers")]
public string number_of_diffusers
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("power_per_plume")]
public string power_per_plume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("design_effective_area_of_diffuser")]
public string design_effective_area_of_diffuser
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("diffuser_slot_angle_from_vertical")]
public string diffuser_slot_angle_from_vertical
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("thermostat_height")]
public float thermostat_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.2;

[JsonProperty("comfort_height")]
public float comfort_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("temperature_difference_threshold_for_reporting")]
public float temperature_difference_threshold_for_reporting
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("floor_diffuser_type")]
public FloordiffusertypeType floor_diffuser_type
{
    get
    {
    }
    set
    {
    }
}
 = (FloordiffusertypeType)Swirl;

[JsonProperty("transition_height")]
public string transition_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1.7;

[JsonProperty("coefficient_a")]
public string coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_b")]
public string coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_c")]
public string coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_d")]
public string coefficient_d
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_e")]
public string coefficient_e
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;
        
        public enum FloordiffusertypeType
        {
        }
    }
    
    [JsonProperty("RoomAirSettings:UnderFloorAirDistributionExterior")]
    [Description(@"Applicable to exterior spaces that are served by an underfloor air distribution system. The dominant sources of heat gain should be from people, equipment, and other localized sources located in the occupied part of the room, as well as convective gain coming from a warm window. Used with RoomAirModelType = CrossVentilation.")]
    public class RoomAirSettings_UnderFloorAirDistributionExterior
    {
        
        private void Custom;
        
        private void HorizontalSwirl;
        
        private void LinearBarGrille;
        
        private void Swirl;
        
        private void VariableArea;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_diffusers_per_zone")]
public string number_of_diffusers_per_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("power_per_plume")]
public string power_per_plume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("design_effective_area_of_diffuser")]
public string design_effective_area_of_diffuser
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("diffuser_slot_angle_from_vertical")]
public string diffuser_slot_angle_from_vertical
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("thermostat_height")]
public float thermostat_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.2;

[JsonProperty("comfort_height")]
public float comfort_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("temperature_difference_threshold_for_reporting")]
public float temperature_difference_threshold_for_reporting
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("floor_diffuser_type")]
public FloordiffusertypeType floor_diffuser_type
{
    get
    {
    }
    set
    {
    }
}
 = (FloordiffusertypeType)Swirl;

[JsonProperty("transition_height")]
public string transition_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)1.7;

[JsonProperty("coefficient_a_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string coefficient_a_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_b_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string coefficient_b_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_c_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string coefficient_c_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_d_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string coefficient_d_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coefficient_e_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2")]
public string coefficient_e_in_formula_kc_a_gamma_b_c_d_gamma_e_gamma_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;
        
        public enum FloordiffusertypeType
        {
        }
    }
    
    [JsonProperty("RoomAir:Node:AirflowNetwork")]
    [Description("define an air node for some types of nodal air models")]
    public class RoomAir_Node_AirflowNetwork
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_zone_air_volume")]
public float fraction_of_zone_air_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("roomair_node_airflownetwork_adjacentsurfacelist_name")]
public string roomair_node_airflownetwork_adjacentsurfacelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("roomair_node_airflownetwork_internalgains_name")]
public string roomair_node_airflownetwork_internalgains_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("roomair_node_airflownetwork_hvacequipment_name")]
public string roomair_node_airflownetwork_hvacequipment_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:Node:AirflowNetwork:AdjacentSurfaceList")]
    public class RoomAir_Node_AirflowNetwork_AdjacentSurfaceList
    {
        

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:Node:AirflowNetwork:InternalGains")]
    [Description("define the internal gains that are associated with one particular RoomAir:Node")]
    public class RoomAir_Node_AirflowNetwork_InternalGains
    {
        

[JsonProperty("gains")]
public string gains
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAir:Node:AirflowNetwork:HVACEquipment")]
    [Description("define the zone equipment associated with one particular RoomAir:Node")]
    public class RoomAir_Node_AirflowNetwork_HVACEquipment
    {
        

[JsonProperty("equipment_fractions")]
public string equipment_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("RoomAirSettings:AirflowNetwork")]
    [Description("RoomAir modeling using Airflow pressure network solver")]
    public class RoomAirSettings_AirflowNetwork
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_point_roomairflownetwork_node_name")]
public string control_point_roomairflownetwork_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nodes")]
public string nodes
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.Schedules
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ScheduleTypeLimits")]
    [Description("ScheduleTypeLimits specifies the data types and limits for the values contained i" +
        "n schedules")]
    public class ScheduleTypeLimits
    {
        
        private void Continuous;
        
        private void Discrete;
        
        private void ActivityLevel;
        
        private void Angle;
        
        private void Availability;
        
        private void Capacity;
        
        private void Control;
        
        private void ConvectionCoefficient;
        
        private void DeltaTemperature;
        
        private void Dimensionless;
        
        private void Mode;
        
        private void Percent;
        
        private void Power;
        
        private void PrecipitationRate;
        
        private void Temperature;
        
        private void Velocity;
        

[JsonProperty("lower_limit_value")]
public float lower_limit_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("upper_limit_value")]
public float upper_limit_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("numeric_type")]
public NumerictypeType numeric_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unit_type")]
public UnittypeType unit_type
{
    get
    {
    }
    set
    {
    }
}
 = (UnittypeType)Dimensionless;
        
        [Description("Numeric type is either Continuous (all numbers within the min and max are valid o" +
            "r Discrete (only integer numbers between min and max are valid. (Could also allo" +
            "w REAL and INTEGER to mean the same things)")]
        public enum NumerictypeType
        {
        }
        
        [Description("Temperature (C or F) DeltaTemperature (C or F) PrecipitationRate (m/hr or ft/hr) " +
            "Angle (degrees) Convection Coefficient (W/m2-K or Btu/sqft-hr-F) Activity Level " +
            "(W/person) Velocity (m/s or ft/min) Capacity (W or Btu/h) Power (W)")]
        public enum UnittypeType
        {
        }
    }
    
    [JsonProperty("Schedule:Day:Hourly")]
    [Description("A Schedule:Day:Hourly contains 24 values for each hour of the day.")]
    public class Schedule_Day_Hourly
    {
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hour_1")]
public float hour_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_2")]
public float hour_2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_3")]
public float hour_3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_4")]
public float hour_4
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_5")]
public float hour_5
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_6")]
public float hour_6
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_7")]
public float hour_7
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_8")]
public float hour_8
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_9")]
public float hour_9
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_10")]
public float hour_10
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_11")]
public float hour_11
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_12")]
public float hour_12
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_13")]
public float hour_13
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_14")]
public float hour_14
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_15")]
public float hour_15
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_16")]
public float hour_16
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_17")]
public float hour_17
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_18")]
public float hour_18
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_19")]
public float hour_19
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_20")]
public float hour_20
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_21")]
public float hour_21
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_22")]
public float hour_22
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_23")]
public float hour_23
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("hour_24")]
public float hour_24
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Schedule:Day:Interval")]
    [Description("A Schedule:Day:Interval contains a full day of values with specified end times fo" +
        "r each value Currently, is set up to allow for 10 minute intervals for an entire" +
        " day.")]
    public class Schedule_Day_Interval
    {
        
        private void Average;
        
        private void Linear;
        
        private void No;
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interpolate_to_timestep")]
public InterpolatetotimestepType interpolate_to_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (InterpolatetotimestepType)No;

[JsonProperty("data")]
public string data
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"when the interval does not match the user specified timestep a Average choice will average between the intervals request (to timestep resolution. A No choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A Linear choice will interpolate linearly between successive values.")]
        public enum InterpolatetotimestepType
        {
        }
    }
    
    [JsonProperty("Schedule:Day:List")]
    [Description("Schedule:Day:List will allow the user to list 24 hours worth of values, which can" +
        " be sub-hourly in nature.")]
    public class Schedule_Day_List
    {
        
        private void Average;
        
        private void Linear;
        
        private void No;
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("interpolate_to_timestep")]
public InterpolatetotimestepType interpolate_to_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (InterpolatetotimestepType)No;

[JsonProperty("minutes_per_item")]
public float minutes_per_item
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("extensions")]
public string extensions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"when the interval does not match the user specified timestep a ""Average"" choice will average between the intervals request (to timestep resolution. A ""No"" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not. A ""Linear"" choice will interpolate linearly between successive values.")]
        public enum InterpolatetotimestepType
        {
        }
    }
    
    [JsonProperty("Schedule:Week:Daily")]
    [Description("A Schedule:Week:Daily contains 12 Schedule:Day:Hourly objects, one for each day t" +
        "ype.")]
    public class Schedule_Week_Daily
    {
        

[JsonProperty("sunday_schedule_day_name")]
public string sunday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("monday_schedule_day_name")]
public string monday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tuesday_schedule_day_name")]
public string tuesday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wednesday_schedule_day_name")]
public string wednesday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thursday_schedule_day_name")]
public string thursday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("friday_schedule_day_name")]
public string friday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("saturday_schedule_day_name")]
public string saturday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("holiday_schedule_day_name")]
public string holiday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("summerdesignday_schedule_day_name")]
public string summerdesignday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("winterdesignday_schedule_day_name")]
public string winterdesignday_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("customday1_schedule_day_name")]
public string customday1_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("customday2_schedule_day_name")]
public string customday2_schedule_day_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Schedule:Week:Compact")]
    [Description("Compact definition for Schedule:Day:List")]
    public class Schedule_Week_Compact
    {
        

[JsonProperty("data")]
public string data
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Schedule:Year")]
    [Description("A Schedule:Year contains from 1 to 52 week schedules")]
    public class Schedule_Year
    {
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_weeks")]
public string schedule_weeks
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Schedule:Compact")]
    [Description(@"Irregular object. Does not follow the usual definition for fields. Fields A3... are: Through: Date For: Applicable days (ref: Schedule:Week:Compact) Interpolate: Average/Linear/No (ref: Schedule:Day:Interval) -- optional, if not used will be ""No"" Until: <Time> (ref: Schedule:Day:Interval) <numeric value> words ""Through"",""For"",""Interpolate"",""Until"" must be included.")]
    public class Schedule_Compact
    {
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("data")]
public string data
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Schedule:Constant")]
    [Description("Constant hourly value for entire year.")]
    public class Schedule_Constant
    {
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hourly_value")]
public float hourly_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Schedule:File:Shading")]
    [Description("A Schedule:File:Shading points to a CSV file that has 8760-8784 hours of sunlit f" +
        "raction data for all or some of the exterior surfaces.")]
    public class Schedule_File_Shading
    {
        

[JsonProperty("file_name")]
public string file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Schedule:File")]
    [Description("A Schedule:File points to a text computer file that has 8760-8784 hours of data.")]
    public class Schedule_File
    {
        
        private void Comma;
        
        private void Semicolon;
        
        private void Space;
        
        private void Tab;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("schedule_type_limits_name")]
public string schedule_type_limits_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("file_name")]
public string file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("column_number")]
public float column_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rows_to_skip_at_top")]
public float rows_to_skip_at_top
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_hours_of_data")]
public float number_of_hours_of_data
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)8760;

[JsonProperty("column_separator")]
public ColumnseparatorType column_separator
{
    get
    {
    }
    set
    {
    }
}
 = (ColumnseparatorType)Comma;

[JsonProperty("interpolate_to_timestep")]
public InterpolatetotimestepType interpolate_to_timestep
{
    get
    {
    }
    set
    {
    }
}
 = (InterpolatetotimestepType)No;

[JsonProperty("minutes_per_item")]
public float minutes_per_item
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ColumnseparatorType
        {
        }
        
        [Description(@"when the interval does not match the user specified timestep a ""Yes"" choice will average between the intervals request (to timestep resolution. a ""No"" choice will use the interval value at the simulation timestep without regard to if it matches the boundary or not.")]
        public enum InterpolatetotimestepType
        {
        }
    }
}
namespace EnergyPlus.SetpointManagers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("SetpointManager:Scheduled")]
    [Description("The simplest Setpoint Manager simply uses a schedule to determine one or more set" +
        "points. Values of the nodes are not used as input.")]
    public class SetpointManager_Scheduled
    {
        
        private void HumidityRatio;
        
        private void MassFlowRate;
        
        private void MaximumHumidityRatio;
        
        private void MaximumMassFlowRate;
        
        private void MaximumTemperature;
        
        private void MinimumHumidityRatio;
        
        private void MinimumMassFlowRate;
        
        private void MinimumTemperature;
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:Scheduled:DualSetpoint")]
    [Description("This setpoint manager places a high and low schedule value on one or more nodes.")]
    public class SetpointManager_Scheduled_DualSetpoint
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("high_setpoint_schedule_name")]
public string high_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_setpoint_schedule_name")]
public string low_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:OutdoorAirReset")]
    [Description("This Setpoint Manager is used to place a setpoint temperature on system node acco" +
        "rding to the outdoor air temperature using a reset rule. The outdoor air tempera" +
        "ture is obtained from the weather information during the simulation.")]
    public class SetpointManager_OutdoorAirReset
    {
        
        private void MaximumTemperature;
        
        private void MinimumTemperature;
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("setpoint_at_outdoor_low_temperature")]
public float setpoint_at_outdoor_low_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_low_temperature")]
public float outdoor_low_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_at_outdoor_high_temperature")]
public float setpoint_at_outdoor_high_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_high_temperature")]
public float outdoor_high_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_at_outdoor_low_temperature_2")]
public float setpoint_at_outdoor_low_temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_low_temperature_2")]
public float outdoor_low_temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_at_outdoor_high_temperature_2")]
public float setpoint_at_outdoor_high_temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_high_temperature_2")]
public float outdoor_high_temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:SingleZone:Reheat")]
    [Description(@"This setpoint manager detects the control zone load, zone inlet node flow rate, and zone node temperature and calculates a setpoint temperature for the supply air that will satisfy the zone load (heating or cooling) for the control zone. This setpoint manager is not limited to reheat applications.")]
    public class SetpointManager_SingleZone_Reheat
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("minimum_supply_air_temperature")]
public float minimum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("maximum_supply_air_temperature")]
public float maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_inlet_node_name")]
public string zone_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:SingleZone:Heating")]
    [Description(@"This setpoint manager detects the control zone load to meet the current heating setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone heating load for the control zone.")]
    public class SetpointManager_SingleZone_Heating
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("minimum_supply_air_temperature")]
public float minimum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("maximum_supply_air_temperature")]
public float maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_inlet_node_name")]
public string zone_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:SingleZone:Cooling")]
    [Description(@"This setpoint manager detects the control zone load to meet the current cooling setpoint, zone inlet node flow rate, and zone node temperature, and calculates a setpoint temperature for the supply air that will satisfy the zone cooling load for the control zone.")]
    public class SetpointManager_SingleZone_Cooling
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("minimum_supply_air_temperature")]
public float minimum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("maximum_supply_air_temperature")]
public float maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_inlet_node_name")]
public string zone_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:SingleZone:Humidity:Minimum")]
    [Description("The Single Zone Minimum Humidity Setpoint Manager allows the control of a single " +
        "zone minimum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    public class SetpointManager_SingleZone_Humidity_Minimum
    {
        

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_zone_air_node_name")]
public string control_zone_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:SingleZone:Humidity:Maximum")]
    [Description("The Single Zone Maximum Humidity Setpoint Manager allows the control of a single " +
        "zone maximum humidity level. This setpoint manager can be used in conjunction wi" +
        "th object ZoneControl:Humidistat to detect humidity levels.")]
    public class SetpointManager_SingleZone_Humidity_Maximum
    {
        

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_zone_air_node_name")]
public string control_zone_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MixedAir")]
    [Description("The Mixed Air Setpoint Manager is meant to be used in conjunction with a Controll" +
        "er:OutdoorAir object. This setpoint manager is used to establish a temperature s" +
        "etpoint at the mixed air node.")]
    public class SetpointManager_MixedAir
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("reference_setpoint_node_name")]
public string reference_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_inlet_node_name")]
public string fan_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_outlet_node_name")]
public string fan_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_inlet_node_name")]
public string cooling_coil_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_outlet_node_name")]
public string cooling_coil_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_temperature_at_cooling_coil_outlet_node")]
public float minimum_temperature_at_cooling_coil_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.2;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:OutdoorAirPretreat")]
    [Description("This setpoint manager determines the required conditions at the outdoor air strea" +
        "m node which will produce the reference setpoint condition at the mixed air node" +
        " when mixed with the return air stream")]
    public class SetpointManager_OutdoorAirPretreat
    {
        
        private void HumidityRatio;
        
        private void MaximumHumidityRatio;
        
        private void MinimumHumidityRatio;
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("minimum_setpoint_humidity_ratio")]
public float minimum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1E-05;

[JsonProperty("maximum_setpoint_humidity_ratio")]
public float maximum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("reference_setpoint_node_name")]
public string reference_setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_air_stream_node_name")]
public string mixed_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_stream_node_name")]
public string outdoor_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_stream_node_name")]
public string return_air_stream_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:Warmest")]
    [Description("This SetpointManager resets the cooling supply air temperature of a central force" +
        "d air HVAC system according to the cooling demand of the warmest zone.")]
    public class SetpointManager_Warmest
    {
        
        private void Temperature;
        
        private void MaximumTemperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("strategy")]
public StrategyType strategy
{
    get
    {
    }
    set
    {
    }
}
 = (StrategyType)MaximumTemperature;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
        
        public enum StrategyType
        {
        }
    }
    
    [JsonProperty("SetpointManager:Coldest")]
    [Description("This SetpointManager is used in dual duct systems to reset the setpoint temperatu" +
        "re of the air in the heating supply duct. Usually it is used in conjunction with" +
        " a SetpointManager:Warmest resetting the temperature of the air in the cooling s" +
        "upply duct.")]
    public class SetpointManager_Coldest
    {
        
        private void Temperature;
        
        private void MinimumTemperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("strategy")]
public StrategyType strategy
{
    get
    {
    }
    set
    {
    }
}
 = (StrategyType)MinimumTemperature;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
        
        public enum StrategyType
        {
        }
    }
    
    [JsonProperty("SetpointManager:ReturnAirBypassFlow")]
    [Description("This setpoint manager determines the required mass flow rate through a return air" +
        " bypass duct to meet the specified temperature setpoint")]
    public class SetpointManager_ReturnAirBypassFlow
    {
        
        private void Flow;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Flow;

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_setpoint_schedule_name")]
public string temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:WarmestTemperatureFlow")]
    [Description("This setpoint manager sets both the supply air temperature and the supply air flo" +
        "w rate.")]
    public class SetpointManager_WarmestTemperatureFlow
    {
        
        private void Temperature;
        
        private void FlowFirst;
        
        private void TemperatureFirst;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("strategy")]
public StrategyType strategy
{
    get
    {
    }
    set
    {
    }
}
 = (StrategyType)TemperatureFirst;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_turndown_ratio")]
public float minimum_turndown_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;
        
        public enum ControlvariableType
        {
        }
        
        [Description(@"For TemperatureFirst the manager tries to find the highest setpoint temperature that will satisfy all the zone cooling loads at minimum supply air flow rate. If this setpoint temperature is less than the minimum, the setpoint temperature is set to the minimum, and the supply air flow rate is increased to meet the loads. For FlowFirst the manager tries to find the lowest supply air flow rate that will satisfy all the zone cooling loads at the maximum setpoint temperature. If this flow is greater than the maximum, the flow is set to the maximum and the setpoint temperature is reduced to satisfy the cooling loads.")]
        public enum StrategyType
        {
        }
    }
    
    [JsonProperty("SetpointManager:MultiZone:Heating:Average")]
    [Description("This setpoint manager sets the average supply air temperature based on the heatin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    public class SetpointManager_MultiZone_Heating_Average
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MultiZone:Cooling:Average")]
    [Description("This setpoint manager sets the average supply air temperature based on the coolin" +
        "g load requirements of all controlled zones in an air loop served by a central a" +
        "ir-conditioner.")]
    public class SetpointManager_MultiZone_Cooling_Average
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)12;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)18;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MultiZone:MinimumHumidity:Average")]
    [Description("This setpoint manager sets the average supply air minimum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    public class SetpointManager_MultiZone_MinimumHumidity_Average
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_humidity_ratio")]
public float minimum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.005;

[JsonProperty("maximum_setpoint_humidity_ratio")]
public float maximum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.012;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MultiZone:MaximumHumidity:Average")]
    [Description("This setpoint manager sets the average supply air maximum humidity ratio based on" +
        " moisture load requirements of all controlled zones in an air loop served by a c" +
        "entral air-conditioner.")]
    public class SetpointManager_MultiZone_MaximumHumidity_Average
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_humidity_ratio")]
public float minimum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("maximum_setpoint_humidity_ratio")]
public float maximum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.015;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MultiZone:Humidity:Minimum")]
    [Description(@"This setpoint manager sets the minimum supply air humidity ratio based on humidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the highest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    public class SetpointManager_MultiZone_Humidity_Minimum
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_humidity_ratio")]
public float minimum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.005;

[JsonProperty("maximum_setpoint_humidity_ratio")]
public float maximum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.012;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:MultiZone:Humidity:Maximum")]
    [Description(@"This setpoint manager sets the maximum supply air humidity ratio based on dehumidification requirements of a controlled zone with critical humidity ratio setpoint (i.e., a zone with the lowest humidity ratio setpoint) in an air loop served by a central air-conditioner.")]
    public class SetpointManager_MultiZone_Humidity_Maximum
    {
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_humidity_ratio")]
public float minimum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("maximum_setpoint_humidity_ratio")]
public float maximum_setpoint_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.015;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:FollowOutdoorAirTemperature")]
    [Description("This setpoint manager is used to place a temperature setpoint on a system node th" +
        "at is derived from the current outdoor air environmental conditions. The outdoor" +
        " air conditions are obtained from the weather information during the simulation." +
        "")]
    public class SetpointManager_FollowOutdoorAirTemperature
    {
        
        private void MaximumTemperature;
        
        private void MinimumTemperature;
        
        private void Temperature;
        
        private void OutdoorAirDryBulb;
        
        private void OutdoorAirWetBulb;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("reference_temperature_type")]
public ReferencetemperaturetypeType reference_temperature_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReferencetemperaturetypeType)OutdoorAirWetBulb;

[JsonProperty("offset_temperature_difference")]
public float offset_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
        
        public enum ReferencetemperaturetypeType
        {
        }
    }
    
    [JsonProperty("SetpointManager:FollowSystemNodeTemperature")]
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from the current temperatures at a separate system node. The current value of the temperature at a reference node is obtained and used to generate setpoint on a second system node. If the reference node is also designated to be an outdoor air (intake) node, then this setpoint manager can be used to follow outdoor air conditions that are adjusted for altitude.")]
    public class SetpointManager_FollowSystemNodeTemperature
    {
        
        private void MaximumTemperature;
        
        private void MinimumTemperature;
        
        private void Temperature;
        
        private void NodeDryBulb;
        
        private void NodeWetBulb;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("reference_node_name")]
public string reference_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reference_temperature_type")]
public ReferencetemperaturetypeType reference_temperature_type
{
    get
    {
    }
    set
    {
    }
}
 = (ReferencetemperaturetypeType)NodeDryBulb;

[JsonProperty("offset_temperature_difference")]
public float offset_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_limit_setpoint_temperature")]
public float maximum_limit_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_limit_setpoint_temperature")]
public float minimum_limit_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
        
        public enum ReferencetemperaturetypeType
        {
        }
    }
    
    [JsonProperty("SetpointManager:FollowGroundTemperature")]
    [Description(@"This setpoint manager is used to place a temperature setpoint on a system node that is derived from a current ground temperature. The ground temperatures are specified in different Site:GroundTemperature:* objects and used during the simulation. This setpoint manager is primarily intended for condenser or plant loops using some type of ground heat exchanger.")]
    public class SetpointManager_FollowGroundTemperature
    {
        
        private void MaximumTemperature;
        
        private void MinimumTemperature;
        
        private void Temperature;
        
        private void Site:GroundTemperature:BuildingSurface;
        
        private void Site:GroundTemperature:Deep;
        
        private void Site:GroundTemperature:FCfactorMethod;
        
        private void Site:GroundTemperature:Shallow;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("reference_ground_temperature_object_type")]
public ReferencegroundtemperatureobjecttypeType reference_ground_temperature_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("offset_temperature_difference")]
public float offset_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_setpoint_temperature")]
public float maximum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_setpoint_temperature")]
public float minimum_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
        
        public enum ReferencegroundtemperatureobjecttypeType
        {
        }
    }
    
    [JsonProperty("SetpointManager:CondenserEnteringReset")]
    [Description("This setpoint manager uses one curve to determine the optimum condenser entering " +
        "water temperature for a given timestep and two other curves to place boundary co" +
        "nditions on the setpoint value.")]
    public class SetpointManager_CondenserEnteringReset
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("default_condenser_entering_water_temperature_schedule_name")]
public string default_condenser_entering_water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_design_wetbulb_temperature_curve_name")]
public string minimum_design_wetbulb_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outside_air_wetbulb_temperature_curve_name")]
public string minimum_outside_air_wetbulb_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("optimized_cond_entering_water_temperature_curve_name")]
public string optimized_cond_entering_water_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_lift")]
public float minimum_lift
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.1;

[JsonProperty("maximum_condenser_entering_water_temperature")]
public float maximum_condenser_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)32;

[JsonProperty("cooling_tower_design_inlet_air_wet_bulb_temperature")]
public float cooling_tower_design_inlet_air_wet_bulb_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25.56;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:CondenserEnteringReset:Ideal")]
    [Description("This setpoint manager determine the ideal optimum condenser entering water temper" +
        "ature setpoint for a given timestep.")]
    public class SetpointManager_CondenserEnteringReset_Ideal
    {
        
        private void Temperature;
        

[JsonProperty("control_variable")]
public ControlvariableType control_variable
{
    get
    {
    }
    set
    {
    }
}
 = (ControlvariableType)Temperature;

[JsonProperty("minimum_lift")]
public float minimum_lift
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)11.1;

[JsonProperty("maximum_condenser_entering_water_temperature")]
public float maximum_condenser_entering_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)32;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ControlvariableType
        {
        }
    }
    
    [JsonProperty("SetpointManager:SingleZone:OneStageCooling")]
    [Description(@"This object can be used with CoilSystem:Cooling:DX to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint")]
    public class SetpointManager_SingleZone_OneStageCooling
    {
        

[JsonProperty("cooling_stage_on_supply_air_setpoint_temperature")]
public float cooling_stage_on_supply_air_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("cooling_stage_off_supply_air_setpoint_temperature")]
public float cooling_stage_off_supply_air_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:SingleZone:OneStageHeating")]
    [Description(@"This object can be used with CoilSystem:Heating:DX, Coil:Heating:Fuel, Coil:Heating:Electric to model on/off cycling control of single stage air systems. Setpoints are modulated to run coil full on or full off depending on zone conditions. Intended for use with ZoneControl:Thermostat:StagedDualSetpoint.")]
    public class SetpointManager_SingleZone_OneStageHeating
    {
        

[JsonProperty("heating_stage_on_supply_air_setpoint_temperature")]
public float heating_stage_on_supply_air_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)99;

[JsonProperty("heating_stage_off_supply_air_setpoint_temperature")]
public float heating_stage_off_supply_air_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-99;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_or_nodelist_name")]
public string setpoint_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SetpointManager:ReturnTemperature:ChilledWater")]
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    public class SetpointManager_ReturnTemperature_ChilledWater
    {
        
        private void Constant;
        
        private void ReturnTemperatureSetpoint;
        
        private void Scheduled;
        

[JsonProperty("plant_loop_supply_outlet_node")]
public string plant_loop_supply_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_loop_supply_inlet_node")]
public string plant_loop_supply_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_supply_temperature_setpoint")]
public float minimum_supply_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("maximum_supply_temperature_setpoint")]
public float maximum_supply_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("return_temperature_setpoint_input_type")]
public ReturntemperaturesetpointinputtypeType return_temperature_setpoint_input_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_temperature_setpoint_constant_value")]
public float return_temperature_setpoint_constant_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("return_temperature_setpoint_schedule_name")]
public string return_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This defines whether the chilled water return temperature target is constant, sch" +
            "eduled, or specified on the supply inlet node by a separate setpoint manager.")]
        public enum ReturntemperaturesetpointinputtypeType
        {
        }
    }
    
    [JsonProperty("SetpointManager:ReturnTemperature:HotWater")]
    [Description(@"This setpoint manager is used to place a temperature setpoint on a plant supply outlet node based on a target return water setpoint. The setpoint manager attempts to achieve the desired return water temperature by adjusting the supply temperature setpoint based on the plant conditions at each system time step.")]
    public class SetpointManager_ReturnTemperature_HotWater
    {
        
        private void Constant;
        
        private void ReturnTemperatureSetpoint;
        
        private void Scheduled;
        

[JsonProperty("plant_loop_supply_outlet_node")]
public string plant_loop_supply_outlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_loop_supply_inlet_node")]
public string plant_loop_supply_inlet_node
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_supply_temperature_setpoint")]
public float minimum_supply_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)77;

[JsonProperty("maximum_supply_temperature_setpoint")]
public float maximum_supply_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)82;

[JsonProperty("return_temperature_setpoint_input_type")]
public ReturntemperaturesetpointinputtypeType return_temperature_setpoint_input_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_temperature_setpoint_constant_value")]
public float return_temperature_setpoint_constant_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)71;

[JsonProperty("return_temperature_setpoint_schedule_name")]
public string return_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This defines whether the hot water return temperature target is constant, schedul" +
            "ed, or specified on the supply inlet node by a separate setpoint manager.")]
        public enum ReturntemperaturesetpointinputtypeType
        {
        }
    }
}
namespace EnergyPlus.SimulationParameters
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Version")]
    [Description("Specifies the EnergyPlus version of the IDF file.")]
    public class Version
    {
        

[JsonProperty("version_identifier")]
public string version_identifier
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)9.5;
    }
    
    [JsonProperty("SimulationControl")]
    [Description(@"Note that the following 3 fields are related to the Sizing:Zone, Sizing:System, and Sizing:Plant objects. Having these fields set to Yes but no corresponding Sizing object will not cause the sizing to be done. However, having any of these fields set to No, the corresponding Sizing object is ignored. Note also, if you want to do system sizing, you must also do zone sizing in the same run or an error will result.")]
    public class SimulationControl
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("do_zone_sizing_calculation")]
public DozonesizingcalculationType do_zone_sizing_calculation
{
    get
    {
    }
    set
    {
    }
}
 = (DozonesizingcalculationType)No;

[JsonProperty("do_system_sizing_calculation")]
public DosystemsizingcalculationType do_system_sizing_calculation
{
    get
    {
    }
    set
    {
    }
}
 = (DosystemsizingcalculationType)No;

[JsonProperty("do_plant_sizing_calculation")]
public DoplantsizingcalculationType do_plant_sizing_calculation
{
    get
    {
    }
    set
    {
    }
}
 = (DoplantsizingcalculationType)No;

[JsonProperty("run_simulation_for_sizing_periods")]
public RunsimulationforsizingperiodsType run_simulation_for_sizing_periods
{
    get
    {
    }
    set
    {
    }
}
 = (RunsimulationforsizingperiodsType)Yes;

[JsonProperty("run_simulation_for_weather_file_run_periods")]
public RunsimulationforweatherfilerunperiodsType run_simulation_for_weather_file_run_periods
{
    get
    {
    }
    set
    {
    }
}
 = (RunsimulationforweatherfilerunperiodsType)Yes;

[JsonProperty("do_hvac_sizing_simulation_for_sizing_periods")]
public DohvacsizingsimulationforsizingperiodsType do_hvac_sizing_simulation_for_sizing_periods
{
    get
    {
    }
    set
    {
    }
}
 = (DohvacsizingsimulationforsizingperiodsType)No;

[JsonProperty("maximum_number_of_hvac_sizing_simulation_passes")]
public float maximum_number_of_hvac_sizing_simulation_passes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("If Yes, Zone sizing is accomplished from corresponding Sizing:Zone objects and au" +
            "tosize fields.")]
        public enum DozonesizingcalculationType
        {
        }
        
        [Description("If Yes, System sizing is accomplished from corresponding Sizing:System objects an" +
            "d autosize fields. If Yes, Zone sizing (previous field) must also be Yes.")]
        public enum DosystemsizingcalculationType
        {
        }
        
        [Description("If Yes, Plant sizing is accomplished from corresponding Sizing:Plant objects and " +
            "autosize fields.")]
        public enum DoplantsizingcalculationType
        {
        }
        
        [Description("If Yes, SizingPeriod:* objects are executed and results from those may be display" +
            "ed..")]
        public enum RunsimulationforsizingperiodsType
        {
        }
        
        [Description("If Yes, RunPeriod:* objects are executed and results from those may be displayed." +
            ".")]
        public enum RunsimulationforweatherfilerunperiodsType
        {
        }
        
        [Description("If Yes, SizingPeriod:* objects are exectuted additional times for advanced sizing" +
            ". Currently limited to use with coincident plant sizing, see Sizing:Plant object" +
            "")]
        public enum DohvacsizingsimulationforsizingperiodsType
        {
        }
    }
    
    [JsonProperty("PerformancePrecisionTradeoffs")]
    [Description("This object enables users to choose certain options that speed up EnergyPlus simu" +
        "lation, but may lead to small decreases in accuracy of results.")]
    public class PerformancePrecisionTradeoffs
    {
        
        private void No;
        
        private void Yes;
        
        private void CarrollMRT;
        
        private void ScriptF;
        
        private void Advanced;
        
        private void Mode01;
        
        private void Mode02;
        
        private void Mode03;
        
        private void Mode04;
        
        private void Mode05;
        
        private void Mode06;
        
        private void Mode07;
        
        private void Normal;
        

[JsonProperty("use_coil_direct_solutions")]
public UsecoildirectsolutionsType use_coil_direct_solutions
{
    get
    {
    }
    set
    {
    }
}
 = (UsecoildirectsolutionsType)No;

[JsonProperty("zone_radiant_exchange_algorithm")]
public ZoneradiantexchangealgorithmType zone_radiant_exchange_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneradiantexchangealgorithmType)ScriptF;

[JsonProperty("override_mode")]
public OverridemodeType override_mode
{
    get
    {
    }
    set
    {
    }
}
 = (OverridemodeType)Normal;

[JsonProperty("maxzonetempdiff")]
public float maxzonetempdiff
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("maxalloweddeltemp")]
public float maxalloweddeltemp
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002;
        
        [Description("If Yes, an analytical or empirical solution will be used to replace iterations in" +
            " the coil performance calculations.")]
        public enum UsecoildirectsolutionsType
        {
        }
        
        [Description("Determines which algorithm will be used to solve long wave radiant exchange among" +
            " surfaces within a zone.")]
        public enum ZoneradiantexchangealgorithmType
        {
        }
        
        [Description("The increasing mode number roughly correspond with increased speed. A description" +
            " of each mode are shown in the documentation. When Advanced is selected the N1 f" +
            "ield value is used.")]
        public enum OverridemodeType
        {
        }
    }
    
    [JsonProperty("Building")]
    [Description("Describes parameters that are used during the simulation of the building. There a" +
        "re necessary correlations between the entries for this object and some entries i" +
        "n the Site:WeatherStation and Site:HeightVariation objects, specifically the Ter" +
        "rain field.")]
    public class Building
    {
        
        private void City;
        
        private void Country;
        
        private void Ocean;
        
        private void Suburbs;
        
        private void Urban;
        
        private void FullExterior;
        
        private void FullExteriorWithReflections;
        
        private void FullInteriorAndExterior;
        
        private void FullInteriorAndExteriorWithReflections;
        
        private void MinimalShadowing;
        

[JsonProperty("north_axis")]
public float north_axis
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("terrain")]
public TerrainType terrain
{
    get
    {
    }
    set
    {
    }
}
 = (TerrainType)Suburbs;

[JsonProperty("loads_convergence_tolerance_value")]
public float loads_convergence_tolerance_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.04;

[JsonProperty("temperature_convergence_tolerance_value")]
public float temperature_convergence_tolerance_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("solar_distribution")]
public SolardistributionType solar_distribution
{
    get
    {
    }
    set
    {
    }
}
 = (SolardistributionType)FullExterior;

[JsonProperty("maximum_number_of_warmup_days")]
public float maximum_number_of_warmup_days
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25;

[JsonProperty("minimum_number_of_warmup_days")]
public float minimum_number_of_warmup_days
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description("Country=FlatOpenCountry | Suburbs=CountryTownsSuburbs | City=CityCenter | Ocean=b" +
            "ody of water (5km) | Urban=Urban-Industrial-Forest")]
        public enum TerrainType
        {
        }
        
        [Description("MinimalShadowing | FullExterior | FullInteriorAndExterior | FullExteriorWithRefle" +
            "ctions | FullInteriorAndExteriorWithReflections")]
        public enum SolardistributionType
        {
        }
    }
    
    [JsonProperty("ShadowCalculation")]
    [Description("This object is used to control details of the solar, shading, and daylighting mod" +
        "els")]
    public class ShadowCalculation
    {
        
        private void Imported;
        
        private void PixelCounting;
        
        private void PolygonClipping;
        
        private void Scheduled;
        
        private void Periodic;
        
        private void Timestep;
        
        private void ConvexWeilerAtherton;
        
        private void SlaterBarskyandSutherlandHodgman;
        
        private void SutherlandHodgman;
        
        private void DetailedSkyDiffuseModeling;
        
        private void SimpleSkyDiffuseModeling;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("shading_calculation_method")]
public ShadingcalculationmethodType shading_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (ShadingcalculationmethodType)PolygonClipping;

[JsonProperty("shading_calculation_update_frequency_method")]
public ShadingcalculationupdatefrequencymethodType shading_calculation_update_frequency_method
{
    get
    {
    }
    set
    {
    }
}
 = (ShadingcalculationupdatefrequencymethodType)Periodic;

[JsonProperty("shading_calculation_update_frequency")]
public float shading_calculation_update_frequency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("maximum_figures_in_shadow_overlap_calculations")]
public float maximum_figures_in_shadow_overlap_calculations
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15000;

[JsonProperty("polygon_clipping_algorithm")]
public PolygonclippingalgorithmType polygon_clipping_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (PolygonclippingalgorithmType)SutherlandHodgman;

[JsonProperty("pixel_counting_resolution")]
public float pixel_counting_resolution
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)512;

[JsonProperty("sky_diffuse_modeling_algorithm")]
public SkydiffusemodelingalgorithmType sky_diffuse_modeling_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (SkydiffusemodelingalgorithmType)SimpleSkyDiffuseModeling;

[JsonProperty("output_external_shading_calculation_results")]
public OutputexternalshadingcalculationresultsType output_external_shading_calculation_results
{
    get
    {
    }
    set
    {
    }
}
 = (OutputexternalshadingcalculationresultsType)No;

[JsonProperty("disable_self_shading_within_shading_zone_groups")]
public DisableselfshadingwithinshadingzonegroupsType disable_self_shading_within_shading_zone_groups
{
    get
    {
    }
    set
    {
    }
}
 = (DisableselfshadingwithinshadingzonegroupsType)No;

[JsonProperty("disable_self_shading_from_shading_zone_groups_to_other_zones")]
public DisableselfshadingfromshadingzonegroupstootherzonesType disable_self_shading_from_shading_zone_groups_to_other_zones
{
    get
    {
    }
    set
    {
    }
}
 = (DisableselfshadingfromshadingzonegroupstootherzonesType)No;

[JsonProperty("shading_zone_groups")]
public string shading_zone_groups
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Select between CPU-based polygon clipping method, the GPU-based pixel counting method, or importing from external shading data. If PixelCounting is selected and GPU hardware (or GPU emulation) is not available, a warning will be displayed and EnergyPlus will revert to PolygonClipping. If Scheduled is chosen, the External Shading Fraction Schedule Name is required in SurfaceProperty:LocalEnvironment. If Imported is chosen, the Schedule:File:Shading object is required.")]
        public enum ShadingcalculationmethodType
        {
        }
        
        [Description("choose calculation frequency method. note that Timestep is only needed for certai" +
            "n cases and can increase execution time significantly.")]
        public enum ShadingcalculationupdatefrequencymethodType
        {
        }
        
        [Description("Advanced Feature. Internal default is SutherlandHodgman Refer to InputOutput Refe" +
            "rence and Engineering Reference for more information")]
        public enum PolygonclippingalgorithmType
        {
        }
        
        [Description("Advanced Feature. Internal default is SimpleSkyDiffuseModeling If you have shadin" +
            "g elements that change transmittance over the year, you may wish to choose the d" +
            "etailed method. Refer to InputOutput Reference and Engineering Reference for mor" +
            "e information")]
        public enum SkydiffusemodelingalgorithmType
        {
        }
        
        [Description("If Yes is chosen, the calculated external shading fraction results will be saved " +
            "to an external CSV file with surface names as the column headers.")]
        public enum OutputexternalshadingcalculationresultsType
        {
        }
        
        [Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to surfaces within the same Shading Zone Group. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
        public enum DisableselfshadingwithinshadingzonegroupsType
        {
        }
        
        [Description(@"If Yes, self-shading will be disabled from all exterior surfaces in a given Shading Zone Group to all other zones in the model. If both Disable Self-Shading Within Shading Zone Groups and Disable Self-Shading From Shading Zone Groups to Other Zones = Yes, then all self-shading from exterior surfaces will be disabled. If only one of these fields = Yes, then at least one Shading Zone Group must be specified, or this field will be ignored. Shading from Shading:* surfaces, overhangs, fins, and reveals will not be disabled.")]
        public enum DisableselfshadingfromshadingzonegroupstootherzonesType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Inside")]
    [Description("Default indoor surface heat transfer convection algorithm to be used for all zone" +
        "s")]
    public class SurfaceConvectionAlgorithm_Inside
    {
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void CeilingDiffuser;
        
        private void Simple;
        
        private void TARP;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)TARP;
        
        [Description(@"Simple = constant value natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE, Walton) CeilingDiffuser = ACH-based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions ASTMC1340 = mixed convection correlations based on heat flow direction, surface tilt angle, surface characteristic length, and air speed past the surface.")]
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("SurfaceConvectionAlgorithm:Outside")]
    [Description("Default outside surface heat transfer convection algorithm to be used for all zon" +
        "es")]
    public class SurfaceConvectionAlgorithm_Outside
    {
        
        private void AdaptiveConvectionAlgorithm;
        
        private void DOE-2;
        
        private void MoWiTT;
        
        private void SimpleCombined;
        
        private void TARP;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)DOE-2;
        
        [Description(@"SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("HeatBalanceAlgorithm")]
    [Description(@"Determines which Heat Balance Algorithm will be used ie. CTF (Conduction Transfer Functions), EMPD (Effective Moisture Penetration Depth with Conduction Transfer Functions). Advanced/Research Usage: CondFD (Conduction Finite Difference) Advanced/Research Usage: ConductionFiniteDifferenceSimplified Advanced/Research Usage: HAMT (Combined Heat And Moisture Finite Element)")]
    public class HeatBalanceAlgorithm
    {
        
        private void CombinedHeatAndMoistureFiniteElement;
        
        private void ConductionFiniteDifference;
        
        private void ConductionTransferFunction;
        
        private void MoisturePenetrationDepthConductionTransferFunction;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ConductionTransferFunction;

[JsonProperty("surface_temperature_upper_limit")]
public float surface_temperature_upper_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)200;

[JsonProperty("minimum_surface_convection_heat_transfer_coefficient_value")]
public float minimum_surface_convection_heat_transfer_coefficient_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("maximum_surface_convection_heat_transfer_coefficient_value")]
public float maximum_surface_convection_heat_transfer_coefficient_value
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1000;
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("HeatBalanceSettings:ConductionFiniteDifference")]
    [Description("Determines settings for the Conduction Finite Difference algorithm for surface he" +
        "at transfer modeling.")]
    public class HeatBalanceSettings_ConductionFiniteDifference
    {
        
        private void CrankNicholsonSecondOrder;
        
        private void FullyImplicitFirstOrder;
        

[JsonProperty("difference_scheme")]
public DifferenceschemeType difference_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (DifferenceschemeType)FullyImplicitFirstOrder;

[JsonProperty("space_discretization_constant")]
public float space_discretization_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("relaxation_factor")]
public float relaxation_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("inside_face_surface_temperature_convergence_criteria")]
public float inside_face_surface_temperature_convergence_criteria
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002;
        
        public enum DifferenceschemeType
        {
        }
    }
    
    [JsonProperty("ZoneAirHeatBalanceAlgorithm")]
    [Description("Determines which algorithm will be used to solve the zone air heat balance.")]
    public class ZoneAirHeatBalanceAlgorithm
    {
        
        private void AnalyticalSolution;
        
        private void EulerMethod;
        
        private void ThirdOrderBackwardDifference;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)ThirdOrderBackwardDifference;
        
        public enum AlgorithmType
        {
        }
    }
    
    [JsonProperty("ZoneAirContaminantBalance")]
    [Description("Determines which contaminant concentration will be simulates.")]
    public class ZoneAirContaminantBalance
    {
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("carbon_dioxide_concentration")]
public CarbondioxideconcentrationType carbon_dioxide_concentration
{
    get
    {
    }
    set
    {
    }
}
 = (CarbondioxideconcentrationType)No;

[JsonProperty("outdoor_carbon_dioxide_schedule_name")]
public string outdoor_carbon_dioxide_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generic_contaminant_concentration")]
public GenericcontaminantconcentrationType generic_contaminant_concentration
{
    get
    {
    }
    set
    {
    }
}
 = (GenericcontaminantconcentrationType)No;

[JsonProperty("outdoor_generic_contaminant_schedule_name")]
public string outdoor_generic_contaminant_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("If Yes, CO2 simulation will be performed.")]
        public enum CarbondioxideconcentrationType
        {
        }
        
        [Description("If Yes, generic contaminant simulation will be performed.")]
        public enum GenericcontaminantconcentrationType
        {
        }
    }
    
    [JsonProperty("ZoneAirMassFlowConservation")]
    [Description(@"Enforces the zone air mass flow balance by either adjusting zone mixing object flow only, adjusting zone total return flow only, zone mixing and the zone total return flows, or adjusting the zone total return and zone mixing object flows. Zone infiltration flow air flow is increased or decreased depending user selection in the infiltration treatment method. If either of zone mixing or zone return flow adjusting methods or infiltration is active, then the zone air mass flow balance calculation will attempt to enforce conservation of mass for each zone. If flow balancing method is ""None"" and infiltration is ""None"", then the zone air mass flow calculation defaults to assume self-balanced simple flow mixing and infiltration objects.")]
    public class ZoneAirMassFlowConservation
    {
        
        private void AdjustMixingOnly;
        
        private void AdjustMixingThenReturn;
        
        private void AdjustReturnOnly;
        
        private void AdjustReturnThenMixing;
        
        private void None;
        
        private void AddInfiltrationFlow;
        
        private void AdjustInfiltrationFlow;
        
        private void None;
        
        private void AllZones;
        
        private void MixingSourceZonesOnly;
        

[JsonProperty("adjust_zone_mixing_and_return_for_air_mass_flow_balance")]
public AdjustzonemixingandreturnforairmassflowbalanceType adjust_zone_mixing_and_return_for_air_mass_flow_balance
{
    get
    {
    }
    set
    {
    }
}
 = (AdjustzonemixingandreturnforairmassflowbalanceType)None;

[JsonProperty("infiltration_balancing_method")]
public InfiltrationbalancingmethodType infiltration_balancing_method
{
    get
    {
    }
    set
    {
    }
}
 = (InfiltrationbalancingmethodType)AddInfiltrationFlow;

[JsonProperty("infiltration_balancing_zones")]
public InfiltrationbalancingzonesType infiltration_balancing_zones
{
    get
    {
    }
    set
    {
    }
}
 = (InfiltrationbalancingzonesType)MixingSourceZonesOnly;
        
        [Description(@"If ""AdjustMixingOnly"", zone mixing object flow rates are adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustReturnOnly"", zone total return flow rate is adjusted to balance the zone air mass flow and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustMixingThenReturn"", first the zone mixing objects flow rates are adjusted to balance the zone air flow, second zone total return flow rate is adjusted and zone infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow. If ""AdjustReturnThenMixing"", first zone total return flow rate is adjusted to balance the zone air flow, second the zone mixing object flow rates are adjusted and infiltration air flow may be increased or decreased if required in order to balance the zone air mass flow.")]
        public enum AdjustzonemixingandreturnforairmassflowbalanceType
        {
        }
        
        [Description(@"This input field allows user to choose how zone infiltration flow is treated during the zone air mass flow balance calculation. AddInfiltrationFlow may add infiltration to the base flow specified in the infiltration object to balance the zone air mass flow. The additional infiltration air mass flow is not self-balanced. The base flow is assumed to be self-balanced. AdjustInfiltrationFlow may adjust the base flow calculated using the base flow specified in the infiltration object to balance the zone air mass flow. If it If no adjustment is required, then the base infiltration is assumed to be self-balanced. None will make no changes to the base infiltration flow.")]
        public enum InfiltrationbalancingmethodType
        {
        }
        
        [Description(@"This input field allows user to choose which zones are included in infiltration balancing. MixingSourceZonesOnly allows infiltration balancing only in zones which as source zones for mixing which also have an infiltration object defined. AllZones allows infiltration balancing in any zone which has an infiltration object defined.")]
        public enum InfiltrationbalancingzonesType
        {
        }
    }
    
    [JsonProperty("ZoneCapacitanceMultiplier:ResearchSpecial")]
    [Description("Multiplier altering the relative capacitance of the air compared to an empty zone" +
        "")]
    public class ZoneCapacitanceMultiplier_ResearchSpecial
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_capacity_multiplier")]
public float temperature_capacity_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("humidity_capacity_multiplier")]
public float humidity_capacity_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("carbon_dioxide_capacity_multiplier")]
public float carbon_dioxide_capacity_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("generic_contaminant_capacity_multiplier")]
public float generic_contaminant_capacity_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("Timestep")]
    [Description("Specifies the \"basic\" timestep for the simulation. The value entered here is also" +
        " known as the Zone Timestep. This is used in the Zone Heat Balance Model calcula" +
        "tion as the driving timestep for heat transfer and load calculations.")]
    public class Timestep
    {
        

[JsonProperty("number_of_timesteps_per_hour")]
public float number_of_timesteps_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;
    }
    
    [JsonProperty("ConvergenceLimits")]
    [Description("Specifies limits on HVAC system simulation timesteps and iterations. This item is" +
        " an advanced feature that should be used only with caution.")]
    public class ConvergenceLimits
    {
        

[JsonProperty("minimum_system_timestep")]
public float minimum_system_timestep
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hvac_iterations")]
public float maximum_hvac_iterations
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)20;

[JsonProperty("minimum_plant_iterations")]
public float minimum_plant_iterations
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("maximum_plant_iterations")]
public float maximum_plant_iterations
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)8;
    }
    
    [JsonProperty("HVACSystemRootFindingAlgorithm")]
    [Description("Specifies a HVAC system solver algorithm to find a root")]
    public class HVACSystemRootFindingAlgorithm
    {
        
        private void Alternation;
        
        private void Bisection;
        
        private void BisectionThenRegulaFalsi;
        
        private void RegulaFalsi;
        
        private void RegulaFalsiThenBisection;
        

[JsonProperty("algorithm")]
public AlgorithmType algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (AlgorithmType)RegulaFalsi;

[JsonProperty("number_of_iterations_before_algorithm_switch")]
public float number_of_iterations_before_algorithm_switch
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;
        
        public enum AlgorithmType
        {
        }
    }
}
namespace EnergyPlus.SolarCollectors
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("SolarCollectorPerformance:FlatPlate")]
    [Description(@"Thermal and optical performance parameters for a single flat plate solar collector module. These parameters are based on the testing methodologies described in ASHRAE Standards 93 and 96 which are used Solar Rating and Certification Corporation (SRCC) Directory of SRCC Certified Solar Collector Ratings. See EnergyPlus DataSets file SolarCollectors.idf.")]
    public class SolarCollectorPerformance_FlatPlate
    {
        
        private void Water;
        
        private void Average;
        
        private void Inlet;
        
        private void Outlet;
        

[JsonProperty("gross_area")]
public float gross_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("test_fluid")]
public TestfluidType test_fluid
{
    get
    {
    }
    set
    {
    }
}
 = (TestfluidType)Water;

[JsonProperty("test_flow_rate")]
public float test_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("test_correlation_type")]
public TestcorrelationtypeType test_correlation_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_1_of_efficiency_equation")]
public float coefficient_1_of_efficiency_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_efficiency_equation")]
public float coefficient_2_of_efficiency_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_efficiency_equation")]
public float coefficient_3_of_efficiency_equation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_2_of_incident_angle_modifier")]
public float coefficient_2_of_incident_angle_modifier
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coefficient_3_of_incident_angle_modifier")]
public float coefficient_3_of_incident_angle_modifier
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TestfluidType
        {
        }
        
        public enum TestcorrelationtypeType
        {
        }
    }
    
    [JsonProperty("SolarCollector:FlatPlate:Water")]
    [Description(@"Flat plate water solar collector (single glazed, unglazed, or evacuated tube). Thermal and optical properties are taken from the referenced SolarCollectorPerformance:FlatPlate object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    public class SolarCollector_FlatPlate_Water
    {
        

[JsonProperty("solarcollectorperformance_name")]
public string solarcollectorperformance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public float maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("SolarCollector:FlatPlate:PhotovoltaicThermal")]
    [Description("Models hybrid photovoltaic-thermal (PVT) solar collectors that convert incident s" +
        "olar energy into both electricity and useful thermal energy by heating air or wa" +
        "ter.")]
    public class SolarCollector_FlatPlate_PhotovoltaicThermal
    {
        
        private void Air;
        
        private void Water;
        

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("photovoltaic_thermal_model_performance_name")]
public string photovoltaic_thermal_model_performance_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("photovoltaic_name")]
public string photovoltaic_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_working_fluid_type")]
public ThermalworkingfluidtypeType thermal_working_fluid_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public string design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ThermalworkingfluidtypeType
        {
        }
    }
    
    [JsonProperty("SolarCollectorPerformance:PhotovoltaicThermal:Simple")]
    [Description("Thermal performance parameters for a hybrid photovoltaic-thermal (PVT) solar coll" +
        "ector.")]
    public class SolarCollectorPerformance_PhotovoltaicThermal_Simple
    {
        
        private void Fixed;
        
        private void Scheduled;
        

[JsonProperty("fraction_of_surface_area_with_active_thermal_collector")]
public float fraction_of_surface_area_with_active_thermal_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conversion_efficiency_input_mode_type")]
public ThermalconversionefficiencyinputmodetypeType thermal_conversion_efficiency_input_mode_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("value_for_thermal_conversion_efficiency_if_fixed")]
public float value_for_thermal_conversion_efficiency_if_fixed
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conversion_efficiency_schedule_name")]
public string thermal_conversion_efficiency_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_surface_emittance")]
public float front_surface_emittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;
        
        public enum ThermalconversionefficiencyinputmodetypeType
        {
        }
    }
    
    [JsonProperty("SolarCollector:IntegralCollectorStorage")]
    [Description(@"Glazed solar collector with integral storage unit. Thermal and optical properties are taken from the referenced SolarCollectorPerformance:IntegralCollectorStorage object. Collector tilt, azimuth, and gross area are taken from the referenced building surface or shading surface. The collector surface participates normally in all shading calculations.")]
    public class SolarCollector_IntegralCollectorStorage
    {
        
        private void AmbientAir;
        
        private void OtherSideConditionsModel;
        

[JsonProperty("integralcollectorstorageparameters_name")]
public string integralcollectorstorageparameters_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name")]
public string surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("bottom_surface_boundary_conditions_type")]
public BottomsurfaceboundaryconditionstypeType bottom_surface_boundary_conditions_type
{
    get
    {
    }
    set
    {
    }
}
 = (BottomsurfaceboundaryconditionstypeType)AmbientAir;

[JsonProperty("boundary_condition_model_name")]
public string boundary_condition_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_flow_rate")]
public float maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BottomsurfaceboundaryconditionstypeType
        {
        }
    }
    
    [JsonProperty("SolarCollectorPerformance:IntegralCollectorStorage")]
    [Description("Thermal and optical performance parameters for a single glazed solar collector wi" +
        "th integral storage unit.")]
    public class SolarCollectorPerformance_IntegralCollectorStorage
    {
        
        private void RectangularTank;
        

[JsonProperty("ics_collector_type")]
public IcscollectortypeType ics_collector_type
{
    get
    {
    }
    set
    {
    }
}
 = (IcscollectortypeType)RectangularTank;

[JsonProperty("gross_area")]
public float gross_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collector_water_volume")]
public float collector_water_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("bottom_heat_loss_conductance")]
public float bottom_heat_loss_conductance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("side_heat_loss_conductance")]
public float side_heat_loss_conductance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.6;

[JsonProperty("aspect_ratio")]
public float aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("collector_side_height")]
public float collector_side_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("thermal_mass_of_absorber_plate")]
public float thermal_mass_of_absorber_plate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("number_of_covers")]
public float number_of_covers
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("cover_spacing")]
public float cover_spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("refractive_index_of_outer_cover")]
public float refractive_index_of_outer_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.526;

[JsonProperty("extinction_coefficient_times_thickness_of_outer_cover")]
public float extinction_coefficient_times_thickness_of_outer_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.045;

[JsonProperty("emissivity_of_outer_cover")]
public float emissivity_of_outer_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.88;

[JsonProperty("refractive_index_of_inner_cover")]
public float refractive_index_of_inner_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.37;

[JsonProperty("extinction_coefficient_times_thickness_of_the_inner_cover")]
public float extinction_coefficient_times_thickness_of_the_inner_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.008;

[JsonProperty("emissivity_of_inner_cover")]
public float emissivity_of_inner_cover
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.88;

[JsonProperty("absorptance_of_absorber_plate")]
public float absorptance_of_absorber_plate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.96;

[JsonProperty("emissivity_of_absorber_plate")]
public float emissivity_of_absorber_plate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;
        
        [Description("Currently only RectangularTank ICS collector type is available.")]
        public enum IcscollectortypeType
        {
        }
    }
    
    [JsonProperty("SolarCollector:UnglazedTranspired")]
    [Description(@"Unglazed transpired solar collector (UTSC) used to condition outdoor air. This type of collector is generally used to heat air drawn through perforated absorbers and also recover heat conducted out through the underlying surface. This object represents a single collector attached to one or more building or shading surfaces and to one or more outdoor air systems.")]
    public class SolarCollector_UnglazedTranspired
    {
        
        private void Square;
        
        private void Triangle;
        
        private void Kutscher1994;
        
        private void VanDeckerHollandsBrunger2001;
        
        private void MediumRough;
        
        private void MediumSmooth;
        
        private void Rough;
        
        private void Smooth;
        
        private void VeryRough;
        
        private void VerySmooth;
        

[JsonProperty("boundary_conditions_model_name")]
public string boundary_conditions_model_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_node_name")]
public string setpoint_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_node_name")]
public string zone_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("free_heating_setpoint_schedule_name")]
public string free_heating_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diameter_of_perforations_in_collector")]
public float diameter_of_perforations_in_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_between_perforations_in_collector")]
public float distance_between_perforations_in_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_emissivity_of_collector_surface")]
public float thermal_emissivity_of_collector_surface
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_absorbtivity_of_collector_surface")]
public float solar_absorbtivity_of_collector_surface
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_overall_height_of_collector")]
public float effective_overall_height_of_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_gap_thickness_of_plenum_behind_collector")]
public float effective_gap_thickness_of_plenum_behind_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_cross_section_area_of_plenum_behind_collector")]
public float effective_cross_section_area_of_plenum_behind_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hole_layout_pattern_for_pitch")]
public HolelayoutpatternforpitchType hole_layout_pattern_for_pitch
{
    get
    {
    }
    set
    {
    }
}
 = (HolelayoutpatternforpitchType)Square;

[JsonProperty("heat_exchange_effectiveness_correlation")]
public HeatexchangeeffectivenesscorrelationType heat_exchange_effectiveness_correlation
{
    get
    {
    }
    set
    {
    }
}
 = (HeatexchangeeffectivenesscorrelationType)Kutscher1994;

[JsonProperty("ratio_of_actual_collector_surface_area_to_projected_surface_area")]
public float ratio_of_actual_collector_surface_area_to_projected_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("roughness_of_collector")]
public RoughnessofcollectorType roughness_of_collector
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collector_thickness")]
public float collector_thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effectiveness_for_perforations_with_respect_to_wind")]
public float effectiveness_for_perforations_with_respect_to_wind
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;

[JsonProperty("discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow")]
public float discharge_coefficient_for_openings_with_respect_to_buoyancy_driven_flow
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HolelayoutpatternforpitchType
        {
        }
        
        public enum HeatexchangeeffectivenesscorrelationType
        {
        }
        
        public enum RoughnessofcollectorType
        {
        }
    }
    
    [JsonProperty("SolarCollector:UnglazedTranspired:Multisystem")]
    [Description("quad-tuples of inlet, outlet, control, and zone nodes for multiple different outd" +
        "oor air systems attached to same collector")]
    public class SolarCollector_UnglazedTranspired_Multisystem
    {
        

[JsonProperty("solar_collector_name")]
public string solar_collector_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("systems")]
public string systems
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.SurfaceConstructionElements
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("Material")]
    [Description("Regular materials described with full set of thermal properties")]
    public class Material
    {
        
        private void MediumRough;
        
        private void MediumSmooth;
        
        private void Rough;
        
        private void Smooth;
        
        private void VeryRough;
        
        private void VerySmooth;
        

[JsonProperty("roughness")]
public RoughnessType roughness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("density")]
public float density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat")]
public float specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_absorptance")]
public float thermal_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("solar_absorptance")]
public float solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("visible_absorptance")]
public float visible_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;
        
        public enum RoughnessType
        {
        }
    }
    
    [JsonProperty("Material:NoMass")]
    [Description("Regular materials properties described whose principal description is R (Thermal " +
        "Resistance)")]
    public class Material_NoMass
    {
        
        private void MediumRough;
        
        private void MediumSmooth;
        
        private void Rough;
        
        private void Smooth;
        
        private void VeryRough;
        
        private void VerySmooth;
        

[JsonProperty("roughness")]
public RoughnessType roughness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_resistance")]
public float thermal_resistance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_absorptance")]
public float thermal_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("solar_absorptance")]
public float solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("visible_absorptance")]
public float visible_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;
        
        public enum RoughnessType
        {
        }
    }
    
    [JsonProperty("Material:InfraredTransparent")]
    [Description(@"Special infrared transparent material. Similar to a Material:Nomass with low thermal resistance. High absorptance in both wavelengths. Area will be doubled internally to make internal radiant exchange accurate. Should be only material in single layer surface construction. All thermal properties are set internally. User needs only to supply name. Cannot be used with ConductionFiniteDifference solution algorithms")]
    public class Material_InfraredTransparent
    {
    }
    
    [JsonProperty("Material:AirGap")]
    [Description("Air Space in Opaque Construction")]
    public class Material_AirGap
    {
        

[JsonProperty("thermal_resistance")]
public float thermal_resistance
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Material:RoofVegetation")]
    [Description(@"EcoRoof model, plant layer plus soil layer Implemented by Portland State University (Sailor et al., January, 2007) only one material must be referenced per simulation though the same EcoRoof material could be used in multiple constructions. New moisture redistribution scheme (2010) requires higher number of timesteps per hour (minimum 12 recommended).")]
    public class Material_RoofVegetation
    {
        
        private void MediumRough;
        
        private void MediumSmooth;
        
        private void Rough;
        
        private void Smooth;
        
        private void VeryRough;
        
        private void VerySmooth;
        
        private void Advanced;
        
        private void Simple;
        

[JsonProperty("height_of_plants")]
public float height_of_plants
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("leaf_area_index")]
public float leaf_area_index
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("leaf_reflectivity")]
public float leaf_reflectivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.22;

[JsonProperty("leaf_emissivity")]
public float leaf_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.95;

[JsonProperty("minimum_stomatal_resistance")]
public float minimum_stomatal_resistance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;

[JsonProperty("soil_layer_name")]
public string soil_layer_name
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Green Roof Soil;

[JsonProperty("roughness")]
public RoughnessType roughness
{
    get
    {
    }
    set
    {
    }
}
 = (RoughnessType)MediumRough;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("conductivity_of_dry_soil")]
public float conductivity_of_dry_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("density_of_dry_soil")]
public float density_of_dry_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1100;

[JsonProperty("specific_heat_of_dry_soil")]
public float specific_heat_of_dry_soil
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1200;

[JsonProperty("thermal_absorptance")]
public float thermal_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("solar_absorptance")]
public float solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("visible_absorptance")]
public float visible_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.75;

[JsonProperty("saturation_volumetric_moisture_content_of_the_soil_layer")]
public float saturation_volumetric_moisture_content_of_the_soil_layer
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("residual_volumetric_moisture_content_of_the_soil_layer")]
public float residual_volumetric_moisture_content_of_the_soil_layer
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("initial_volumetric_moisture_content_of_the_soil_layer")]
public float initial_volumetric_moisture_content_of_the_soil_layer
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("moisture_diffusion_calculation_method")]
public MoisturediffusioncalculationmethodType moisture_diffusion_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (MoisturediffusioncalculationmethodType)Advanced;
        
        public enum RoughnessType
        {
        }
        
        [Description("Advanced calculation requires increased number of timesteps (recommended >20).")]
        public enum MoisturediffusioncalculationmethodType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:SimpleGlazingSystem")]
    [Description("Alternate method of describing windows This window material object is used to def" +
        "ine an entire glazing system using simple performance parameters.")]
    public class WindowMaterial_SimpleGlazingSystem
    {
        

[JsonProperty("u_factor")]
public float u_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_heat_gain_coefficient")]
public float solar_heat_gain_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_transmittance")]
public float visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WindowMaterial:Glazing")]
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    public class WindowMaterial_Glazing
    {
        
        private void BSDF;
        
        private void Spectral;
        
        private void SpectralAndAngle;
        
        private void SpectralAverage;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("optical_data_type")]
public OpticaldatatypeType optical_data_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("window_glass_spectral_data_set_name")]
public string window_glass_spectral_data_set_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_transmittance_at_normal_incidence")]
public float solar_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_solar_reflectance_at_normal_incidence")]
public float front_side_solar_reflectance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_solar_reflectance_at_normal_incidence")]
public float back_side_solar_reflectance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_transmittance_at_normal_incidence")]
public float visible_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_visible_reflectance_at_normal_incidence")]
public float front_side_visible_reflectance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_visible_reflectance_at_normal_incidence")]
public float back_side_visible_reflectance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("infrared_transmittance_at_normal_incidence")]
public float infrared_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_infrared_hemispherical_emissivity")]
public float front_side_infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("back_side_infrared_hemispherical_emissivity")]
public float back_side_infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("dirt_correction_factor_for_solar_and_visible_transmittance")]
public float dirt_correction_factor_for_solar_and_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("solar_diffusing")]
public SolardiffusingType solar_diffusing
{
    get
    {
    }
    set
    {
    }
}
 = (SolardiffusingType)No;

[JsonProperty("young_s_modulus")]
public float young_s_modulus
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)72000000000;

[JsonProperty("poisson_s_ratio")]
public float poisson_s_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.22;

[JsonProperty("window_glass_spectral_and_incident_angle_transmittance_data_set_table_name")]
public string window_glass_spectral_and_incident_angle_transmittance_data_set_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("window_glass_spectral_and_incident_angle_front_reflectance_data_set_table_name")]
public string window_glass_spectral_and_incident_angle_front_reflectance_data_set_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("window_glass_spectral_and_incident_angle_back_reflectance_data_set_table_name")]
public string window_glass_spectral_and_incident_angle_back_reflectance_data_set_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OpticaldatatypeType
        {
        }
        
        public enum SolardiffusingType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:GlazingGroup:Thermochromic")]
    [Description("thermochromic glass at different temperatures")]
    public class WindowMaterial_GlazingGroup_Thermochromic
    {
        

[JsonProperty("temperature_data")]
public string temperature_data
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WindowMaterial:Glazing:RefractionExtinctionMethod")]
    [Description("Glass material properties for Windows or Glass Doors Index of Refraction/Extincti" +
        "on Coefficient input method Not to be used for coated glass")]
    public class WindowMaterial_Glazing_RefractionExtinctionMethod
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_index_of_refraction")]
public float solar_index_of_refraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_extinction_coefficient")]
public float solar_extinction_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_index_of_refraction")]
public float visible_index_of_refraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_extinction_coefficient")]
public float visible_extinction_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("infrared_transmittance_at_normal_incidence")]
public float infrared_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("infrared_hemispherical_emissivity")]
public float infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("dirt_correction_factor_for_solar_and_visible_transmittance")]
public float dirt_correction_factor_for_solar_and_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("solar_diffusing")]
public SolardiffusingType solar_diffusing
{
    get
    {
    }
    set
    {
    }
}
 = (SolardiffusingType)No;
        
        public enum SolardiffusingType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Gas")]
    [Description("Gas material properties that are used in Windows or Glass Doors")]
    public class WindowMaterial_Gas
    {
        
        private void Air;
        
        private void Argon;
        
        private void Custom;
        
        private void Krypton;
        
        private void Xenon;
        

[JsonProperty("gas_type")]
public GastypeType gas_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_a")]
public float conductivity_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_b")]
public float conductivity_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_c")]
public float conductivity_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_a")]
public float viscosity_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_b")]
public float viscosity_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_c")]
public float viscosity_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_a")]
public float specific_heat_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_b")]
public float specific_heat_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_c")]
public float specific_heat_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("molecular_weight")]
public float molecular_weight
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_ratio")]
public float specific_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum GastypeType
        {
        }
    }
    
    [JsonProperty("WindowGap:SupportPillar")]
    [Description("used to define pillar geometry for support pillars")]
    public class WindowGap_SupportPillar
    {
        

[JsonProperty("spacing")]
public float spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.04;

[JsonProperty("radius")]
public float radius
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0004;
    }
    
    [JsonProperty("WindowGap:DeflectionState")]
    [Description("Used to enter data describing deflection state of the gap. It is referenced from " +
        "WindowMaterial:Gap object only and it is used only when deflection model is set " +
        "to MeasuredDeflection, otherwise it is ignored.")]
    public class WindowGap_DeflectionState
    {
        

[JsonProperty("deflected_thickness")]
public float deflected_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_temperature")]
public float initial_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25;

[JsonProperty("initial_pressure")]
public float initial_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)101325;
    }
    
    [JsonProperty("WindowMaterial:GasMixture")]
    [Description("Gas mixtures that are used in Windows or Glass Doors")]
    public class WindowMaterial_GasMixture
    {
        
        private void Air;
        
        private void Argon;
        
        private void Krypton;
        
        private void Xenon;
        
        private void Air;
        
        private void Argon;
        
        private void Krypton;
        
        private void Xenon;
        
        private void Air;
        
        private void Argon;
        
        private void Krypton;
        
        private void Xenon;
        
        private void Air;
        
        private void Argon;
        
        private void Krypton;
        
        private void Xenon;
        

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_gases_in_mixture")]
public float number_of_gases_in_mixture
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_1_type")]
public GastypeType gas_1_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_1_fraction")]
public float gas_1_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_2_type")]
public GastypeType gas_2_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_2_fraction")]
public float gas_2_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_3_type")]
public GastypeType gas_3_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_3_fraction")]
public float gas_3_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_4_type")]
public GastypeType gas_4_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_4_fraction")]
public float gas_4_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum GastypeType
        {
        }
        
        public enum GastypeType
        {
        }
        
        public enum GastypeType
        {
        }
        
        public enum GastypeType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Gap")]
    [Description(@"Used to define the gap between two layers in a complex fenestration system, where the Construction:ComplexFenestrationState object is used. It is referenced as a layer in the Construction:ComplexFenestrationState object. It cannot be referenced as a layer from the Construction object.")]
    public class WindowMaterial_Gap
    {
        

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gas_or_gas_mixture_")]
public string gas_or_gas_mixture_
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure")]
public float pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)101325;

[JsonProperty("deflection_state")]
public string deflection_state
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("support_pillar")]
public string support_pillar
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WindowMaterial:Shade")]
    [Description(@"Specifies the properties of window shade materials. Reflectance and emissivity properties are assumed to be the same on both sides of the shade. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence.")]
    public class WindowMaterial_Shade
    {
        

[JsonProperty("solar_transmittance")]
public float solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_reflectance")]
public float solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_transmittance")]
public float visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_reflectance")]
public float visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("infrared_hemispherical_emissivity")]
public float infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("infrared_transmittance")]
public float infrared_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shade_to_glass_distance")]
public float shade_to_glass_distance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("top_opening_multiplier")]
public float top_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("bottom_opening_multiplier")]
public float bottom_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("left_side_opening_multiplier")]
public float left_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("right_side_opening_multiplier")]
public float right_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("airflow_permeability")]
public float airflow_permeability
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("WindowMaterial:ComplexShade")]
    [Description("Complex window shading layer thermal properties")]
    public class WindowMaterial_ComplexShade
    {
        
        private void BSDF;
        
        private void OtherShadingType;
        
        private void Perforated;
        
        private void VenetianHorizontal;
        
        private void VenetianVertical;
        
        private void Woven;
        

[JsonProperty("layer_type")]
public LayertypeType layer_type
{
    get
    {
    }
    set
    {
    }
}
 = (LayertypeType)OtherShadingType;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.002;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("ir_transmittance")]
public float ir_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_emissivity")]
public float front_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("back_emissivity")]
public float back_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("top_opening_multiplier")]
public float top_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("bottom_opening_multiplier")]
public float bottom_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("left_side_opening_multiplier")]
public float left_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("right_side_opening_multiplier")]
public float right_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_opening_multiplier")]
public float front_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("slat_width")]
public float slat_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.016;

[JsonProperty("slat_spacing")]
public float slat_spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.012;

[JsonProperty("slat_thickness")]
public float slat_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0006;

[JsonProperty("slat_angle")]
public float slat_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("slat_conductivity")]
public float slat_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)160;

[JsonProperty("slat_curve")]
public float slat_curve
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum LayertypeType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Blind")]
    [Description("Window blind thermal properties")]
    public class WindowMaterial_Blind
    {
        
        private void Horizontal;
        
        private void Vertical;
        

[JsonProperty("slat_orientation")]
public SlatorientationType slat_orientation
{
    get
    {
    }
    set
    {
    }
}
 = (SlatorientationType)Horizontal;

[JsonProperty("slat_width")]
public float slat_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_separation")]
public float slat_separation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_thickness")]
public float slat_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00025;

[JsonProperty("slat_angle")]
public float slat_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)45;

[JsonProperty("slat_conductivity")]
public float slat_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)221;

[JsonProperty("slat_beam_solar_transmittance")]
public float slat_beam_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_beam_solar_reflectance")]
public float front_side_slat_beam_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_beam_solar_reflectance")]
public float back_side_slat_beam_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_diffuse_solar_transmittance")]
public float slat_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_diffuse_solar_reflectance")]
public float front_side_slat_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_diffuse_solar_reflectance")]
public float back_side_slat_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_beam_visible_transmittance")]
public float slat_beam_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_slat_beam_visible_reflectance")]
public float front_side_slat_beam_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_beam_visible_reflectance")]
public float back_side_slat_beam_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_diffuse_visible_transmittance")]
public float slat_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_diffuse_visible_reflectance")]
public float front_side_slat_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_diffuse_visible_reflectance")]
public float back_side_slat_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_infrared_hemispherical_transmittance")]
public float slat_infrared_hemispherical_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_infrared_hemispherical_emissivity")]
public float front_side_slat_infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("back_side_slat_infrared_hemispherical_emissivity")]
public float back_side_slat_infrared_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("blind_to_glass_distance")]
public float blind_to_glass_distance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("blind_top_opening_multiplier")]
public float blind_top_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("blind_bottom_opening_multiplier")]
public float blind_bottom_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("blind_left_side_opening_multiplier")]
public float blind_left_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("blind_right_side_opening_multiplier")]
public float blind_right_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("minimum_slat_angle")]
public float minimum_slat_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_slat_angle")]
public float maximum_slat_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;
        
        public enum SlatorientationType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Screen")]
    [Description("Window screen physical properties. Can only be located on the exterior side of a " +
        "window construction.")]
    public class WindowMaterial_Screen
    {
        
        private void DoNotModel;
        
        private void ModelAsDiffuse;
        
        private void ModelAsDirectBeam;
        

[JsonProperty("reflected_beam_transmittance_accounting_method")]
public ReflectedbeamtransmittanceaccountingmethodType reflected_beam_transmittance_accounting_method
{
    get
    {
    }
    set
    {
    }
}
 = (ReflectedbeamtransmittanceaccountingmethodType)ModelAsDiffuse;

[JsonProperty("diffuse_solar_reflectance")]
public float diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diffuse_visible_reflectance")]
public float diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_hemispherical_emissivity")]
public float thermal_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("conductivity")]
public float conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)221;

[JsonProperty("screen_material_spacing")]
public float screen_material_spacing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_material_diameter")]
public float screen_material_diameter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_to_glass_distance")]
public float screen_to_glass_distance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.025;

[JsonProperty("top_opening_multiplier")]
public float top_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("bottom_opening_multiplier")]
public float bottom_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("left_side_opening_multiplier")]
public float left_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("right_side_opening_multiplier")]
public float right_side_opening_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("angle_of_resolution_for_screen_transmittance_output_map")]
public string angle_of_resolution_for_screen_transmittance_output_map
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;
        
        [Description("Select the method used to account for the beam solar reflected off the material s" +
            "urface.")]
        public enum ReflectedbeamtransmittanceaccountingmethodType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Shade:EquivalentLayer")]
    [Description("Specifies the properties of equivalent layer window shade material Shades are con" +
        "sidered to be perfect diffusers (all transmitted and reflected radiation is hemi" +
        "spherically-diffuse) independent of angle of incidence. Shade represents roller " +
        "blinds.")]
    public class WindowMaterial_Shade_EquivalentLayer
    {
        

[JsonProperty("shade_beam_beam_solar_transmittance")]
public float shade_beam_beam_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_shade_beam_diffuse_solar_transmittance")]
public float front_side_shade_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_shade_beam_diffuse_solar_transmittance")]
public float back_side_shade_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_shade_beam_diffuse_solar_reflectance")]
public float front_side_shade_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_shade_beam_diffuse_solar_reflectance")]
public float back_side_shade_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shade_beam_beam_visible_transmittance_at_normal_incidence")]
public float shade_beam_beam_visible_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shade_beam_diffuse_visible_transmittance_at_normal_incidence")]
public float shade_beam_diffuse_visible_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shade_beam_diffuse_visible_reflectance_at_normal_incidence")]
public float shade_beam_diffuse_visible_reflectance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shade_material_infrared_transmittance")]
public float shade_material_infrared_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("front_side_shade_material_infrared_emissivity")]
public float front_side_shade_material_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.91;

[JsonProperty("back_side_shade_material_infrared_emissivity")]
public float back_side_shade_material_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.91;
    }
    
    [JsonProperty("WindowMaterial:Drape:EquivalentLayer")]
    [Description(@"Specifies the properties of equivalent layer drape fabric materials. Shades are considered to be perfect diffusers (all transmitted and reflected radiation is hemispherically-diffuse) independent of angle of incidence. unpleated drape fabric is treated as thin and flat layer.")]
    public class WindowMaterial_Drape_EquivalentLayer
    {
        

[JsonProperty("drape_beam_beam_solar_transmittance_at_normal_incidence")]
public float drape_beam_beam_solar_transmittance_at_normal_incidence
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_drape_beam_diffuse_solar_transmittance")]
public float front_side_drape_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_drape_beam_diffuse_solar_transmittance")]
public float back_side_drape_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_drape_beam_diffuse_solar_reflectance")]
public float front_side_drape_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_drape_beam_diffuse_solar_reflectance")]
public float back_side_drape_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drape_beam_beam_visible_transmittance")]
public float drape_beam_beam_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drape_beam_diffuse_visible_transmittance")]
public float drape_beam_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drape_beam_diffuse_visible_reflectance")]
public float drape_beam_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drape_material_infrared_transmittance")]
public float drape_material_infrared_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("front_side_drape_material_infrared_emissivity")]
public float front_side_drape_material_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.87;

[JsonProperty("back_side_drape_material_infrared_emissivity")]
public float back_side_drape_material_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.87;

[JsonProperty("width_of_pleated_fabric")]
public float width_of_pleated_fabric
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("length_of_pleated_fabric")]
public float length_of_pleated_fabric
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("WindowMaterial:Blind:EquivalentLayer")]
    [Description("Window equivalent layer blind slat optical and thermal properties. The model assu" +
        "mes that slats are thin and flat, applies correction empirical correlation to ac" +
        "count for curvature effect. Slats are assumed to transmit and reflect diffusely." +
        "")]
    public class WindowMaterial_Blind_EquivalentLayer
    {
        
        private void Horizontal;
        
        private void Vertical;
        
        private void BlockBeamSolar;
        
        private void FixedSlatAngle;
        
        private void MaximizeSolar;
        

[JsonProperty("slat_orientation")]
public SlatorientationType slat_orientation
{
    get
    {
    }
    set
    {
    }
}
 = (SlatorientationType)Horizontal;

[JsonProperty("slat_width")]
public float slat_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_separation")]
public float slat_separation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_crown")]
public float slat_crown
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0015;

[JsonProperty("slat_angle")]
public float slat_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)45;

[JsonProperty("front_side_slat_beam_diffuse_solar_transmittance")]
public float front_side_slat_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_slat_beam_diffuse_solar_transmittance")]
public float back_side_slat_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_beam_diffuse_solar_reflectance")]
public float front_side_slat_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_beam_diffuse_solar_reflectance")]
public float back_side_slat_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_slat_beam_diffuse_visible_transmittance")]
public float front_side_slat_beam_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_slat_beam_diffuse_visible_transmittance")]
public float back_side_slat_beam_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_beam_diffuse_visible_reflectance")]
public float front_side_slat_beam_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_beam_diffuse_visible_reflectance")]
public float back_side_slat_beam_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_diffuse_diffuse_solar_transmittance")]
public float slat_diffuse_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_diffuse_diffuse_solar_reflectance")]
public float front_side_slat_diffuse_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_diffuse_diffuse_solar_reflectance")]
public float back_side_slat_diffuse_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_diffuse_diffuse_visible_transmittance")]
public float slat_diffuse_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_slat_diffuse_diffuse_visible_reflectance")]
public float front_side_slat_diffuse_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_slat_diffuse_diffuse_visible_reflectance")]
public float back_side_slat_diffuse_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slat_infrared_transmittance")]
public float slat_infrared_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_slat_infrared_emissivity")]
public float front_side_slat_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("back_side_slat_infrared_emissivity")]
public float back_side_slat_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("slat_angle_control")]
public SlatanglecontrolType slat_angle_control
{
    get
    {
    }
    set
    {
    }
}
 = (SlatanglecontrolType)FixedSlatAngle;
        
        public enum SlatorientationType
        {
        }
        
        [Description(@"Used only if slat angle control is desired to either maximize solar gain (MaximizeSolar), maximize visibility while eliminating beam solar radiation (BlockBeamSolar), or fixed slate angle (FixedSlatAngle). If FixedSlatAngle is selected, the slat angle entered above is used.")]
        public enum SlatanglecontrolType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Screen:EquivalentLayer")]
    [Description("Equivalent layer window screen physical properties. Can only be located on the ex" +
        "terior side of a window construction.")]
    public class WindowMaterial_Screen_EquivalentLayer
    {
        

[JsonProperty("screen_beam_beam_solar_transmittance")]
public string screen_beam_beam_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("screen_beam_diffuse_solar_transmittance")]
public float screen_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_beam_diffuse_solar_reflectance")]
public float screen_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_beam_beam_visible_transmittance")]
public float screen_beam_beam_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_beam_diffuse_visible_transmittance")]
public float screen_beam_diffuse_visible_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_beam_diffuse_visible_reflectance")]
public float screen_beam_diffuse_visible_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("screen_infrared_transmittance")]
public float screen_infrared_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02;

[JsonProperty("screen_infrared_emissivity")]
public float screen_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.93;

[JsonProperty("screen_wire_spacing")]
public float screen_wire_spacing
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.025;

[JsonProperty("screen_wire_diameter")]
public float screen_wire_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.005;
    }
    
    [JsonProperty("WindowMaterial:Glazing:EquivalentLayer")]
    [Description("Glass material properties for Windows or Glass Doors Transmittance/Reflectance in" +
        "put method.")]
    public class WindowMaterial_Glazing_EquivalentLayer
    {
        
        private void Spectral;
        
        private void SpectralAverage;
        

[JsonProperty("optical_data_type")]
public OpticaldatatypeType optical_data_type
{
    get
    {
    }
    set
    {
    }
}
 = (OpticaldatatypeType)SpectralAverage;

[JsonProperty("window_glass_spectral_data_set_name")]
public string window_glass_spectral_data_set_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_beam_beam_solar_transmittance")]
public float front_side_beam_beam_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_beam_beam_solar_transmittance")]
public float back_side_beam_beam_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_beam_beam_solar_reflectance")]
public float front_side_beam_beam_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_beam_beam_solar_reflectance")]
public float back_side_beam_beam_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_beam_beam_visible_solar_transmittance")]
public float front_side_beam_beam_visible_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_beam_beam_visible_solar_transmittance")]
public float back_side_beam_beam_visible_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_beam_beam_visible_solar_reflectance")]
public float front_side_beam_beam_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_side_beam_beam_visible_solar_reflectance")]
public float back_side_beam_beam_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_side_beam_diffuse_solar_transmittance")]
public float front_side_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_beam_diffuse_solar_transmittance")]
public float back_side_beam_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_beam_diffuse_solar_reflectance")]
public float front_side_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_beam_diffuse_solar_reflectance")]
public float back_side_beam_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_beam_diffuse_visible_solar_transmittance")]
public float front_side_beam_diffuse_visible_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_beam_diffuse_visible_solar_transmittance")]
public float back_side_beam_diffuse_visible_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_beam_diffuse_visible_solar_reflectance")]
public float front_side_beam_diffuse_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("back_side_beam_diffuse_visible_solar_reflectance")]
public float back_side_beam_diffuse_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("diffuse_diffuse_solar_transmittance")]
public string diffuse_diffuse_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("front_side_diffuse_diffuse_solar_reflectance")]
public string front_side_diffuse_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("back_side_diffuse_diffuse_solar_reflectance")]
public string back_side_diffuse_diffuse_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("diffuse_diffuse_visible_solar_transmittance")]
public string diffuse_diffuse_visible_solar_transmittance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("front_side_diffuse_diffuse_visible_solar_reflectance")]
public string front_side_diffuse_diffuse_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("back_side_diffuse_diffuse_visible_solar_reflectance")]
public string back_side_diffuse_diffuse_visible_solar_reflectance
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("infrared_transmittance_applies_to_front_and_back_")]
public float infrared_transmittance_applies_to_front_and_back_
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("front_side_infrared_emissivity")]
public float front_side_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("back_side_infrared_emissivity")]
public float back_side_infrared_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("thermal_resistance")]
public float thermal_resistance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.158;
        
        [Description("Spectral is not currently supported and SpectralAverage is the default.")]
        public enum OpticaldatatypeType
        {
        }
    }
    
    [JsonProperty("WindowMaterial:Gap:EquivalentLayer")]
    [Description("Gas material properties that are used in Windows Equivalent Layer References only" +
        " WindowMaterial:Gas properties")]
    public class WindowMaterial_Gap_EquivalentLayer
    {
        
        private void AIR;
        
        private void ARGON;
        
        private void CUSTOM;
        
        private void KRYPTON;
        
        private void XENON;
        
        private void Sealed;
        
        private void VentedIndoor;
        
        private void VentedOutdoor;
        

[JsonProperty("gas_type")]
public GastypeType gas_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thickness")]
public float thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_vent_type")]
public GapventtypeType gap_vent_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_a")]
public float conductivity_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_b")]
public float conductivity_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("conductivity_coefficient_c")]
public float conductivity_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_a")]
public float viscosity_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_b")]
public float viscosity_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("viscosity_coefficient_c")]
public float viscosity_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_a")]
public float specific_heat_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_b")]
public float specific_heat_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_coefficient_c")]
public float specific_heat_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("molecular_weight")]
public float molecular_weight
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("specific_heat_ratio")]
public float specific_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum GastypeType
        {
        }
        
        [Description(@"Sealed means the gap is enclosed and gas tight, i.e., no venting to indoor or outdoor environment. VentedIndoor means the gap is vented to indoor environment, and VentedOutdoor means the gap is vented to the outdoor environment. The gap types VentedIndoor and VentedOutdoor are used with gas type ""Air"" only.")]
        public enum GapventtypeType
        {
        }
    }
    
    [JsonProperty("MaterialProperty:MoisturePenetrationDepth:Settings")]
    [Description("Additional properties for moisture using EMPD procedure HeatBalanceAlgorithm choi" +
        "ce=MoisturePenetrationDepthConductionTransferFunction only Has no effect with ot" +
        "her HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_MoisturePenetrationDepth_Settings
    {
        

[JsonProperty("water_vapor_diffusion_resistance_factor")]
public float water_vapor_diffusion_resistance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_equation_coefficient_a")]
public float moisture_equation_coefficient_a
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_equation_coefficient_b")]
public float moisture_equation_coefficient_b
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_equation_coefficient_c")]
public float moisture_equation_coefficient_c
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_equation_coefficient_d")]
public float moisture_equation_coefficient_d
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_layer_penetration_depth")]
public string surface_layer_penetration_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("deep_layer_penetration_depth")]
public string deep_layer_penetration_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("coating_layer_thickness")]
public float coating_layer_thickness
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coating_layer_water_vapor_diffusion_resistance_factor")]
public float coating_layer_water_vapor_diffusion_resistance_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:PhaseChange")]
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_PhaseChange
    {
        

[JsonProperty("temperature_coefficient_for_thermal_conductivity")]
public float temperature_coefficient_for_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("temperature_1")]
public float temperature_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_1")]
public float enthalpy_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_2")]
public float temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_2")]
public float enthalpy_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_3")]
public float temperature_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_3")]
public float enthalpy_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_4")]
public float temperature_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_4")]
public float enthalpy_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_5")]
public float temperature_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_5")]
public float enthalpy_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_6")]
public float temperature_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_6")]
public float enthalpy_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_7")]
public float temperature_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_7")]
public float enthalpy_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_8")]
public float temperature_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_8")]
public float enthalpy_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_9")]
public float temperature_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_9")]
public float enthalpy_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_10")]
public float temperature_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_10")]
public float enthalpy_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_11")]
public float temperature_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_11")]
public float enthalpy_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_12")]
public float temperature_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_12")]
public float enthalpy_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_13")]
public float temperature_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_13")]
public float enthalpy_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_14")]
public float temperature_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_14")]
public float enthalpy_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_15")]
public float temperature_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_15")]
public float enthalpy_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_16")]
public float temperature_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_16")]
public float enthalpy_16
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:PhaseChangeHysteresis")]
    [Description(@"Additional properties for temperature dependent thermal conductivity and enthalpy for Phase Change Materials (PCM) with separate melting and freezing curves. HeatBalanceAlgorithm = CondFD (ConductionFiniteDifference) solution algorithm only. Constructions with this should use the detailed CondFD process. Has no effect with other HeatBalanceAlgorithm solution algorithms.")]
    public class MaterialProperty_PhaseChangeHysteresis
    {
        

[JsonProperty("latent_heat_during_the_entire_phase_change_process")]
public float latent_heat_during_the_entire_phase_change_process
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_state_thermal_conductivity")]
public float liquid_state_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_state_density")]
public float liquid_state_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_state_specific_heat")]
public float liquid_state_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_temperature_difference_of_melting_curve")]
public float high_temperature_difference_of_melting_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("peak_melting_temperature")]
public float peak_melting_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_temperature_difference_of_melting_curve")]
public float low_temperature_difference_of_melting_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solid_state_thermal_conductivity")]
public float solid_state_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solid_state_density")]
public float solid_state_density
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solid_state_specific_heat")]
public float solid_state_specific_heat
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_temperature_difference_of_freezing_curve")]
public float high_temperature_difference_of_freezing_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("peak_freezing_temperature")]
public float peak_freezing_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_temperature_difference_of_freezing_curve")]
public float low_temperature_difference_of_freezing_curve
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:VariableThermalConductivity")]
    [Description(@"Additional properties for temperature dependent thermal conductivity using piecewise linear temperature-conductivity function. HeatBalanceAlgorithm = CondFD(ConductionFiniteDifference) solution algorithm only. Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_VariableThermalConductivity
    {
        

[JsonProperty("temperature_1")]
public float temperature_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_1")]
public float thermal_conductivity_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_2")]
public float temperature_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_2")]
public float thermal_conductivity_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_3")]
public float temperature_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_3")]
public float thermal_conductivity_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_4")]
public float temperature_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_4")]
public float thermal_conductivity_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_5")]
public float temperature_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_5")]
public float thermal_conductivity_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_6")]
public float temperature_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_6")]
public float thermal_conductivity_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_7")]
public float temperature_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_7")]
public float thermal_conductivity_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_8")]
public float temperature_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_8")]
public float thermal_conductivity_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_9")]
public float temperature_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_9")]
public float thermal_conductivity_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_10")]
public float temperature_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_10")]
public float thermal_conductivity_10
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:Settings")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Additional material properties for surfaces. Has no effect with other HeatBa" +
        "lanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_Settings
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("porosity")]
public float porosity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_water_content_ratio")]
public float initial_water_content_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:SorptionIsotherm")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between moisture content and relative humidity fraction. Has no" +
        " effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_SorptionIsotherm
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_isotherm_coordinates")]
public float number_of_isotherm_coordinates
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_1")]
public float relative_humidity_fraction_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_1")]
public float moisture_content_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_2")]
public float relative_humidity_fraction_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_2")]
public float moisture_content_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_3")]
public float relative_humidity_fraction_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_3")]
public float moisture_content_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_4")]
public float relative_humidity_fraction_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_4")]
public float moisture_content_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_5")]
public float relative_humidity_fraction_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_5")]
public float moisture_content_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_6")]
public float relative_humidity_fraction_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_6")]
public float moisture_content_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_7")]
public float relative_humidity_fraction_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_7")]
public float moisture_content_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_8")]
public float relative_humidity_fraction_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_8")]
public float moisture_content_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_9")]
public float relative_humidity_fraction_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_9")]
public float moisture_content_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_10")]
public float relative_humidity_fraction_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_10")]
public float moisture_content_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_11")]
public float relative_humidity_fraction_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_11")]
public float moisture_content_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_12")]
public float relative_humidity_fraction_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_12")]
public float moisture_content_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_13")]
public float relative_humidity_fraction_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_13")]
public float moisture_content_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_14")]
public float relative_humidity_fraction_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_14")]
public float moisture_content_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_15")]
public float relative_humidity_fraction_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_15")]
public float moisture_content_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_16")]
public float relative_humidity_fraction_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_16")]
public float moisture_content_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_17")]
public float relative_humidity_fraction_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_17")]
public float moisture_content_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_18")]
public float relative_humidity_fraction_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_18")]
public float moisture_content_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_19")]
public float relative_humidity_fraction_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_19")]
public float moisture_content_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_20")]
public float relative_humidity_fraction_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_20")]
public float moisture_content_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_21")]
public float relative_humidity_fraction_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_21")]
public float moisture_content_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_22")]
public float relative_humidity_fraction_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_22")]
public float moisture_content_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_23")]
public float relative_humidity_fraction_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_23")]
public float moisture_content_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_24")]
public float relative_humidity_fraction_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_24")]
public float moisture_content_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_25")]
public float relative_humidity_fraction_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_25")]
public float moisture_content_25
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:Suction")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid suction transport coefficient and moisture conte" +
        "nt Has no effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_Suction
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_suction_points")]
public float number_of_suction_points
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_1")]
public float moisture_content_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_1")]
public float liquid_transport_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_2")]
public float moisture_content_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_2")]
public float liquid_transport_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_3")]
public float moisture_content_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_3")]
public float liquid_transport_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_4")]
public float moisture_content_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_4")]
public float liquid_transport_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_5")]
public float moisture_content_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_5")]
public float liquid_transport_coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_6")]
public float moisture_content_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_6")]
public float liquid_transport_coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_7")]
public float moisture_content_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_7")]
public float liquid_transport_coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_8")]
public float moisture_content_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_8")]
public float liquid_transport_coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_9")]
public float moisture_content_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_9")]
public float liquid_transport_coefficient_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_10")]
public float moisture_content_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_10")]
public float liquid_transport_coefficient_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_11")]
public float moisture_content_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_11")]
public float liquid_transport_coefficient_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_12")]
public float moisture_content_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_12")]
public float liquid_transport_coefficient_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_13")]
public float moisture_content_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_13")]
public float liquid_transport_coefficient_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_14")]
public float moisture_content_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_14")]
public float liquid_transport_coefficient_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_15")]
public float moisture_content_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_15")]
public float liquid_transport_coefficient_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_16")]
public float moisture_content_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_16")]
public float liquid_transport_coefficient_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_17")]
public float moisture_content_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_17")]
public float liquid_transport_coefficient_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_18")]
public float moisture_content_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_18")]
public float liquid_transport_coefficient_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_19")]
public float moisture_content_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_19")]
public float liquid_transport_coefficient_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_20")]
public float moisture_content_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_20")]
public float liquid_transport_coefficient_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_21")]
public float moisture_content_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_21")]
public float liquid_transport_coefficient_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_22")]
public float moisture_content_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_22")]
public float liquid_transport_coefficient_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_23")]
public float moisture_content_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_23")]
public float liquid_transport_coefficient_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_24")]
public float moisture_content_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_24")]
public float liquid_transport_coefficient_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_25")]
public float moisture_content_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_25")]
public float liquid_transport_coefficient_25
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:Redistribution")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between liquid transport coefficient and moisture content Has n" +
        "o effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_Redistribution
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_redistribution_points")]
public float number_of_redistribution_points
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_1")]
public float moisture_content_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_1")]
public float liquid_transport_coefficient_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_2")]
public float moisture_content_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_2")]
public float liquid_transport_coefficient_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_3")]
public float moisture_content_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_3")]
public float liquid_transport_coefficient_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_4")]
public float moisture_content_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_4")]
public float liquid_transport_coefficient_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_5")]
public float moisture_content_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_5")]
public float liquid_transport_coefficient_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_6")]
public float moisture_content_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_6")]
public float liquid_transport_coefficient_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_7")]
public float moisture_content_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_7")]
public float liquid_transport_coefficient_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_8")]
public float moisture_content_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_8")]
public float liquid_transport_coefficient_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_9")]
public float moisture_content_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_9")]
public float liquid_transport_coefficient_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_10")]
public float moisture_content_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_10")]
public float liquid_transport_coefficient_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_11")]
public float moisture_content_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_11")]
public float liquid_transport_coefficient_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_12")]
public float moisture_content_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_12")]
public float liquid_transport_coefficient_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_13")]
public float moisture_content_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_13")]
public float liquid_transport_coefficient_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_14")]
public float moisture_content_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_14")]
public float liquid_transport_coefficient_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_15")]
public float moisture_content_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_15")]
public float liquid_transport_coefficient_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_16")]
public float moisture_content_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_16")]
public float liquid_transport_coefficient_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_17")]
public float moisture_content_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_17")]
public float liquid_transport_coefficient_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_18")]
public float moisture_content_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_18")]
public float liquid_transport_coefficient_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_19")]
public float moisture_content_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_19")]
public float liquid_transport_coefficient_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_20")]
public float moisture_content_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_20")]
public float liquid_transport_coefficient_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_21")]
public float moisture_content_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_21")]
public float liquid_transport_coefficient_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_22")]
public float moisture_content_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_22")]
public float liquid_transport_coefficient_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_23")]
public float moisture_content_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_23")]
public float liquid_transport_coefficient_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_24")]
public float moisture_content_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_24")]
public float liquid_transport_coefficient_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_25")]
public float moisture_content_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("liquid_transport_coefficient_25")]
public float liquid_transport_coefficient_25
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:Diffusion")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between water vapor diffusion and relative humidity fraction Ha" +
        "s no effect with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_Diffusion
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_data_pairs")]
public float number_of_data_pairs
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_1")]
public float relative_humidity_fraction_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_1")]
public float water_vapor_diffusion_resistance_factor_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_2")]
public float relative_humidity_fraction_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_2")]
public float water_vapor_diffusion_resistance_factor_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_3")]
public float relative_humidity_fraction_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_3")]
public float water_vapor_diffusion_resistance_factor_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_4")]
public float relative_humidity_fraction_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_4")]
public float water_vapor_diffusion_resistance_factor_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_5")]
public float relative_humidity_fraction_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_5")]
public float water_vapor_diffusion_resistance_factor_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_6")]
public float relative_humidity_fraction_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_6")]
public float water_vapor_diffusion_resistance_factor_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_7")]
public float relative_humidity_fraction_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_7")]
public float water_vapor_diffusion_resistance_factor_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_8")]
public float relative_humidity_fraction_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_8")]
public float water_vapor_diffusion_resistance_factor_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_9")]
public float relative_humidity_fraction_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_9")]
public float water_vapor_diffusion_resistance_factor_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_10")]
public float relative_humidity_fraction_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_10")]
public float water_vapor_diffusion_resistance_factor_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_11")]
public float relative_humidity_fraction_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_11")]
public float water_vapor_diffusion_resistance_factor_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_12")]
public float relative_humidity_fraction_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_12")]
public float water_vapor_diffusion_resistance_factor_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_13")]
public float relative_humidity_fraction_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_13")]
public float water_vapor_diffusion_resistance_factor_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_14")]
public float relative_humidity_fraction_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_14")]
public float water_vapor_diffusion_resistance_factor_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_15")]
public float relative_humidity_fraction_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_15")]
public float water_vapor_diffusion_resistance_factor_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_16")]
public float relative_humidity_fraction_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_16")]
public float water_vapor_diffusion_resistance_factor_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_17")]
public float relative_humidity_fraction_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_17")]
public float water_vapor_diffusion_resistance_factor_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_18")]
public float relative_humidity_fraction_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_18")]
public float water_vapor_diffusion_resistance_factor_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_19")]
public float relative_humidity_fraction_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_19")]
public float water_vapor_diffusion_resistance_factor_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_20")]
public float relative_humidity_fraction_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_20")]
public float water_vapor_diffusion_resistance_factor_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_21")]
public float relative_humidity_fraction_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_21")]
public float water_vapor_diffusion_resistance_factor_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_22")]
public float relative_humidity_fraction_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_22")]
public float water_vapor_diffusion_resistance_factor_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_23")]
public float relative_humidity_fraction_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_23")]
public float water_vapor_diffusion_resistance_factor_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_24")]
public float relative_humidity_fraction_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_24")]
public float water_vapor_diffusion_resistance_factor_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_humidity_fraction_25")]
public float relative_humidity_fraction_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_vapor_diffusion_resistance_factor_25")]
public float water_vapor_diffusion_resistance_factor_25
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:HeatAndMoistureTransfer:ThermalConductivity")]
    [Description("HeatBalanceAlgorithm = CombinedHeatAndMoistureFiniteElement solution algorithm on" +
        "ly. Relationship between thermal conductivity and moisture content Has no effect" +
        " with other HeatBalanceAlgorithm solution algorithms")]
    public class MaterialProperty_HeatAndMoistureTransfer_ThermalConductivity
    {
        

[JsonProperty("material_name")]
public string material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_thermal_coordinates")]
public float number_of_thermal_coordinates
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_1")]
public float moisture_content_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_1")]
public float thermal_conductivity_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_2")]
public float moisture_content_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_2")]
public float thermal_conductivity_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_3")]
public float moisture_content_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_3")]
public float thermal_conductivity_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_4")]
public float moisture_content_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_4")]
public float thermal_conductivity_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_5")]
public float moisture_content_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_5")]
public float thermal_conductivity_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_6")]
public float moisture_content_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_6")]
public float thermal_conductivity_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_7")]
public float moisture_content_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_7")]
public float thermal_conductivity_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_8")]
public float moisture_content_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_8")]
public float thermal_conductivity_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_9")]
public float moisture_content_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_9")]
public float thermal_conductivity_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_10")]
public float moisture_content_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_10")]
public float thermal_conductivity_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_11")]
public float moisture_content_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_11")]
public float thermal_conductivity_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_12")]
public float moisture_content_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_12")]
public float thermal_conductivity_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_13")]
public float moisture_content_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_13")]
public float thermal_conductivity_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_14")]
public float moisture_content_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_14")]
public float thermal_conductivity_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_15")]
public float moisture_content_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_15")]
public float thermal_conductivity_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_16")]
public float moisture_content_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_16")]
public float thermal_conductivity_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_17")]
public float moisture_content_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_17")]
public float thermal_conductivity_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_18")]
public float moisture_content_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_18")]
public float thermal_conductivity_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_19")]
public float moisture_content_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_19")]
public float thermal_conductivity_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_20")]
public float moisture_content_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_20")]
public float thermal_conductivity_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_21")]
public float moisture_content_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_21")]
public float thermal_conductivity_21
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_22")]
public float moisture_content_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_22")]
public float thermal_conductivity_22
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_23")]
public float moisture_content_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_23")]
public float thermal_conductivity_23
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_24")]
public float moisture_content_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_24")]
public float thermal_conductivity_24
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("moisture_content_25")]
public float moisture_content_25
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_conductivity_25")]
public float thermal_conductivity_25
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("MaterialProperty:GlazingSpectralData")]
    [Description("Name is followed by up to 800 sets of normal-incidence measured values of [wavele" +
        "ngth, transmittance, front reflectance, back reflectance] for wavelengths coveri" +
        "ng the solar spectrum (from about 0.25 to 2.5 microns)")]
    public class MaterialProperty_GlazingSpectralData
    {
        

[JsonProperty("wavelength_1")]
public float wavelength_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transmittance_1")]
public float transmittance_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_reflectance_1")]
public float front_reflectance_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_reflectance_1")]
public float back_reflectance_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wavelength_2")]
public float wavelength_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transmittance_2")]
public float transmittance_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_reflectance_2")]
public float front_reflectance_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_reflectance_2")]
public float back_reflectance_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wavelength_3")]
public float wavelength_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transmittance_3")]
public float transmittance_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_reflectance_3")]
public float front_reflectance_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_reflectance_3")]
public float back_reflectance_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wavelength_4")]
public float wavelength_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transmittance_4")]
public float transmittance_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("front_reflectance_4")]
public float front_reflectance_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("back_reflectance_4")]
public float back_reflectance_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("extensions")]
public string extensions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Construction")]
    [Description("Start with outside layer and work your way to the inside layer Up to 10 layers to" +
        "tal, 8 for windows Enter the material name for each layer")]
    public class Construction
    {
        

[JsonProperty("outside_layer")]
public string outside_layer
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2")]
public string layer_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3")]
public string layer_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4")]
public string layer_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5")]
public string layer_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_6")]
public string layer_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_7")]
public string layer_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_8")]
public string layer_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_9")]
public string layer_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_10")]
public string layer_10
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Construction:CfactorUndergroundWall")]
    [Description("Alternate method of describing underground wall constructions")]
    public class Construction_CfactorUndergroundWall
    {
        

[JsonProperty("c_factor")]
public float c_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Construction:FfactorGroundFloor")]
    [Description("Alternate method of describing slab-on-grade or underground floor constructions")]
    public class Construction_FfactorGroundFloor
    {
        

[JsonProperty("f_factor")]
public float f_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("area")]
public float area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("perimeterexposed")]
public float perimeterexposed
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ConstructionProperty:InternalHeatSource")]
    [Description("Internal heat source to be attached to a construction layer")]
    public class ConstructionProperty_InternalHeatSource
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_source_present_after_layer_number")]
public float thermal_source_present_after_layer_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_calculation_requested_after_layer_number")]
public float temperature_calculation_requested_after_layer_number
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dimensions_for_the_ctf_calculation")]
public float dimensions_for_the_ctf_calculation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tube_spacing")]
public float tube_spacing
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("two_dimensional_temperature_calculation_position")]
public float two_dimensional_temperature_calculation_position
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
    }
    
    [JsonProperty("Construction:AirBoundary")]
    [Description(@"Indicates an open boundary between two zones. It may be used for base surfaces and fenestration surfaces. The two adjacent zones are grouped together for solar, daylighting and radiant exchange. When this construction type is used, the Outside Boundary Condition of the surface (or the base surface of a fenestration surface) must be either Surface or Zone. A base surface with Construction:AirBoundary cannot hold any fenestration surfaces.")]
    public class Construction_AirBoundary
    {
        
        private void None;
        
        private void SimpleMixing;
        

[JsonProperty("air_exchange_method")]
public AirexchangemethodType air_exchange_method
{
    get
    {
    }
    set
    {
    }
}
 = (AirexchangemethodType)None;

[JsonProperty("simple_mixing_air_changes_per_hour")]
public float simple_mixing_air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("simple_mixing_schedule_name")]
public string simple_mixing_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("This field controls how air exchange is modeled across this boundary.")]
        public enum AirexchangemethodType
        {
        }
    }
    
    [JsonProperty("WindowThermalModel:Params")]
    [Description("object is used to select which thermal model should be used in tarcog simulations" +
        "")]
    public class WindowThermalModel_Params
    {
        
        private void EN673Declared;
        
        private void EN673Design;
        
        private void ISO15099;
        
        private void ConvectiveScalarModel_NoSDThickness;
        
        private void ConvectiveScalarModel_withSDThickness;
        
        private void ISO15099;
        
        private void ScaledCavityWidth;
        
        private void MeasuredDeflection;
        
        private void NoDeflection;
        
        private void TemperatureAndPressureInput;
        

[JsonProperty("standard")]
public StandardType standard
{
    get
    {
    }
    set
    {
    }
}
 = (StandardType)ISO15099;

[JsonProperty("thermal_model")]
public ThermalmodelType thermal_model
{
    get
    {
    }
    set
    {
    }
}
 = (ThermalmodelType)ISO15099;

[JsonProperty("sdscalar")]
public float sdscalar
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("deflection_model")]
public DeflectionmodelType deflection_model
{
    get
    {
    }
    set
    {
    }
}
 = (DeflectionmodelType)NoDeflection;

[JsonProperty("vacuum_pressure_limit")]
public float vacuum_pressure_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13.238;

[JsonProperty("initial_temperature")]
public float initial_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)25;

[JsonProperty("initial_pressure")]
public float initial_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)101325;
        
        public enum StandardType
        {
        }
        
        public enum ThermalmodelType
        {
        }
        
        public enum DeflectionmodelType
        {
        }
    }
    
    [JsonProperty("WindowsCalculationEngine")]
    [Description(@"Describes which window model will be used in calculations. Built in windows model will use algorithms that are part of EnergyPlus, while ExternalWindowsModel will use Windows-CalcEngine library to perform optical and thermal performances of windows and doors.")]
    public class WindowsCalculationEngine
    {
        
        private void BuiltInWindowsModel;
        
        private void ExternalWindowsModel;
        

[JsonProperty("windows_engine")]
public WindowsengineType windows_engine
{
    get
    {
    }
    set
    {
    }
}
 = (WindowsengineType)BuiltInWindowsModel;
        
        public enum WindowsengineType
        {
        }
    }
    
    [JsonProperty("Construction:ComplexFenestrationState")]
    [Description("Describes one state for a complex glazing system These input objects are typicall" +
        "y generated by using WINDOW software and export to IDF syntax")]
    public class Construction_ComplexFenestrationState
    {
        
        private void LBNLWINDOW;
        
        private void UserDefined;
        
        private void Axisymmetric;
        
        private void None;
        

[JsonProperty("basis_type")]
public BasistypeType basis_type
{
    get
    {
    }
    set
    {
    }
}
 = (BasistypeType)LBNLWINDOW;

[JsonProperty("basis_symmetry_type")]
public BasissymmetrytypeType basis_symmetry_type
{
    get
    {
    }
    set
    {
    }
}
 = (BasissymmetrytypeType)None;

[JsonProperty("window_thermal_model")]
public string window_thermal_model
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basis_matrix_name")]
public string basis_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_optical_complex_front_transmittance_matrix_name")]
public string solar_optical_complex_front_transmittance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("solar_optical_complex_back_reflectance_matrix_name")]
public string solar_optical_complex_back_reflectance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_optical_complex_front_transmittance_matrix_name")]
public string visible_optical_complex_front_transmittance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("visible_optical_complex_back_transmittance_matrix_name")]
public string visible_optical_complex_back_transmittance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_layer_name")]
public string outside_layer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_layer_directional_front_absoptance_matrix_name")]
public string outside_layer_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_layer_directional_back_absoptance_matrix_name")]
public string outside_layer_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_1_name")]
public string gap_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cfs_gap_1_directional_front_absoptance_matrix_name")]
public string cfs_gap_1_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cfs_gap_1_directional_back_absoptance_matrix_name")]
public string cfs_gap_1_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2_name")]
public string layer_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2_directional_front_absoptance_matrix_name")]
public string layer_2_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2_directional_back_absoptance_matrix_name")]
public string layer_2_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_2_name")]
public string gap_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_2_directional_front_absoptance_matrix_name")]
public string gap_2_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_2_directional_back_absoptance_matrix_name")]
public string gap_2_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3_material")]
public string layer_3_material
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3_directional_front_absoptance_matrix_name")]
public string layer_3_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3_directional_back_absoptance_matrix_name")]
public string layer_3_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_3_name")]
public string gap_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_3_directional_front_absoptance_matrix_name")]
public string gap_3_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_3_directional_back_absoptance_matrix_name")]
public string gap_3_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4_name")]
public string layer_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4_directional_front_absoptance_matrix_name")]
public string layer_4_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4_directional_back_absoptance_matrix_name")]
public string layer_4_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_4_name")]
public string gap_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_4_directional_front_absoptance_matrix_name")]
public string gap_4_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gap_4_directional_back_absoptance_matrix_name")]
public string gap_4_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5_name")]
public string layer_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5_directional_front_absoptance_matrix_name")]
public string layer_5_directional_front_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5_directional_back_absoptance_matrix_name")]
public string layer_5_directional_back_absoptance_matrix_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum BasistypeType
        {
        }
        
        public enum BasissymmetrytypeType
        {
        }
    }
    
    [JsonProperty("Construction:WindowEquivalentLayer")]
    [Description("Start with outside layer and work your way to the inside Layer Up to 11 layers to" +
        "tal. Up to six solid layers and up to five gaps. Enter the material name for eac" +
        "h layer")]
    public class Construction_WindowEquivalentLayer
    {
        

[JsonProperty("outside_layer")]
public string outside_layer
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_2")]
public string layer_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_3")]
public string layer_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_4")]
public string layer_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_5")]
public string layer_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_6")]
public string layer_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_7")]
public string layer_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_8")]
public string layer_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_9")]
public string layer_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_10")]
public string layer_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("layer_11")]
public string layer_11
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Construction:WindowDataFile")]
    [Description("Initiates search of the Window data file for a window called Name.")]
    public class Construction_WindowDataFile
    {
        

[JsonProperty("file_name")]
public string file_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.SystemAvailabilityManagers
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AvailabilityManager:Scheduled")]
    [Description("Determines the availability of a loop or system: whether it is on or off. Schedul" +
        "e overrides fan/pump schedule.")]
    public class AvailabilityManager_Scheduled
    {
        

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:ScheduledOn")]
    [Description("Determines the availability of a loop or system: only controls the turn on action" +
        ". Schedule overrides fan/pump schedule.")]
    public class AvailabilityManager_ScheduledOn
    {
        

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:ScheduledOff")]
    [Description("Determines the availability of a loop or system: only controls the turn off actio" +
        "n. Schedule overrides fan/pump schedule.")]
    public class AvailabilityManager_ScheduledOff
    {
        

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:OptimumStart")]
    [Description("Determines the optimal start of HVAC systems before occupancy.")]
    public class AvailabilityManager_OptimumStart
    {
        
        private void ControlZone;
        
        private void MaximumofZoneList;
        
        private void StayOff;
        
        private void AdaptiveASHRAE;
        
        private void AdaptiveTemperatureGradient;
        
        private void ConstantStartTime;
        
        private void ConstantTemperatureGradient;
        

[JsonProperty("applicability_schedule_name")]
public string applicability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_schedule_name")]
public string fan_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)ControlZone;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_list_name")]
public string zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_value_for_optimum_start_time")]
public float maximum_value_for_optimum_start_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;

[JsonProperty("control_algorithm")]
public ControlalgorithmType control_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = (ControlalgorithmType)AdaptiveASHRAE;

[JsonProperty("constant_temperature_gradient_during_cooling")]
public float constant_temperature_gradient_during_cooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_temperature_gradient_during_heating")]
public float constant_temperature_gradient_during_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_temperature_gradient_during_cooling")]
public float initial_temperature_gradient_during_cooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_temperature_gradient_during_heating")]
public float initial_temperature_gradient_during_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_start_time")]
public float constant_start_time
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_previous_days")]
public float number_of_previous_days
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;
        
        public enum ControltypeType
        {
        }
        
        public enum ControlalgorithmType
        {
        }
    }
    
    [JsonProperty("AvailabilityManager:NightCycle")]
    [Description("Determines the availability of a loop or system: whether it is on or off. Dependi" +
        "ng on zone temperatures, overrides Schedules and forces system Fans on.")]
    public class AvailabilityManager_NightCycle
    {
        
        private void CycleOnAny;
        
        private void CycleOnAnyCoolingOrHeatingZone;
        
        private void CycleOnAnyCoolingZone;
        
        private void CycleOnAnyHeatingZone;
        
        private void CycleOnAnyHeatingZoneFansOnly;
        
        private void CycleOnAnyZoneFansOnly;
        
        private void CycleOnControlZone;
        
        private void StayOff;
        
        private void FixedRunTime;
        
        private void Thermostat;
        
        private void ThermostatWithMinimumRunTime;
        

[JsonProperty("applicability_schedule_name")]
public string applicability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_schedule_name")]
public string fan_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)StayOff;

[JsonProperty("thermostat_tolerance")]
public float thermostat_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cycling_run_time_control_type")]
public CyclingruntimecontroltypeType cycling_run_time_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CyclingruntimecontroltypeType)FixedRunTime;

[JsonProperty("cycling_run_time")]
public float cycling_run_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3600;

[JsonProperty("control_zone_or_zone_list_name")]
public string control_zone_or_zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_control_zone_or_zone_list_name")]
public string cooling_control_zone_or_zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_control_zone_or_zone_list_name")]
public string heating_control_zone_or_zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_zone_fans_only_zone_or_zone_list_name")]
public string heating_zone_fans_only_zone_or_zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("When AvailabilityManager:NightCycle is used in the zone component availability ma" +
            "nager assignment list, the key choices for Control Type would only be StayOff an" +
            "d CycleOnControlZone")]
        public enum ControltypeType
        {
        }
        
        public enum CyclingruntimecontroltypeType
        {
        }
    }
    
    [JsonProperty("AvailabilityManager:DifferentialThermostat")]
    [Description("Overrides fan/pump schedules depending on temperature difference between two node" +
        "s.")]
    public class AvailabilityManager_DifferentialThermostat
    {
        

[JsonProperty("hot_node_name")]
public string hot_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_node_name")]
public string cold_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_difference_on_limit")]
public float temperature_difference_on_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_difference_off_limit")]
public float temperature_difference_off_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:HighTemperatureTurnOff")]
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    public class AvailabilityManager_HighTemperatureTurnOff
    {
        

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature")]
public float temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:HighTemperatureTurnOn")]
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    public class AvailabilityManager_HighTemperatureTurnOn
    {
        

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature")]
public float temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:LowTemperatureTurnOff")]
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    public class AvailabilityManager_LowTemperatureTurnOff
    {
        

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature")]
public float temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("applicability_schedule_name")]
public string applicability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:LowTemperatureTurnOn")]
    [Description("Overrides fan/pump schedules depending on temperature at sensor node.")]
    public class AvailabilityManager_LowTemperatureTurnOn
    {
        

[JsonProperty("sensor_node_name")]
public string sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature")]
public float temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:NightVentilation")]
    [Description("depending on zone and outdoor conditions overrides fan schedule to do precooling " +
        "with outdoor air")]
    public class AvailabilityManager_NightVentilation
    {
        

[JsonProperty("applicability_schedule_name")]
public string applicability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_schedule_name")]
public string fan_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_temperature_schedule_name")]
public string ventilation_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_temperature_difference")]
public float ventilation_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("ventilation_temperature_low_limit")]
public float ventilation_temperature_low_limit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("night_venting_flow_fraction")]
public float night_venting_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AvailabilityManager:HybridVentilation")]
    [Description(@"Depending on zone and outdoor conditions overrides window/door opening controls to maximize natural ventilation and turn off an HVAC system when ventilation control conditions are met. This object (zone ventilation object name) has not been instrumented to work with global Zone or Zone List names option for Ventilation:DesignFlowRate. In order to use, you must enter the single <Ventilation:DesignFlowRate> name in that field. If it is a part of a global ventilation assignment the name will be <Zone Name> <global Ventilation:DesignFlowRate> name. Currently, hybrid ventilation manager is restricted to one per zone. It can either be applied through the air loop or directly to the zone. If hybrid ventilation manager is applied to an air loop and one of the zones served by that air loop also has hybrid ventilation manager, then zone hybrid ventilation manager is disabled.")]
    public class AvailabilityManager_HybridVentilation
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("hvac_air_loop_name")]
public string hvac_air_loop_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_zone_name")]
public string control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_control_mode_schedule_name")]
public string ventilation_control_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_weather_file_rain_indicators")]
public UseweatherfilerainindicatorsType use_weather_file_rain_indicators
{
    get
    {
    }
    set
    {
    }
}
 = (UseweatherfilerainindicatorsType)Yes;

[JsonProperty("maximum_wind_speed")]
public float maximum_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;

[JsonProperty("minimum_outdoor_temperature")]
public float minimum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("maximum_outdoor_temperature")]
public float maximum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("minimum_outdoor_enthalpy")]
public float minimum_outdoor_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_enthalpy")]
public float maximum_outdoor_enthalpy
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dewpoint")]
public float minimum_outdoor_dewpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("maximum_outdoor_dewpoint")]
public float maximum_outdoor_dewpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("minimum_outdoor_ventilation_air_schedule_name")]
public string minimum_outdoor_ventilation_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("opening_factor_function_of_wind_speed_curve_name")]
public string opening_factor_function_of_wind_speed_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airflownetwork_control_type_schedule_name")]
public string airflownetwork_control_type_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("simple_airflow_control_type_schedule_name")]
public string simple_airflow_control_type_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zoneventilation_object_name")]
public string zoneventilation_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hvac_operation_time")]
public float minimum_hvac_operation_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_ventilation_time")]
public float minimum_ventilation_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("If Yes, ventilation is shutoff when there is rain If No, there is no rain control" +
            "")]
        public enum UseweatherfilerainindicatorsType
        {
        }
    }
    
    [JsonProperty("AvailabilityManagerAssignmentList")]
    [Description(@"Defines the applicable managers used for an AirLoopHVAC or PlantLoop. The priority of availability managers is based on a set of rules and are specific to the type of loop. The output from each availability manager is an availability status flag: NoAction, ForceOff, CycleOn, or CycleOnZoneFansOnly (used only for air loops).")]
    public class AvailabilityManagerAssignmentList
    {
        

[JsonProperty("managers")]
public string managers
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.ThermalZonesandSurfaces
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("GlobalGeometryRules")]
    [Description("Specifies the geometric rules used to describe the input of surface vertices and " +
        "daylighting reference points.")]
    public class GlobalGeometryRules
    {
        
        private void LowerLeftCorner;
        
        private void LowerRightCorner;
        
        private void UpperLeftCorner;
        
        private void UpperRightCorner;
        
        private void Clockwise;
        
        private void Counterclockwise;
        
        private void Relative;
        
        private void World;
        
        private void Relative;
        
        private void World;
        
        private void Relative;
        
        private void World;
        

[JsonProperty("starting_vertex_position")]
public StartingvertexpositionType starting_vertex_position
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_entry_direction")]
public VertexentrydirectionType vertex_entry_direction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coordinate_system")]
public CoordinatesystemType coordinate_system
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("daylighting_reference_point_coordinate_system")]
public DaylightingreferencepointcoordinatesystemType daylighting_reference_point_coordinate_system
{
    get
    {
    }
    set
    {
    }
}
 = (DaylightingreferencepointcoordinatesystemType)Relative;

[JsonProperty("rectangular_surface_coordinate_system")]
public RectangularsurfacecoordinatesystemType rectangular_surface_coordinate_system
{
    get
    {
    }
    set
    {
    }
}
 = (RectangularsurfacecoordinatesystemType)Relative;
        
        [Description("Specified as entry for a 4 sided surface/rectangle Surfaces are specified as view" +
            "ed from outside the surface Shading surfaces as viewed from behind. (towards wha" +
            "t they are shading)")]
        public enum StartingvertexpositionType
        {
        }
        
        public enum VertexentrydirectionType
        {
        }
        
        [Description("Relative -- coordinates are entered relative to zone origin World -- all coordina" +
            "tes entered are \"absolute\" for this facility")]
        public enum CoordinatesystemType
        {
        }
        
        [Description("Relative -- coordinates are entered relative to zone origin World -- all coordina" +
            "tes entered are \"absolute\" for this facility")]
        public enum DaylightingreferencepointcoordinatesystemType
        {
        }
        
        [Description("Relative -- Starting corner is entered relative to zone origin World -- Starting " +
            "corner is entered in \"absolute\"")]
        public enum RectangularsurfacecoordinatesystemType
        {
        }
    }
    
    [JsonProperty("GeometryTransform")]
    [Description("Provides a simple method of altering the footprint geometry of a model. The inten" +
        "t is to provide a single parameter that can be used to reshape the building desc" +
        "ription contained in the rest of the input file.")]
    public class GeometryTransform
    {
        
        private void XY;
        

[JsonProperty("plane_of_transform")]
public PlaneoftransformType plane_of_transform
{
    get
    {
    }
    set
    {
    }
}
 = (PlaneoftransformType)XY;

[JsonProperty("current_aspect_ratio")]
public float current_aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("new_aspect_ratio")]
public float new_aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("only current allowed value is \"XY\"")]
        public enum PlaneoftransformType
        {
        }
    }
    
    [JsonProperty("Zone")]
    [Description("Defines a thermal zone of the building.")]
    public class Zone
    {
        
        private void ASTMC1340;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void CeilingDiffuser;
        
        private void Simple;
        
        private void TARP;
        
        private void TrombeWall;
        
        private void AdaptiveConvectionAlgorithm;
        
        private void DOE-2;
        
        private void MoWiTT;
        
        private void SimpleCombined;
        
        private void TARP;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("direction_of_relative_north")]
public float direction_of_relative_north
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("x_origin")]
public float x_origin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("y_origin")]
public float y_origin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("z_origin")]
public float z_origin
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("type")]
public float type
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("ceiling_height")]
public string ceiling_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("volume")]
public string volume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("floor_area")]
public string floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("zone_inside_convection_algorithm")]
public ZoneinsideconvectionalgorithmType zone_inside_convection_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_outside_convection_algorithm")]
public ZoneoutsideconvectionalgorithmType zone_outside_convection_algorithm
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_of_total_floor_area")]
public PartoftotalfloorareaType part_of_total_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = (PartoftotalfloorareaType)Yes;
        
        [Description(@"Will default to same value as SurfaceConvectionAlgorithm:Inside object setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone Simple = constant natural convection (ASHRAE) TARP = variable natural convection based on temperature difference (ASHRAE) CeilingDiffuser = ACH based forced and mixed convection correlations for ceiling diffuser configuration with simple natural convection limit AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions TrombeWall = variable natural convection in an enclosed rectangular cavity ASTMC1340 = mixed convection correlations specified for attic zone")]
        public enum ZoneinsideconvectionalgorithmType
        {
        }
        
        [Description(@"Will default to same value as SurfaceConvectionAlgorithm:Outside object setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al. MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions")]
        public enum ZoneoutsideconvectionalgorithmType
        {
        }
        
        public enum PartoftotalfloorareaType
        {
        }
    }
    
    [JsonProperty("ZoneList")]
    [Description(@"Defines a list of thermal zones which can be referenced as a group. The ZoneList name may be used elsewhere in the input to apply a parameter to all zones in the list. ZoneLists can be used effectively with the following objects: People, Lights, ElectricEquipment, GasEquipment, HotWaterEquipment, ZoneInfiltration:DesignFlowRate, ZoneVentilation:DesignFlowRate, Sizing:Zone, ZoneControl:Thermostat, and others.")]
    public class ZoneList
    {
        

[JsonProperty("zones")]
public string zones
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneGroup")]
    [Description("Adds a multiplier to a ZoneList. This can be used to reduce the amount of input n" +
        "ecessary for simulating repetitive structures, such as the identical floors of a" +
        " multi-story building.")]
    public class ZoneGroup
    {
        

[JsonProperty("zone_list_name")]
public string zone_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_list_multiplier")]
public float zone_list_multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
    }
    
    [JsonProperty("BuildingSurface:Detailed")]
    [Description("Allows for detailed entry of building heat transfer surfaces. Does not include su" +
        "bsurfaces such as windows or doors.")]
    public class BuildingSurface_Detailed
    {
        
        private void Ceiling;
        
        private void Floor;
        
        private void Roof;
        
        private void Wall;
        
        private void Adiabatic;
        
        private void Foundation;
        
        private void Ground;
        
        private void GroundBasementPreprocessorAverageFloor;
        
        private void GroundBasementPreprocessorAverageWall;
        
        private void GroundBasementPreprocessorLowerWall;
        
        private void GroundBasementPreprocessorUpperWall;
        
        private void GroundFCfactorMethod;
        
        private void GroundSlabPreprocessorAverage;
        
        private void GroundSlabPreprocessorCore;
        
        private void GroundSlabPreprocessorPerimeter;
        
        private void OtherSideCoefficients;
        
        private void OtherSideConditionsModel;
        
        private void Outdoors;
        
        private void Surface;
        
        private void Zone;
        
        private void NoSun;
        
        private void SunExposed;
        
        private void NoWind;
        
        private void WindExposed;
        

[JsonProperty("surface_type")]
public SurfacetypeType surface_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition")]
public OutsideboundaryconditionType outside_boundary_condition
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sun_exposure")]
public SunexposureType sun_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (SunexposureType)SunExposed;

[JsonProperty("wind_exposure")]
public WindexposureType wind_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (WindexposureType)WindExposed;

[JsonProperty("view_factor_to_ground")]
public string view_factor_to_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SurfacetypeType
        {
        }
        
        public enum OutsideboundaryconditionType
        {
        }
        
        public enum SunexposureType
        {
        }
        
        public enum WindexposureType
        {
        }
    }
    
    [JsonProperty("Wall:Detailed")]
    [Description("Allows for detailed entry of wall heat transfer surfaces.")]
    public class Wall_Detailed
    {
        
        private void Adiabatic;
        
        private void Foundation;
        
        private void Ground;
        
        private void GroundBasementPreprocessorAverageFloor;
        
        private void GroundBasementPreprocessorAverageWall;
        
        private void GroundBasementPreprocessorLowerWall;
        
        private void GroundBasementPreprocessorUpperWall;
        
        private void GroundFCfactorMethod;
        
        private void GroundSlabPreprocessorAverage;
        
        private void GroundSlabPreprocessorCore;
        
        private void GroundSlabPreprocessorPerimeter;
        
        private void OtherSideCoefficients;
        
        private void OtherSideConditionsModel;
        
        private void Outdoors;
        
        private void Surface;
        
        private void Zone;
        
        private void NoSun;
        
        private void SunExposed;
        
        private void NoWind;
        
        private void WindExposed;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition")]
public OutsideboundaryconditionType outside_boundary_condition
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sun_exposure")]
public SunexposureType sun_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (SunexposureType)SunExposed;

[JsonProperty("wind_exposure")]
public WindexposureType wind_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (WindexposureType)WindExposed;

[JsonProperty("view_factor_to_ground")]
public string view_factor_to_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OutsideboundaryconditionType
        {
        }
        
        public enum SunexposureType
        {
        }
        
        public enum WindexposureType
        {
        }
    }
    
    [JsonProperty("RoofCeiling:Detailed")]
    [Description("Allows for detailed entry of roof/ceiling heat transfer surfaces.")]
    public class RoofCeiling_Detailed
    {
        
        private void Adiabatic;
        
        private void Ground;
        
        private void GroundBasementPreprocessorAverageFloor;
        
        private void GroundBasementPreprocessorAverageWall;
        
        private void GroundBasementPreprocessorLowerWall;
        
        private void GroundBasementPreprocessorUpperWall;
        
        private void GroundSlabPreprocessorAverage;
        
        private void GroundSlabPreprocessorCore;
        
        private void GroundSlabPreprocessorPerimeter;
        
        private void OtherSideCoefficients;
        
        private void OtherSideConditionsModel;
        
        private void Outdoors;
        
        private void Surface;
        
        private void Zone;
        
        private void NoSun;
        
        private void SunExposed;
        
        private void NoWind;
        
        private void WindExposed;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition")]
public OutsideboundaryconditionType outside_boundary_condition
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sun_exposure")]
public SunexposureType sun_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (SunexposureType)SunExposed;

[JsonProperty("wind_exposure")]
public WindexposureType wind_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (WindexposureType)WindExposed;

[JsonProperty("view_factor_to_ground")]
public string view_factor_to_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OutsideboundaryconditionType
        {
        }
        
        public enum SunexposureType
        {
        }
        
        public enum WindexposureType
        {
        }
    }
    
    [JsonProperty("Floor:Detailed")]
    [Description("Allows for detailed entry of floor heat transfer surfaces.")]
    public class Floor_Detailed
    {
        
        private void Adiabatic;
        
        private void Foundation;
        
        private void Ground;
        
        private void GroundBasementPreprocessorAverageFloor;
        
        private void GroundBasementPreprocessorAverageWall;
        
        private void GroundBasementPreprocessorLowerWall;
        
        private void GroundBasementPreprocessorUpperWall;
        
        private void GroundFCfactorMethod;
        
        private void GroundSlabPreprocessorAverage;
        
        private void GroundSlabPreprocessorCore;
        
        private void GroundSlabPreprocessorPerimeter;
        
        private void OtherSideCoefficients;
        
        private void OtherSideConditionsModel;
        
        private void Outdoors;
        
        private void Surface;
        
        private void Zone;
        
        private void NoSun;
        
        private void SunExposed;
        
        private void NoWind;
        
        private void WindExposed;
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition")]
public OutsideboundaryconditionType outside_boundary_condition
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sun_exposure")]
public SunexposureType sun_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (SunexposureType)SunExposed;

[JsonProperty("wind_exposure")]
public WindexposureType wind_exposure
{
    get
    {
    }
    set
    {
    }
}
 = (WindexposureType)WindExposed;

[JsonProperty("view_factor_to_ground")]
public string view_factor_to_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OutsideboundaryconditionType
        {
        }
        
        public enum SunexposureType
        {
        }
        
        public enum WindexposureType
        {
        }
    }
    
    [JsonProperty("Wall:Exterior")]
    [Description("Allows for simplified entry of exterior walls. View Factor to Ground is automatic" +
        "ally calculated.")]
    public class Wall_Exterior
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Wall:Adiabatic")]
    [Description("Allows for simplified entry of interior walls.")]
    public class Wall_Adiabatic
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Wall:Underground")]
    [Description("Allows for simplified entry of underground walls.")]
    public class Wall_Underground
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Wall:Interzone")]
    [Description("Allows for simplified entry of interzone walls (walls between zones).")]
    public class Wall_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Roof")]
    [Description("Allows for simplified entry of roofs (exterior). View Factor to Ground is automat" +
        "ically calculated.")]
    public class Roof
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Ceiling:Adiabatic")]
    [Description("Allows for simplified entry of interior ceilings.")]
    public class Ceiling_Adiabatic
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Ceiling:Interzone")]
    [Description("Allows for simplified entry of ceilings using adjacent zone (interzone) heat tran" +
        "sfer - adjacent surface should be a floor")]
    public class Ceiling_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Floor:GroundContact")]
    [Description("Allows for simplified entry of exterior floors with ground contact. View Factors " +
        "to Ground is automatically calculated.")]
    public class Floor_GroundContact
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Floor:Adiabatic")]
    [Description("Allows for simplified entry of exterior floors ignoring ground contact or interio" +
        "r floors. View Factor to Ground is automatically calculated.")]
    public class Floor_Adiabatic
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Floor:Interzone")]
    [Description("Allows for simplified entry of floors using adjacent zone (interzone) heat transf" +
        "er - adjacent surface should be a ceiling.")]
    public class Floor_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)180;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width")]
public float width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("FenestrationSurface:Detailed")]
    [Description("Allows for detailed entry of subsurfaces (windows, doors, glass doors, tubular da" +
        "ylighting devices).")]
    public class FenestrationSurface_Detailed
    {
        
        private void Door;
        
        private void GlassDoor;
        
        private void TubularDaylightDiffuser;
        
        private void TubularDaylightDome;
        
        private void Window;
        

[JsonProperty("surface_type")]
public SurfacetypeType surface_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("view_factor_to_ground")]
public string view_factor_to_ground
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("frame_and_divider_name")]
public string frame_and_divider_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertex_1_x_coordinate")]
public float vertex_1_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_1_y_coordinate")]
public float vertex_1_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_1_z_coordinate")]
public float vertex_1_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_2_x_coordinate")]
public float vertex_2_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_2_y_coordinate")]
public float vertex_2_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_2_z_coordinate")]
public float vertex_2_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_3_x_coordinate")]
public float vertex_3_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_3_y_coordinate")]
public float vertex_3_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_3_z_coordinate")]
public float vertex_3_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_4_x_coordinate")]
public float vertex_4_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_4_y_coordinate")]
public float vertex_4_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertex_4_z_coordinate")]
public float vertex_4_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SurfacetypeType
        {
        }
    }
    
    [JsonProperty("Window")]
    [Description("Allows for simplified entry of Windows.")]
    public class Window
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("frame_and_divider_name")]
public string frame_and_divider_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Door")]
    [Description("Allows for simplified entry of opaque Doors.")]
    public class Door
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GlazedDoor")]
    [Description("Allows for simplified entry of glass Doors.")]
    public class GlazedDoor
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("frame_and_divider_name")]
public string frame_and_divider_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Window:Interzone")]
    [Description("Allows for simplified entry of interzone windows (adjacent to other zones).")]
    public class Window_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Door:Interzone")]
    [Description("Allows for simplified entry of interzone (opaque interior) doors (adjacent to oth" +
        "er zones).")]
    public class Door_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("GlazedDoor:Interzone")]
    [Description("Allows for simplified entry of interzone (glass interior) doors (adjacent to othe" +
        "r zones).")]
    public class GlazedDoor_Interzone
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("building_surface_name")]
public string building_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_boundary_condition_object")]
public string outside_boundary_condition_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiplier")]
public float multiplier
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WindowShadingControl")]
    [Description("Specifies the type, location, and controls for window shades, window blinds, and " +
        "switchable glazing. Referencing the surface objects for exterior windows and gla" +
        "ss doors (ref: FenestrationSurface:Detailed, Window, and GlazedDoor).")]
    public class WindowShadingControl
    {
        
        private void BetweenGlassBlind;
        
        private void BetweenGlassShade;
        
        private void ExteriorBlind;
        
        private void ExteriorScreen;
        
        private void ExteriorShade;
        
        private void InteriorBlind;
        
        private void InteriorShade;
        
        private void SwitchableGlazing;
        
        private void AlwaysOff;
        
        private void AlwaysOn;
        
        private void MeetDaylightIlluminanceSetpoint;
        
        private void OffNightAndOnDayIfCoolingAndHighSolarOnWindow;
        
        private void OnIfHighGlare;
        
        private void OnIfHighHorizontalSolar;
        
        private void OnIfHighOutdoorAirTempAndHighHorizontalSolar;
        
        private void OnIfHighOutdoorAirTempAndHighSolarOnWindow;
        
        private void OnIfHighOutdoorAirTemperature;
        
        private void OnIfHighSolarOnWindow;
        
        private void OnIfHighZoneAirTempAndHighHorizontalSolar;
        
        private void OnIfHighZoneAirTempAndHighSolarOnWindow;
        
        private void OnIfHighZoneAirTemperature;
        
        private void OnIfHighZoneCooling;
        
        private void OnIfScheduleAllows;
        
        private void OnNightAndOnDayIfCoolingAndHighSolarOnWindow;
        
        private void OnNightIfHeatingAndOffDay;
        
        private void OnNightIfHeatingAndOnDayIfCooling;
        
        private void OnNightIfLowInsideTempAndOffDay;
        
        private void OnNightIfLowOutdoorTempAndOffDay;
        
        private void OnNightIfLowOutdoorTempAndOnDayIfCooling;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        
        private void BlockBeamSolar;
        
        private void FixedSlatAngle;
        
        private void ScheduledSlatAngle;
        
        private void Group;
        
        private void Sequential;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shading_control_sequence_number")]
public float shading_control_sequence_number
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("shading_type")]
public ShadingtypeType shading_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("construction_with_shading_name")]
public string construction_with_shading_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shading_control_type")]
public ShadingcontroltypeType shading_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint")]
public float setpoint
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shading_control_is_scheduled")]
public ShadingcontrolisscheduledType shading_control_is_scheduled
{
    get
    {
    }
    set
    {
    }
}
 = (ShadingcontrolisscheduledType)No;

[JsonProperty("glare_control_is_active")]
public GlarecontrolisactiveType glare_control_is_active
{
    get
    {
    }
    set
    {
    }
}
 = (GlarecontrolisactiveType)No;

[JsonProperty("shading_device_material_name")]
public string shading_device_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_slat_angle_control_for_blinds")]
public TypeofslatanglecontrolforblindsType type_of_slat_angle_control_for_blinds
{
    get
    {
    }
    set
    {
    }
}
 = (TypeofslatanglecontrolforblindsType)FixedSlatAngle;

[JsonProperty("slat_angle_schedule_name")]
public string slat_angle_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_2")]
public float setpoint_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("daylighting_control_object_name")]
public string daylighting_control_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("multiple_surface_control_type")]
public MultiplesurfacecontroltypeType multiple_surface_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MultiplesurfacecontroltypeType)Sequential;

[JsonProperty("fenestration_surfaces")]
public string fenestration_surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ShadingtypeType
        {
        }
        
        [Description(@"OnIfScheduleAllows requires that Schedule Name be specified and Shading Control Is Scheduled = Yes. AlwaysOn, AlwaysOff and OnIfScheduleAllows are the only valid control types for ExteriorScreen. The following six control types are used primarily to reduce zone cooling load due to window solar gain Following entry should be used only if Shading Type = SwitchableGlazing and window is in a daylit zone The following three control types are used to reduce zone Heating load. They can be used with any Shading Type but are most appropriate for opaque interior or exterior shades with high insulating value (""opaque movable insulation"") The following two control types are used to reduce zone heating and cooling load. They can be used with any Shading Type but are most appropriate for translucent interior or exterior shades with high insulating value (""translucent movable insulation"") The following two control types are used to reduce zone Cooling load. They can be used with any Shading Type but are most appropriate for interior or exterior blinds,interior or exterior shades with low insulating value, or switchable glazing The following four control types require that both Setpoint and Setpoint2 be specified Setpoint will correspond to outdoor air temp or zone air temp (deg C) Setpoint2 will correspond to solar on window or horizontal solar (W/m2)")]
        public enum ShadingcontroltypeType
        {
        }
        
        [Description("If Yes, Schedule Name is required; if No, Schedule Name is not used. Shading Cont" +
            "rol Is Scheduled = Yes is required if Shading Control Type = OnIfScheduleAllows." +
            "")]
        public enum ShadingcontrolisscheduledType
        {
        }
        
        [Description(@"If Yes and window is in a daylit zone, shading is on if zone's discomfort glare index exceeds the maximum discomfort glare index specified in the Daylighting object referenced by the zone. The glare test is OR'ed with the test specified by Shading Control Type. Glare Control Is Active = Yes is required if Shading Control Type = OnIfHighGlare.")]
        public enum GlarecontrolisactiveType
        {
        }
        
        [Description("Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind. If" +
            " choice is ScheduledSlatAngle then Slat Angle Schedule Name is required.")]
        public enum TypeofslatanglecontrolforblindsType
        {
        }
        
        [Description(@"When Sequential is used the list of fenestration surfaces are controlled individually in the order specified When Group is used the entire list is controlled simultaneously and if glare control is needed the entire group of window shades are deployed together a the same time")]
        public enum MultiplesurfacecontroltypeType
        {
        }
    }
    
    [JsonProperty("WindowProperty:FrameAndDivider")]
    [Description("Specifies the dimensions of a window frame, dividers, and inside reveal surfaces." +
        " Referenced by the surface objects for exterior windows and glass doors (ref: Fe" +
        "nestrationSurface:Detailed, Window, and GlazedDoor).")]
    public class WindowProperty_FrameAndDivider
    {
        
        private void DividedLite;
        
        private void Suspended;
        

[JsonProperty("frame_width")]
public float frame_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("frame_outside_projection")]
public float frame_outside_projection
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("frame_inside_projection")]
public float frame_inside_projection
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("frame_conductance")]
public float frame_conductance
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ratio_of_frame_edge_glass_conductance_to_center_of_glass_conductance")]
public float ratio_of_frame_edge_glass_conductance_to_center_of_glass_conductance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("frame_solar_absorptance")]
public float frame_solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("frame_visible_absorptance")]
public float frame_visible_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("frame_thermal_hemispherical_emissivity")]
public float frame_thermal_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("divider_type")]
public DividertypeType divider_type
{
    get
    {
    }
    set
    {
    }
}
 = (DividertypeType)DividedLite;

[JsonProperty("divider_width")]
public float divider_width
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("number_of_horizontal_dividers")]
public float number_of_horizontal_dividers
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("number_of_vertical_dividers")]
public float number_of_vertical_dividers
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("divider_outside_projection")]
public float divider_outside_projection
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("divider_inside_projection")]
public float divider_inside_projection
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("divider_conductance")]
public float divider_conductance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ratio_of_divider_edge_glass_conductance_to_center_of_glass_conductance")]
public float ratio_of_divider_edge_glass_conductance_to_center_of_glass_conductance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("divider_solar_absorptance")]
public float divider_solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("divider_visible_absorptance")]
public float divider_visible_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("divider_thermal_hemispherical_emissivity")]
public float divider_thermal_hemispherical_emissivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("outside_reveal_solar_absorptance")]
public float outside_reveal_solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("inside_sill_depth")]
public float inside_sill_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("inside_sill_solar_absorptance")]
public float inside_sill_solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("inside_reveal_depth")]
public float inside_reveal_depth
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("inside_reveal_solar_absorptance")]
public float inside_reveal_solar_absorptance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum DividertypeType
        {
        }
    }
    
    [JsonProperty("WindowProperty:AirflowControl")]
    [Description("Used to control forced airflow through a gap between glass layers")]
    public class WindowProperty_AirflowControl
    {
        
        private void IndoorAir;
        
        private void OutdoorAir;
        
        private void IndoorAir;
        
        private void OutdoorAir;
        
        private void ReturnAir;
        
        private void AlwaysOff;
        
        private void AlwaysOnAtMaximumFlow;
        
        private void ScheduledOnly;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("airflow_source")]
public AirflowsourceType airflow_source
{
    get
    {
    }
    set
    {
    }
}
 = (AirflowsourceType)IndoorAir;

[JsonProperty("airflow_destination")]
public AirflowdestinationType airflow_destination
{
    get
    {
    }
    set
    {
    }
}
 = (AirflowdestinationType)OutdoorAir;

[JsonProperty("maximum_flow_rate")]
public float maximum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("airflow_control_type")]
public AirflowcontroltypeType airflow_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (AirflowcontroltypeType)AlwaysOnAtMaximumFlow;

[JsonProperty("airflow_is_scheduled")]
public AirflowisscheduledType airflow_is_scheduled
{
    get
    {
    }
    set
    {
    }
}
 = (AirflowisscheduledType)No;

[JsonProperty("airflow_multiplier_schedule_name")]
public string airflow_multiplier_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airflow_return_air_node_name")]
public string airflow_return_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AirflowsourceType
        {
        }
        
        [Description("If ReturnAir is selected, the name of the Return Air Node may be specified below." +
            "")]
        public enum AirflowdestinationType
        {
        }
        
        [Description("ScheduledOnly requires that Airflow Has Multiplier Schedule Name = Yes and that A" +
            "irflow Multiplier Schedule Name is specified.")]
        public enum AirflowcontroltypeType
        {
        }
        
        [Description("If Yes, then Airflow Multiplier Schedule Name must be specified")]
        public enum AirflowisscheduledType
        {
        }
    }
    
    [JsonProperty("WindowProperty:StormWindow")]
    [Description("This is a movable exterior glass layer that is usually applied in the winter and " +
        "removed in the summer.")]
    public class WindowProperty_StormWindow
    {
        

[JsonProperty("window_name")]
public string window_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storm_glass_layer_name")]
public string storm_glass_layer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_between_storm_glass_layer_and_adjacent_glass")]
public float distance_between_storm_glass_layer_and_adjacent_glass
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("month_that_storm_glass_layer_is_put_on")]
public float month_that_storm_glass_layer_is_put_on
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_month_that_storm_glass_layer_is_put_on")]
public float day_of_month_that_storm_glass_layer_is_put_on
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("month_that_storm_glass_layer_is_taken_off")]
public float month_that_storm_glass_layer_is_taken_off
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("day_of_month_that_storm_glass_layer_is_taken_off")]
public float day_of_month_that_storm_glass_layer_is_taken_off
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("InternalMass")]
    [Description(@"Used to describe internal zone surface area that does not need to be part of geometric representation. This should be the total surface area exposed to the zone air. If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    public class InternalMass
    {
        

[JsonProperty("construction_name")]
public string construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_area")]
public float surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Site")]
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    public class Shading_Site
    {
        

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Building")]
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    public class Shading_Building
    {
        

[JsonProperty("azimuth_angle")]
public float azimuth_angle
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle")]
public float tilt_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("starting_x_coordinate")]
public float starting_x_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_y_coordinate")]
public float starting_y_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("starting_z_coordinate")]
public float starting_z_coordinate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("length")]
public float length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height")]
public float height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Site:Detailed")]
    [Description("used for shading elements such as trees these items are fixed in space and would " +
        "not move with relative geometry")]
    public class Shading_Site_Detailed
    {
        

[JsonProperty("transmittance_schedule_name")]
public string transmittance_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Building:Detailed")]
    [Description("used for shading elements such as trees, other buildings, parts of this building " +
        "not being modeled these items are relative to the current building and would mov" +
        "e with relative geometry")]
    public class Shading_Building_Detailed
    {
        

[JsonProperty("transmittance_schedule_name")]
public string transmittance_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Overhang")]
    [Description("Overhangs are usually flat shading surfaces that reference a window or door.")]
    public class Shading_Overhang
    {
        

[JsonProperty("window_or_door_name")]
public string window_or_door_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_above_window_or_door")]
public float height_above_window_or_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle_from_window_door")]
public float tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("left_extension_from_window_door_width")]
public float left_extension_from_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_extension_from_window_door_width")]
public float right_extension_from_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("depth")]
public float depth
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Overhang:Projection")]
    [Description("Overhangs are typically flat shading surfaces that reference a window or door.")]
    public class Shading_Overhang_Projection
    {
        

[JsonProperty("window_or_door_name")]
public string window_or_door_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_above_window_or_door")]
public float height_above_window_or_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tilt_angle_from_window_door")]
public float tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("left_extension_from_window_door_width")]
public float left_extension_from_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_extension_from_window_door_width")]
public float right_extension_from_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("depth_as_fraction_of_window_door_height")]
public float depth_as_fraction_of_window_door_height
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Fin")]
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    public class Shading_Fin
    {
        

[JsonProperty("window_or_door_name")]
public string window_or_door_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_extension_from_window_door")]
public float left_extension_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_distance_above_top_of_window")]
public float left_distance_above_top_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_distance_below_bottom_of_window")]
public float left_distance_below_bottom_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_tilt_angle_from_window_door")]
public float left_tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("left_depth")]
public float left_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_extension_from_window_door")]
public float right_extension_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_distance_above_top_of_window")]
public float right_distance_above_top_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_distance_below_bottom_of_window")]
public float right_distance_below_bottom_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_tilt_angle_from_window_door")]
public float right_tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("right_depth")]
public float right_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Fin:Projection")]
    [Description("Fins are usually shading surfaces that are perpendicular to a window or door.")]
    public class Shading_Fin_Projection
    {
        

[JsonProperty("window_or_door_name")]
public string window_or_door_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_extension_from_window_door")]
public float left_extension_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_distance_above_top_of_window")]
public float left_distance_above_top_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_distance_below_bottom_of_window")]
public float left_distance_below_bottom_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("left_tilt_angle_from_window_door")]
public float left_tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("left_depth_as_fraction_of_window_door_width")]
public float left_depth_as_fraction_of_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_extension_from_window_door")]
public float right_extension_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_distance_above_top_of_window")]
public float right_distance_above_top_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_distance_below_bottom_of_window")]
public float right_distance_below_bottom_of_window
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("right_tilt_angle_from_window_door")]
public float right_tilt_angle_from_window_door
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)90;

[JsonProperty("right_depth_as_fraction_of_window_door_width")]
public float right_depth_as_fraction_of_window_door_width
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Shading:Zone:Detailed")]
    [Description("used For fins, overhangs, elements that shade the building, are attached to the b" +
        "uilding but are not part of the heat transfer calculations")]
    public class Shading_Zone_Detailed
    {
        

[JsonProperty("base_surface_name")]
public string base_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("transmittance_schedule_name")]
public string transmittance_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_vertices")]
public string number_of_vertices
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("vertices")]
public string vertices
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ShadingProperty:Reflectance")]
    [Description("If this object is not defined for a shading surface the default values listed in " +
        "following fields will be used in the solar reflection calculation.")]
    public class ShadingProperty_Reflectance
    {
        

[JsonProperty("shading_surface_name")]
public string shading_surface_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diffuse_solar_reflectance_of_unglazed_part_of_shading_surface")]
public float diffuse_solar_reflectance_of_unglazed_part_of_shading_surface
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("diffuse_visible_reflectance_of_unglazed_part_of_shading_surface")]
public float diffuse_visible_reflectance_of_unglazed_part_of_shading_surface
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("fraction_of_shading_surface_that_is_glazed")]
public float fraction_of_shading_surface_that_is_glazed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("glazing_construction_name")]
public string glazing_construction_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.UnitaryEquipment
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AirLoopHVAC:UnitarySystem")]
    [Description(@"AirloopHVAC:UnitarySystem is a generic HVAC system type that allows any configuration of coils and/or fan. This object is a replacement of other AirloopHVAC objects. This object can be used in outdoor air systems, outdoor air units, air loops, and as zone equipment if desired.")]
    public class AirLoopHVAC_UnitarySystem
    {
        
        private void Load;
        
        private void SetPoint;
        
        private void SingleZoneVAV;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        
        private void Fan:ComponentModel;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:DX:MultiSpeed;
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:DX:VariableSpeed;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Electric:MultiStage;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Gas:MultiStage;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Heating:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Heating:WaterToAirHeatPump:ParameterEstimation;
        
        private void Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:UserDefined;
        
        private void Coil:Cooling:DX;
        
        private void Coil:Cooling:DX:MultiSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed:ThermalStorage;
        
        private void Coil:Cooling:DX:TwoSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Cooling:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Cooling:WaterToAirHeatPump:ParameterEstimation;
        
        private void Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:UserDefined;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void CoilSystem:Cooling:Water:HeatExchangerAssisted;
        
        private void No;
        
        private void Yes;
        
        private void LatentOnlyLoadControl;
        
        private void LatentOrSensibleLoadControl;
        
        private void LatentWithSensibleLoadControl;
        
        private void SensibleOnlyLoadControl;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:UserDefined;
        
        private void FlowPerCoolingCapacity;
        
        private void FlowPerFloorArea;
        
        private void FractionOfAutosizedCoolingValue;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void FlowPerFloorArea;
        
        private void FlowPerHeatingCapacity;
        
        private void FractionOfAutosizedHeatingValue;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void FlowPerCoolingCapacity;
        
        private void FlowPerFloorArea;
        
        private void FlowPerHeatingCapacity;
        
        private void FractionOfAutosizedCoolingValue;
        
        private void FractionOfAutosizedHeatingValue;
        
        private void None;
        
        private void SupplyAirFlowRate;
        
        private void UnitarySystemPerformance:Multispeed;
        

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)Load;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_heating_coil_sizing_ratio")]
public float dx_heating_coil_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_doas_dx_cooling_coil")]
public UsedoasdxcoolingcoilType use_doas_dx_cooling_coil
{
    get
    {
    }
    set
    {
    }
}
 = (UsedoasdxcoolingcoilType)No;

[JsonProperty("minimum_supply_air_temperature")]
public string minimum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)2;

[JsonProperty("latent_load_control")]
public LatentloadcontrolType latent_load_control
{
    get
    {
    }
    set
    {
    }
}
 = (LatentloadcontrolType)SensibleOnlyLoadControl;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_method")]
public CoolingsupplyairflowratemethodType cooling_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_per_floor_area")]
public float cooling_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_fraction_of_autosized_cooling_supply_air_flow_rate")]
public float cooling_fraction_of_autosized_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate_per_unit_of_capacity")]
public float cooling_supply_air_flow_rate_per_unit_of_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_method")]
public HeatingsupplyairflowratemethodType heating_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_per_floor_area")]
public float heating_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_fraction_of_autosized_heating_supply_air_flow_rate")]
public float heating_fraction_of_autosized_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate_per_unit_of_capacity")]
public float heating_supply_air_flow_rate_per_unit_of_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_method")]
public NoloadsupplyairflowratemethodType no_load_supply_air_flow_rate_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_per_floor_area")]
public float no_load_supply_air_flow_rate_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_fraction_of_autosized_cooling_supply_air_flow_rate")]
public float no_load_fraction_of_autosized_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_fraction_of_autosized_heating_supply_air_flow_rate")]
public float no_load_fraction_of_autosized_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation")]
public float no_load_supply_air_flow_rate_per_unit_of_capacity_during_cooling_operation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation")]
public float no_load_supply_air_flow_rate_per_unit_of_capacity_during_heating_operation
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature")]
public string maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)80;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string outdoor_dry_bulb_temperature_sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("heat_pump_time_constant")]
public float heat_pump_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("fraction_of_on_cycle_power_use")]
public float fraction_of_on_cycle_power_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("heat_pump_fan_delay_time")]
public float heat_pump_fan_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("ancillary_on_cycle_electric_power")]
public float ancillary_on_cycle_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ancillary_off_cycle_electric_power")]
public float ancillary_off_cycle_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public float design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_temperature_for_heat_recovery")]
public float maximum_temperature_for_heat_recovery
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80;

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string heat_recovery_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string heat_recovery_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_multispeed_object_type")]
public DesignspecificationmultispeedobjecttypeType design_specification_multispeed_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_multispeed_object_name")]
public string design_specification_multispeed_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Load control requires a Controlling Zone name. SetPoint control requires set points at coil outlet node. SingleZoneVAV also requires a Controlling Zone name and allows load control at low speed fan until the load exceeds capacity or outlet air temperature limits. The fan speed is then increased.")]
        public enum ControltypeType
        {
        }
        
        [Description(@"None = meet sensible load only. Required when Control Type = SingleZoneVAV. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type Coil:Cooling:DX:TwoStageWithHumidityControlMode or CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode either switches the coil mode or allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description(@"Enter the type of supply air fan if included in the unitary system. Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air fan operating mode schedule values greater than 0). Specify a Fan:SystemModel or a Fan:OnOff object when the Supply Air Fan Operating Mode Schedule Name input field above is left blank. Specify a Fan:SystemModel or a Fan:VariableVolume when modeling VAV systems which used setpoint based control if the fan is included in the unitary system object. The ComponentModel fan type may be substituted for the ConstantVolume or VariableVolume fan types when more detailed fan modeling is required. The variable or constant volume fan may be specified on the branch instead of contained within the unitary system object (i.e., this field may be blank for certain configurations).")]
        public enum SupplyfanobjecttypeType
        {
        }
        
        [Description("Enter the type of supply air fan if included in the unitary system.")]
        public enum FanplacementType
        {
        }
        
        [Description("Enter the type of heating coil if included in the unitary system.")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Enter the type of cooling coil if included in the unitary system.")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("If Yes, the DX cooling coil runs as 100% DOAS DX coil. If No, the DX cooling coil" +
            " runs as a regular DX coil. If left blank the default is regular dx coil.")]
        public enum UsedoasdxcoolingcoilType
        {
        }
        
        [Description(@"SensibleOnlyLoadControl is selected when thermostat or SingleZoneVAV control is used. LatentOnlyLoadControl is selected when humidistat control is used. LatentWithSensibleLoadControl is selected when thermostat control is used and dehumidification is required only when a sensible load exists. LatentOrSensibleLoadControl is selected when thermostat control is used and dehumidification is required any time the humidistat set point is exceeded.")]
        public enum LatentloadcontrolType
        {
        }
        
        [Description(@"Enter the type of supplemental heating or reheat coil if included in the unitary system. Only required if dehumidification control type is ""CoolReheat"". This coil supplements heating mode operation or reheats the supply air during dehumidification mode operation. If set point based control is used the coils operate to meet their respective supply air temperature set point.")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
        
        [Description(@"Enter the method used to determine the cooling supply air volume flow rate. None is used when a cooling coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation.")]
        public enum CoolingsupplyairflowratemethodType
        {
        }
        
        [Description(@"Enter the method used to determine the heating supply air volume flow rate. None is used when a heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the value determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
        public enum HeatingsupplyairflowratemethodType
        {
        }
        
        [Description(@"Enter the method used to determine the supply air volume flow rate when no cooling or heating is required. None is used when a cooling and heating coil is not included in the unitary system or this field may be blank. SupplyAirFlowRate is selected when the magnitude of the supply air volume is used. FlowPerFloorArea is selected when the supply air volume flow rate is based on total floor area served by the unitary system. FractionOfAutosizedCoolingValue is selected when the supply air volume is a fraction of the cooling value determined by the simulation. FractionOfAutosizedHeatingValue is selected when the supply air volume is a fraction of the heating value determined by the simulation. FlowPerCoolingCapacity is selected when the supply air volume is a fraction of the cooling capacity as determined by the simulation. FlowPerHeatingCapacity is selected when the supply air volume is a fraction of the heating capacity as determined by the simulation.")]
        public enum NoloadsupplyairflowratemethodType
        {
        }
        
        [Description("Enter the type of performance specification object used to describe the multispee" +
            "d coil.")]
        public enum DesignspecificationmultispeedobjecttypeType
        {
        }
    }
    
    [JsonProperty("UnitarySystemPerformance:Multispeed")]
    [Description(@"The UnitarySystemPerformance object is used to specify the air flow ratio at each operating speed. This object is primarily used for multispeed DX and water coils to allow operation at alternate flow rates different from those specified in the coil object.")]
    public class UnitarySystemPerformance_Multispeed
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("number_of_speeds_for_heating")]
public float number_of_speeds_for_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds_for_cooling")]
public float number_of_speeds_for_cooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("single_mode_operation")]
public SinglemodeoperationType single_mode_operation
{
    get
    {
    }
    set
    {
    }
}
 = (SinglemodeoperationType)No;

[JsonProperty("no_load_supply_air_flow_rate_ratio")]
public float no_load_supply_air_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("flow_ratios")]
public string flow_ratios
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Controls coil operation during each HVAC timestep. This choice does not apply to speed 1 operation. Yes = operate at the highest speed possible without exceeding the current load. No = allow operation at the average of two adjacent speeds to match the current load.")]
        public enum SinglemodeoperationType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:Unitary:Furnace:HeatOnly")]
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:UnitaryHeatOnly.")]
    public class AirLoopHVAC_Unitary_Furnace_HeatOnly
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("furnace_air_inlet_node_name")]
public string furnace_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("furnace_air_outlet_node_name")]
public string furnace_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature")]
public string maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)80;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
            "ing mode schedule values are greater than 0).")]
        public enum SupplyfanobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum HeatingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:Unitary:Furnace:HeatCool")]
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:UnitaryHeatCool.")]
    public class AirLoopHVAC_Unitary_Furnace_HeatCool
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("furnace_air_inlet_node_name")]
public string furnace_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("furnace_air_outlet_node_name")]
public string furnace_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature")]
public string maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)80;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air" +
            " fan operating mode schedule values not equal to 0).")]
        public enum SupplyfanobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Only works with DX cooling coil types")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description("Only required if dehumidification control type is \"CoolReheat\" works with gas, el" +
            "ectric, hot water and steam heating coils")]
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatOnly")]
    [Description("Unitary system, heating-only with constant volume supply fan (continuous or cycli" +
        "ng) and heating coil (gas, electric, hot water, or steam). Identical to AirLoopH" +
        "VAC:Unitary:Furnace:HeatOnly.")]
    public class AirLoopHVAC_UnitaryHeatOnly
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unitary_system_air_inlet_node_name")]
public string unitary_system_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unitary_system_air_outlet_node_name")]
public string unitary_system_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature")]
public string maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)80;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
            "ing mode schedule values are greater than 0).")]
        public enum SupplyfanobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum HeatingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatCool")]
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, or steam), and optional reheat coil for dehumidification control. Identical to AirLoopHVAC:Unitary:Furnace:HeatCool.")]
    public class AirLoopHVAC_UnitaryHeatCool
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        
        private void Coil:Heating:Desuperheater;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unitary_system_air_inlet_node_name")]
public string unitary_system_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unitary_system_air_outlet_node_name")]
public string unitary_system_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature")]
public string maximum_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)80;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_object_type")]
public SupplyfanobjecttypeType supply_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. supply air" +
            " fan operating mode schedule values not equal to 0).")]
        public enum SupplyfanobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Only works with DX cooling coil types or Coil:Cooling:DX:VariableSpeed.")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description("Only required if dehumidification control type is \"CoolReheat\" works with gas, el" +
            "ectric, desuperheating, hot water and steam heating coils")]
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatPump:AirToAir")]
    [Description("Unitary heat pump system, heating and cooling, single-speed with supply fan, dire" +
        "ct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), and supp" +
        "lemental heating coil (gas, electric, hot water, or steam).")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:DX:VariableSpeed;
        
        private void CoilSystem:IntegratedHeatPump:AirSource;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void CoilSystem:IntegratedHeatPump:AirSource;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;
        
        [Description("Fan:ConstantVolume only works with continuous fan operating mode (i.e. fan operat" +
            "ing mode schedule values are greater than 0 or the fan operating mode schedule n" +
            "ame field is left blank).")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description("Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed or C" +
            "oilSystem:IntegratedHeatPump:AirSource")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchange" +
            "rAssisted or Coil:Cooling:DX:VariableSpeed or CoilSystem:IntegratedHeatPump:AirS" +
            "ource")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description(@"None = meet sensible load only Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with cooling coil type CoilSystem:Cooling:DX:HeatExchangerAssisted. This control mode allows the heat exchanger to be turned on and off based on the zone dehumidification requirements. A ZoneControl:Humidistat object is also required. CoolReheat = cool beyond the dry-bulb setpoint. as required to meet the humidity setpoint. Valid with all cooling coil types. When a heat exchanger assisted Cooling coil is used, the heat exchanger is locked on at all times. A ZoneControl:Humidistat object is also required.")]
        public enum DehumidificationcontroltypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatPump:WaterToAir")]
    [Description(@"Unitary heat pump system, heating and cooling, single-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, DX heating coil (water-to-air heat pump), and supplemental heating coil (gas, electric, hot water, or steam).")]
    public class AirLoopHVAC_UnitaryHeatPump_WaterToAir
    {
        
        private void Fan:OnOff;
        
        private void Coil:Heating:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Heating:WaterToAirHeatPump:ParameterEstimation;
        
        private void Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:Cooling:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Cooling:WaterToAirHeatPump:ParameterEstimation;
        
        private void Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void CoolReheat;
        
        private void None;
        
        private void Constant;
        
        private void ConstantOnDemand;
        
        private void Cycling;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_flow_rate")]
public string supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_convergence")]
public float heating_convergence
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_convergence")]
public float cooling_convergence
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("heat_pump_time_constant")]
public float heat_pump_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("fraction_of_on_cycle_power_use")]
public float fraction_of_on_cycle_power_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("heat_pump_fan_delay_time")]
public float heat_pump_fan_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string outdoor_dry_bulb_temperature_sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("heat_pump_coil_water_flow_mode")]
public HeatpumpcoilwaterflowmodeType heat_pump_coil_water_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpcoilwaterflowmodeType)Cycling;
        
        [Description("Only works with On/Off Fan")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description("None = meet sensible load only CoolReheat = cool beyond the dry-bulb setpoint. as" +
            " required to meet the humidity setpoint. Valid only with Coil:Cooling:WaterToAir" +
            "HeatPump:EquationFit or Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit" +
            "")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
        public enum HeatpumpcoilwaterflowmodeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatCool:VAVChangeoverBypass")]
    [Description(@"Unitary system, heating and cooling with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (gas, electric, hot water, steam, or DX air-to-air heat pump) and bypass damper for variable volume flow to terminal units. Used with AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat or AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat.")]
    public class AirLoopHVAC_UnitaryHeatCool_VAVChangeoverBypass
    {
        
        private void OutdoorAir:Mixer;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:TwoStageWithHumidityControlMode;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:DX:VariableSpeed;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoolingPriority;
        
        private void HeatingPriority;
        
        private void LoadPriority;
        
        private void ZonePriority;
        
        private void CoolReheat;
        
        private void Multimode;
        
        private void None;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_flow_rate_multiplier_schedule_name")]
public string outdoor_air_flow_rate_multiplier_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("bypass_duct_mixer_node_name")]
public string bypass_duct_mixer_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("bypass_duct_splitter_node_name")]
public string bypass_duct_splitter_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_placement")]
public SupplyairfanplacementType supply_air_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("priority_control_mode")]
public PrioritycontrolmodeType priority_control_mode
{
    get
    {
    }
    set
    {
    }
}
 = (PrioritycontrolmodeType)ZonePriority;

[JsonProperty("minimum_outlet_air_temperature_during_cooling_operation")]
public float minimum_outlet_air_temperature_during_cooling_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)8;

[JsonProperty("maximum_outlet_air_temperature_during_heating_operation")]
public float maximum_outlet_air_temperature_during_heating_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)None;

[JsonProperty("plenum_or_mixer_inlet_node_name")]
public string plenum_or_mixer_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_runtime_before_operating_mode_change")]
public float minimum_runtime_before_operating_mode_change
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.25;
        
        [Description("currently only one type OutdoorAir:Mixer object is available.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        [Description("Specify the type of supply air fan used in this unitary system.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description("Specify supply air fan placement as either blow through or draw through. BlowThro" +
            "ugh means the supply air fan is located before the cooling coil. DrawThrough mea" +
            "ns the supply air fan is located after the heating coil.")]
        public enum SupplyairfanplacementType
        {
        }
        
        [Description("Specify the type of cooling coil used in this unitary system.")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with DX, gas, electric, hot water and steam heating coils Specify the type " +
            "of heating coil used in this unitary system.")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description(@"CoolingPriority = system provides cooling if any zone requires cooling. HeatingPriority = system provides heating if any zone requires heating. ZonePriority = system controlled based on the total number of zones requiring cooling or heating (highest number of zones in cooling or heating determines the system's operating mode). LoadPriority = system provides cooling or heating based on total zone loads.")]
        public enum PrioritycontrolmodeType
        {
        }
        
        [Description(@"None = meet sensible load only. Multimode = activate enhanced dehumidification mode as needed and meet sensible load. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. CoolReheat = cool beyond the Dry-Bulb temperature setpoint as required to meet the humidity setpoint. Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode. For all dehumidification controls, the max humidity setpoint on this unitary system's air outlet node is used. This must be set using ZoneControl:Humidistat and SetpointManager:SingleZone:Humidity:Maximum, SetpointManager:MultiZone:Humidity:Maximum or SetpointManager:MultiZone:MaximumHumidity:Average objects.")]
        public enum DehumidificationcontroltypeType
        {
        }
    }
    
    [JsonProperty("AirLoopHVAC:UnitaryHeatPump:AirToAir:MultiSpeed")]
    [Description(@"Unitary system, heating and cooling, multi-speed with constant volume supply fan (continuous or cycling), direct expansion (DX) cooling coil, heating coil (DX air-to-air heat pump, gas, electric, hot water, or steam), and supplemental heating coil (gas, electric, hot water, or steam).")]
    public class AirLoopHVAC_UnitaryHeatPump_AirToAir_MultiSpeed
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Coil:Heating:DX:MultiSpeed;
        
        private void Coil:Heating:Electric:MultiStage;
        
        private void Coil:Heating:Gas:MultiStage;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:DX:MultiSpeed;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_placement")]
public SupplyairfanplacementType supply_air_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_dry_bulb_temperature_for_compressor_operation")]
public float minimum_outdoor_dry_bulb_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-8;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("auxiliary_on_cycle_electric_power")]
public float auxiliary_on_cycle_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("auxiliary_off_cycle_electric_power")]
public float auxiliary_off_cycle_electric_power
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_heat_recovery_water_flow_rate")]
public float design_heat_recovery_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_temperature_for_heat_recovery")]
public float maximum_temperature_for_heat_recovery
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)80;

[JsonProperty("heat_recovery_water_inlet_node_name")]
public string heat_recovery_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_water_outlet_node_name")]
public string heat_recovery_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds_for_heating")]
public float number_of_speeds_for_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_speeds_for_cooling")]
public float number_of_speeds_for_cooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_speed_1_supply_air_flow_rate")]
public string heating_speed_1_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_speed_2_supply_air_flow_rate")]
public string heating_speed_2_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_speed_3_supply_air_flow_rate")]
public string heating_speed_3_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_speed_4_supply_air_flow_rate")]
public string heating_speed_4_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_speed_1_supply_air_flow_rate")]
public string cooling_speed_1_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_speed_2_supply_air_flow_rate")]
public string cooling_speed_2_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_speed_3_supply_air_flow_rate")]
public string cooling_speed_3_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_speed_4_supply_air_flow_rate")]
public string cooling_speed_4_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Select the type of supply air fan used in this unitary system.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description(@"Select supply air fan placement as either BlowThrough or DrawThrough. BlowThrough means the supply air fan is located before the cooling coil. DrawThrough means the supply air fan is located after the heating coil but before the optional supplemental heating coil.")]
        public enum SupplyairfanplacementType
        {
        }
        
        [Description("Multi Speed DX, Electric, Gas, and Single speed Water and Steam coils")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Only works with Coil:Cooling:DX:MultiSpeed")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
    }
}
namespace EnergyPlus.UserDefinedHVACandPlantComponentModels
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ZoneHVAC:ForcedAir:UserDefined")]
    [Description("Defines a generic zone air unit for custom modeling using Energy Management Syste" +
        "m or External Interface")]
    public class ZoneHVAC_ForcedAir_UserDefined
    {
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string overall_model_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string model_setup_and_sizing_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_outlet_node_name")]
public string secondary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_plant_loop_connections")]
public float number_of_plant_loop_connections
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_inlet_node_name")]
public string plant_connection_1_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_outlet_node_name")]
public string plant_connection_1_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_inlet_node_name")]
public string plant_connection_2_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_outlet_node_name")]
public string plant_connection_2_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_inlet_node_name")]
public string plant_connection_3_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_outlet_node_name")]
public string plant_connection_3_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_inlet_water_storage_tank_name")]
public string supply_inlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_outlet_water_storage_tank_name")]
public string collection_outlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_zone_name")]
public string ambient_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirTerminal:SingleDuct:UserDefined")]
    [Description("Defines a generic single duct air terminal unit for custom modeling using Energy " +
        "Management System or External Interface")]
    public class AirTerminal_SingleDuct_UserDefined
    {
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string overall_model_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string model_setup_and_sizing_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_outlet_node_name")]
public string secondary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_plant_loop_connections")]
public float number_of_plant_loop_connections
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_inlet_node_name")]
public string plant_connection_1_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_outlet_node_name")]
public string plant_connection_1_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_inlet_node_name")]
public string plant_connection_2_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_outlet_node_name")]
public string plant_connection_2_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_inlet_water_storage_tank_name")]
public string supply_inlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_outlet_water_storage_tank_name")]
public string collection_outlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_zone_name")]
public string ambient_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("Coil:UserDefined")]
    [Description("Defines a generic air system component for custom modeling using Energy Managemen" +
        "t System or External Interface")]
    public class Coil_UserDefined
    {
        
        private void No;
        
        private void Yes;
        

[JsonProperty("overall_model_simulation_program_calling_manager_name")]
public string overall_model_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("model_setup_and_sizing_program_calling_manager_name")]
public string model_setup_and_sizing_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_air_connections")]
public float number_of_air_connections
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_1_inlet_node_name")]
public string air_connection_1_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_1_outlet_node_name")]
public string air_connection_1_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_2_inlet_node_name")]
public string air_connection_2_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_2_outlet_node_name")]
public string air_connection_2_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_is_used")]
public PlantconnectionisusedType plant_connection_is_used
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_inlet_node_name")]
public string plant_connection_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_outlet_node_name")]
public string plant_connection_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_inlet_water_storage_tank_name")]
public string supply_inlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_outlet_water_storage_tank_name")]
public string collection_outlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_zone_name")]
public string ambient_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum PlantconnectionisusedType
        {
        }
    }
    
    [JsonProperty("PlantComponent:UserDefined")]
    [Description("Defines a generic plant component for custom modeling using Energy Management Sys" +
        "tem or External Interface")]
    public class PlantComponent_UserDefined
    {
        
        private void DemandsLoad;
        
        private void MeetsLoadWithNominalCapacity;
        
        private void MeetsLoadWithNominalCapacityHiOutLimit;
        
        private void MeetsLoadWithNominalCapacityLowOutLimit;
        
        private void MeetsLoadWithPassiveCapacity;
        
        private void NeedsFlowAndTurnsLoopOn;
        
        private void NeedsFlowIfLoopOn;
        
        private void ReceivesWhateverFlowAvailable;
        
        private void DemandsLoad;
        
        private void MeetLoadWithNominalCapacity;
        
        private void MeetLoadWithNominalCapacityHiOutLimit;
        
        private void MeetLoadWithNominalCapacityLowOutLimit;
        
        private void MeetLoadWithPassiveCapacity;
        
        private void NeedsFlowAndTurnsLoopOn;
        
        private void NeedsFlowIfLoopOn;
        
        private void ReceivesWhateverFlowAvailable;
        
        private void DemandsLoad;
        
        private void MeetLoadWithNominalCapacity;
        
        private void MeetLoadWithNominalCapacityHiOutLimit;
        
        private void MeetLoadWithNominalCapacityLowOutLimit;
        
        private void MeetLoadWithPassiveCapacity;
        
        private void NeedsFlowAndTurnsLoopOn;
        
        private void NeedsFlowIfLoopOn;
        
        private void ReceivesWhateverFlowAvailable;
        
        private void DemandsLoad;
        
        private void MeetLoadWithNominalCapacity;
        
        private void MeetLoadWithNominalCapacityHiOutLimit;
        
        private void MeetLoadWithNominalCapacityLowOutLimit;
        
        private void MeetLoadWithPassiveCapacity;
        
        private void NeedsFlowAndTurnsLoopOn;
        
        private void NeedsFlowIfLoopOn;
        
        private void ReceivesWhateverFlowAvailable;
        

[JsonProperty("main_model_program_calling_manager_name")]
public string main_model_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_plant_loop_connections")]
public float number_of_plant_loop_connections
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_inlet_node_name")]
public string plant_connection_1_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_outlet_node_name")]
public string plant_connection_1_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_loading_mode")]
public PlantconnectionloadingmodeType plant_connection_1_loading_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_loop_flow_request_mode")]
public PlantconnectionloopflowrequestmodeType plant_connection_1_loop_flow_request_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_initialization_program_calling_manager_name")]
public string plant_connection_1_initialization_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_1_simulation_program_calling_manager_name")]
public string plant_connection_1_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_inlet_node_name")]
public string plant_connection_2_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_outlet_node_name")]
public string plant_connection_2_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_loading_mode")]
public PlantconnectionloadingmodeType plant_connection_2_loading_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_loop_flow_request_mode")]
public PlantconnectionloopflowrequestmodeType plant_connection_2_loop_flow_request_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_initialization_program_calling_manager_name")]
public string plant_connection_2_initialization_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_2_simulation_program_calling_manager_name")]
public string plant_connection_2_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_inlet_node_name")]
public string plant_connection_3_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_outlet_node_name")]
public string plant_connection_3_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_loading_mode")]
public PlantconnectionloadingmodeType plant_connection_3_loading_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_loop_flow_request_mode")]
public PlantconnectionloopflowrequestmodeType plant_connection_3_loop_flow_request_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_initialization_program_calling_manager_name")]
public string plant_connection_3_initialization_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_3_simulation_program_calling_manager_name")]
public string plant_connection_3_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_inlet_node_name")]
public string plant_connection_4_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_outlet_node_name")]
public string plant_connection_4_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_loading_mode")]
public PlantconnectionloadingmodeType plant_connection_4_loading_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_loop_flow_request_mode")]
public PlantconnectionloopflowrequestmodeType plant_connection_4_loop_flow_request_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_initialization_program_calling_manager_name")]
public string plant_connection_4_initialization_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("plant_connection_4_simulation_program_calling_manager_name")]
public string plant_connection_4_simulation_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_inlet_node_name")]
public string air_connection_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_connection_outlet_node_name")]
public string air_connection_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_inlet_water_storage_tank_name")]
public string supply_inlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_outlet_water_storage_tank_name")]
public string collection_outlet_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_zone_name")]
public string ambient_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum PlantconnectionloadingmodeType
        {
        }
        
        public enum PlantconnectionloopflowrequestmodeType
        {
        }
        
        public enum PlantconnectionloadingmodeType
        {
        }
        
        public enum PlantconnectionloopflowrequestmodeType
        {
        }
        
        public enum PlantconnectionloadingmodeType
        {
        }
        
        public enum PlantconnectionloopflowrequestmodeType
        {
        }
        
        public enum PlantconnectionloadingmodeType
        {
        }
        
        public enum PlantconnectionloopflowrequestmodeType
        {
        }
    }
    
    [JsonProperty("PlantEquipmentOperation:UserDefined")]
    [Description("Defines a generic plant operation scheme for custom supervisory control using Ene" +
        "rgy Management System or External Interface to dispatch loads")]
    public class PlantEquipmentOperation_UserDefined
    {
        

[JsonProperty("main_model_program_calling_manager_name")]
public string main_model_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initialization_program_calling_manager_name")]
public string initialization_program_calling_manager_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_1_object_type")]
public string equipment_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_1_name")]
public string equipment_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_2_object_type")]
public string equipment_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_2_name")]
public string equipment_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_3_object_type")]
public string equipment_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_3_name")]
public string equipment_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_4_object_type")]
public string equipment_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_4_name")]
public string equipment_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_5_object_type")]
public string equipment_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_5_name")]
public string equipment_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_6_object_type")]
public string equipment_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_6_name")]
public string equipment_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_7_object_type")]
public string equipment_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_7_name")]
public string equipment_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_8_object_type")]
public string equipment_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_8_name")]
public string equipment_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_9_object_type")]
public string equipment_9_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_9_name")]
public string equipment_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_10_object_type")]
public string equipment_10_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("equipment_10_name")]
public string equipment_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.VariableRefrigerantFlowEquipment
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AirConditioner:VariableRefrigerantFlow")]
    [Description("Variable refrigerant flow (VRF) air-to-air heat pump condensing unit (includes on" +
        "e or more electric compressors and outdoor fan). Serves one or more VRF zone ter" +
        "minal units. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and ZoneTerminalU" +
        "nitList.")]
    public class AirConditioner_VariableRefrigerantFlow
    {
        
        private void DryBulbTemperature;
        
        private void WetBulbTemperature;
        
        private void LoadPriority;
        
        private void MasterThermostatPriority;
        
        private void Scheduled;
        
        private void ThermostatOffsetPriority;
        
        private void ZonePriority;
        
        private void No;
        
        private void Yes;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        
        private void AirCooled;
        
        private void EvaporativelyCooled;
        
        private void WaterCooled;
        
        private void Diesel;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_total_cooling_capacity")]
public string gross_rated_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_cooling_cop")]
public float gross_rated_cooling_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.3;

[JsonProperty("minimum_outdoor_temperature_in_cooling_mode")]
public float minimum_outdoor_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-6;

[JsonProperty("maximum_outdoor_temperature_in_cooling_mode")]
public float maximum_outdoor_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)43;

[JsonProperty("cooling_capacity_ratio_modifier_function_of_low_temperature_curve_name")]
public string cooling_capacity_ratio_modifier_function_of_low_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_ratio_boundary_curve_name")]
public string cooling_capacity_ratio_boundary_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_capacity_ratio_modifier_function_of_high_temperature_curve_name")]
public string cooling_capacity_ratio_modifier_function_of_high_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_energy_input_ratio_modifier_function_of_low_temperature_curve_name")]
public string cooling_energy_input_ratio_modifier_function_of_low_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_energy_input_ratio_boundary_curve_name")]
public string cooling_energy_input_ratio_boundary_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_energy_input_ratio_modifier_function_of_high_temperature_curve_name")]
public string cooling_energy_input_ratio_modifier_function_of_high_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name")]
public string cooling_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name")]
public string cooling_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_combination_ratio_correction_factor_curve_name")]
public string cooling_combination_ratio_correction_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_part_load_fraction_correlation_curve_name")]
public string cooling_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("gross_rated_heating_capacity")]
public string gross_rated_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_heating_capacity_sizing_ratio")]
public float rated_heating_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("gross_rated_heating_cop")]
public float gross_rated_heating_cop
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.4;

[JsonProperty("minimum_outdoor_temperature_in_heating_mode")]
public float minimum_outdoor_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-20;

[JsonProperty("maximum_outdoor_temperature_in_heating_mode")]
public float maximum_outdoor_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("heating_capacity_ratio_modifier_function_of_low_temperature_curve_name")]
public string heating_capacity_ratio_modifier_function_of_low_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_ratio_boundary_curve_name")]
public string heating_capacity_ratio_boundary_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_capacity_ratio_modifier_function_of_high_temperature_curve_name")]
public string heating_capacity_ratio_modifier_function_of_high_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_energy_input_ratio_modifier_function_of_low_temperature_curve_name")]
public string heating_energy_input_ratio_modifier_function_of_low_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_energy_input_ratio_boundary_curve_name")]
public string heating_energy_input_ratio_boundary_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_energy_input_ratio_modifier_function_of_high_temperature_curve_name")]
public string heating_energy_input_ratio_modifier_function_of_high_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_performance_curve_outdoor_temperature_type")]
public HeatingperformancecurveoutdoortemperaturetypeType heating_performance_curve_outdoor_temperature_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingperformancecurveoutdoortemperaturetypeType)WetBulbTemperature;

[JsonProperty("heating_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name")]
public string heating_energy_input_ratio_modifier_function_of_low_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name")]
public string heating_energy_input_ratio_modifier_function_of_high_part_load_ratio_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_combination_ratio_correction_factor_curve_name")]
public string heating_combination_ratio_correction_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_part_load_fraction_correlation_curve_name")]
public string heating_part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_heat_pump_part_load_ratio")]
public float minimum_heat_pump_part_load_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.15;

[JsonProperty("zone_name_for_master_thermostat_location")]
public string zone_name_for_master_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("master_thermostat_priority_control_type")]
public MasterthermostatprioritycontroltypeType master_thermostat_priority_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (MasterthermostatprioritycontroltypeType)MasterThermostatPriority;

[JsonProperty("thermostat_priority_schedule_name")]
public string thermostat_priority_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_terminal_unit_list_name")]
public string zone_terminal_unit_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_pump_waste_heat_recovery")]
public HeatpumpwasteheatrecoveryType heat_pump_waste_heat_recovery
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpwasteheatrecoveryType)No;

[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode")]
public float equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("vertical_height_used_for_piping_correction_factor")]
public float vertical_height_used_for_piping_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piping_correction_factor_for_length_in_cooling_mode_curve_name")]
public string piping_correction_factor_for_length_in_cooling_mode_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piping_correction_factor_for_height_in_cooling_mode_coefficient")]
public float piping_correction_factor_for_height_in_cooling_mode_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode")]
public float equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piping_correction_factor_for_length_in_heating_mode_curve_name")]
public string piping_correction_factor_for_length_in_heating_mode_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("piping_correction_factor_for_height_in_heating_mode_coefficient")]
public float piping_correction_factor_for_height_in_heating_mode_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("crankcase_heater_power_per_compressor")]
public float crankcase_heater_power_per_compressor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)33;

[JsonProperty("number_of_compressors")]
public float number_of_compressors
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public float ratio_of_compressor_size_to_total_compressor_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)Resistive;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("condenser_type")]
public CondensertypeType condenser_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensertypeType)AirCooled;

[JsonProperty("condenser_inlet_node_name")]
public string condenser_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_outlet_node_name")]
public string condenser_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_condenser_volume_flow_rate")]
public string water_condenser_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_effectiveness")]
public float evaporative_condenser_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("evaporative_condenser_air_flow_rate")]
public string evaporative_condenser_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporative_condenser_pump_rated_power_consumption")]
public string evaporative_condenser_pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("basin_heater_capacity")]
public float basin_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("basin_heater_setpoint_temperature")]
public float basin_heater_setpoint_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("basin_heater_operating_schedule_name")]
public string basin_heater_operating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FueltypeType)Electricity;

[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public float minimum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public float maximum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_recovery_cooling_capacity_modifier_curve_name")]
public string heat_recovery_cooling_capacity_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_heat_recovery_cooling_capacity_fraction")]
public float initial_heat_recovery_cooling_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("heat_recovery_cooling_capacity_time_constant")]
public float heat_recovery_cooling_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.15;

[JsonProperty("heat_recovery_cooling_energy_modifier_curve_name")]
public string heat_recovery_cooling_energy_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_heat_recovery_cooling_energy_fraction")]
public float initial_heat_recovery_cooling_energy_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_cooling_energy_time_constant")]
public float heat_recovery_cooling_energy_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heat_recovery_heating_capacity_modifier_curve_name")]
public string heat_recovery_heating_capacity_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_heat_recovery_heating_capacity_fraction")]
public float initial_heat_recovery_heating_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_heating_capacity_time_constant")]
public float heat_recovery_heating_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.15;

[JsonProperty("heat_recovery_heating_energy_modifier_curve_name")]
public string heat_recovery_heating_energy_modifier_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_heat_recovery_heating_energy_fraction")]
public float initial_heat_recovery_heating_energy_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_heating_energy_time_constant")]
public float heat_recovery_heating_energy_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description("Determines temperature type for heating capacity curves and heating energy curves" +
            ". This input determines whether the outdoor air dry-bulb or wet-bulb temperature" +
            " is used to evaluate these curves.")]
        public enum HeatingperformancecurveoutdoortemperaturetypeType
        {
        }
        
        [Description("Choose a thermostat control logic scheme. If these control types fail to control " +
            "zone temperature within a reasonable limit, consider using multiple VRF systems." +
            " This field is not used when all terminal units are set point controlled.")]
        public enum MasterthermostatprioritycontroltypeType
        {
        }
        
        [Description("This field enables heat recovery operation within this VRF outdoor unit.")]
        public enum HeatpumpwasteheatrecoveryType
        {
        }
        
        [Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
            " to cooling to melt frost formation on the condenser coil. The resistive strateg" +
            "y uses a resistive heater to melt the frost.")]
        public enum DefroststrategyType
        {
        }
        
        [Description("Choose a defrost control type. Either use a fixed Timed defrost period or select " +
            "OnDemand to defrost only when necessary.")]
        public enum DefrostcontrolType
        {
        }
        
        [Description("Select either an air-cooled, evaporatively-cooled or water-cooled condenser.")]
        public enum CondensertypeType
        {
        }
        
        public enum FueltypeType
        {
        }
    }
    
    [JsonProperty("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl")]
    [Description(@"This is a key object in the new physics based VRF model applicable for Fluid Temperature Control It describes the Variable Refrigerant Flow system excluding the performance of indoor units Indoor units are modeled separately, see ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl
    {
        
        private void ConstantTemp;
        
        private void VariableTemp;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        

[JsonProperty("heat_pump_name")]
public string heat_pump_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_terminal_unit_list_name")]
public string zone_terminal_unit_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_type")]
public string refrigerant_type
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)R410A;

[JsonProperty("rated_evaporative_capacity")]
public string rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)40000;

[JsonProperty("rated_compressor_power_per_unit_of_rated_evaporative_capacity")]
public float rated_compressor_power_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("minimum_outdoor_air_temperature_in_cooling_mode")]
public float minimum_outdoor_air_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-6;

[JsonProperty("maximum_outdoor_air_temperature_in_cooling_mode")]
public float maximum_outdoor_air_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)43;

[JsonProperty("minimum_outdoor_air_temperature_in_heating_mode")]
public float minimum_outdoor_air_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-20;

[JsonProperty("maximum_outdoor_air_temperature_in_heating_mode")]
public float maximum_outdoor_air_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("reference_outdoor_unit_superheating")]
public float reference_outdoor_unit_superheating
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("reference_outdoor_unit_subcooling")]
public float reference_outdoor_unit_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("refrigerant_temperature_control_algorithm_for_indoor_unit")]
public RefrigeranttemperaturecontrolalgorithmforindoorunitType refrigerant_temperature_control_algorithm_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (RefrigeranttemperaturecontrolalgorithmforindoorunitType)VariableTemp;

[JsonProperty("reference_evaporating_temperature_for_indoor_unit")]
public float reference_evaporating_temperature_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;

[JsonProperty("reference_condensing_temperature_for_indoor_unit")]
public float reference_condensing_temperature_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)44;

[JsonProperty("variable_evaporating_temperature_minimum_for_indoor_unit")]
public float variable_evaporating_temperature_minimum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("variable_evaporating_temperature_maximum_for_indoor_unit")]
public float variable_evaporating_temperature_maximum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("variable_condensing_temperature_minimum_for_indoor_unit")]
public float variable_condensing_temperature_minimum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)42;

[JsonProperty("variable_condensing_temperature_maximum_for_indoor_unit")]
public float variable_condensing_temperature_maximum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)46;

[JsonProperty("outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity")]
public float outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00425;

[JsonProperty("outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity")]
public float outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5E-05;

[JsonProperty("outdoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string outdoor_unit_evaporating_temperature_function_of_superheating_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string outdoor_unit_condensing_temperature_function_of_subcooling_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diameter_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public float diameter_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0762;

[JsonProperty("length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public float length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public float equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)36;

[JsonProperty("height_difference_between_outdoor_unit_and_indoor_units")]
public float height_difference_between_outdoor_unit_and_indoor_units
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("main_pipe_insulation_thickness")]
public float main_pipe_insulation_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02;

[JsonProperty("main_pipe_insulation_thermal_conductivity")]
public float main_pipe_insulation_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.032;

[JsonProperty("crankcase_heater_power_per_compressor")]
public float crankcase_heater_power_per_compressor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)33;

[JsonProperty("number_of_compressors")]
public float number_of_compressors
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public float ratio_of_compressor_size_to_total_compressor_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)Resistive;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("compressor_maximum_delta_pressure")]
public float compressor_maximum_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4500000;

[JsonProperty("number_of_compressor_loading_index_entries")]
public float number_of_compressor_loading_index_entries
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("loading_indices")]
public string loading_indices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum RefrigeranttemperaturecontrolalgorithmforindoorunitType
        {
        }
        
        [Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
            " to cooling to melt frost formation on the condenser coil The resistive strategy" +
            " uses a resistive heater to melt the frost.")]
        public enum DefroststrategyType
        {
        }
        
        [Description("Choose a defrost control type Either use a fixed Timed defrost period or select O" +
            "nDemand to defrost only when necessary")]
        public enum DefrostcontrolType
        {
        }
    }
    
    [JsonProperty("AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR")]
    [Description(@"This is a key object in the new physics based VRF Heat Recovery (HR) model applicable for Fluid Temperature Control. It describes the VRF HR system excluding the performance of indoor units. Indoor units are modeled separately in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object")]
    public class AirConditioner_VariableRefrigerantFlow_FluidTemperatureControl_HR
    {
        
        private void ConstantTemp;
        
        private void VariableTemp;
        
        private void Resistive;
        
        private void ReverseCycle;
        
        private void OnDemand;
        
        private void Timed;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_terminal_unit_list_name")]
public string zone_terminal_unit_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("refrigerant_type")]
public string refrigerant_type
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)R410A;

[JsonProperty("rated_evaporative_capacity")]
public string rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)40000;

[JsonProperty("rated_compressor_power_per_unit_of_rated_evaporative_capacity")]
public float rated_compressor_power_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("minimum_outdoor_air_temperature_in_cooling_only_mode")]
public float minimum_outdoor_air_temperature_in_cooling_only_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-6;

[JsonProperty("maximum_outdoor_air_temperature_in_cooling_only_mode")]
public float maximum_outdoor_air_temperature_in_cooling_only_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)43;

[JsonProperty("minimum_outdoor_air_temperature_in_heating_only_mode")]
public float minimum_outdoor_air_temperature_in_heating_only_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-20;

[JsonProperty("maximum_outdoor_air_temperature_in_heating_only_mode")]
public float maximum_outdoor_air_temperature_in_heating_only_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)16;

[JsonProperty("minimum_outdoor_temperature_in_heat_recovery_mode")]
public float minimum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-20;

[JsonProperty("maximum_outdoor_temperature_in_heat_recovery_mode")]
public float maximum_outdoor_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)43;

[JsonProperty("refrigerant_temperature_control_algorithm_for_indoor_unit")]
public RefrigeranttemperaturecontrolalgorithmforindoorunitType refrigerant_temperature_control_algorithm_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (RefrigeranttemperaturecontrolalgorithmforindoorunitType)VariableTemp;

[JsonProperty("reference_evaporating_temperature_for_indoor_unit")]
public float reference_evaporating_temperature_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)6;

[JsonProperty("reference_condensing_temperature_for_indoor_unit")]
public float reference_condensing_temperature_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)44;

[JsonProperty("variable_evaporating_temperature_minimum_for_indoor_unit")]
public float variable_evaporating_temperature_minimum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("variable_evaporating_temperature_maximum_for_indoor_unit")]
public float variable_evaporating_temperature_maximum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("variable_condensing_temperature_minimum_for_indoor_unit")]
public float variable_condensing_temperature_minimum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)42;

[JsonProperty("variable_condensing_temperature_maximum_for_indoor_unit")]
public float variable_condensing_temperature_maximum_for_indoor_unit
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)46;

[JsonProperty("outdoor_unit_evaporator_reference_superheating")]
public float outdoor_unit_evaporator_reference_superheating
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("outdoor_unit_condenser_reference_subcooling")]
public float outdoor_unit_condenser_reference_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("outdoor_unit_evaporator_rated_bypass_factor")]
public float outdoor_unit_evaporator_rated_bypass_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("outdoor_unit_condenser_rated_bypass_factor")]
public float outdoor_unit_condenser_rated_bypass_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("difference_between_outdoor_unit_evaporating_temperature_and_outdoor_air_temperatu" +
    "re_in_heat_recovery_mode")]
public float difference_between_outdoor_unit_evaporating_temperature_and_outdoor_air_temperature_in_heat_recovery_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("outdoor_unit_heat_exchanger_capacity_ratio")]
public float outdoor_unit_heat_exchanger_capacity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.3;

[JsonProperty("outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity")]
public float outdoor_unit_fan_power_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.00425;

[JsonProperty("outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity")]
public float outdoor_unit_fan_flow_rate_per_unit_of_rated_evaporative_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)7.5E-05;

[JsonProperty("outdoor_unit_evaporating_temperature_function_of_superheating_curve_name")]
public string outdoor_unit_evaporating_temperature_function_of_superheating_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_unit_condensing_temperature_function_of_subcooling_curve_name")]
public string outdoor_unit_condensing_temperature_function_of_subcooling_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("diameter_of_main_pipe_for_suction_gas")]
public float diameter_of_main_pipe_for_suction_gas
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0762;

[JsonProperty("diameter_of_main_pipe_for_discharge_gas")]
public float diameter_of_main_pipe_for_discharge_gas
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0762;

[JsonProperty("length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public float length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)30;

[JsonProperty("equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint")]
public float equivalent_length_of_main_pipe_connecting_outdoor_unit_to_the_first_branch_joint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)36;

[JsonProperty("height_difference_between_outdoor_unit_and_indoor_units")]
public float height_difference_between_outdoor_unit_and_indoor_units
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("main_pipe_insulation_thickness")]
public float main_pipe_insulation_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.02;

[JsonProperty("main_pipe_insulation_thermal_conductivity")]
public float main_pipe_insulation_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.032;

[JsonProperty("crankcase_heater_power_per_compressor")]
public float crankcase_heater_power_per_compressor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)33;

[JsonProperty("number_of_compressors")]
public float number_of_compressors
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("ratio_of_compressor_size_to_total_compressor_capacity")]
public float ratio_of_compressor_size_to_total_compressor_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_crankcase_heater")]
public float maximum_outdoor_dry_bulb_temperature_for_crankcase_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("defrost_strategy")]
public DefroststrategyType defrost_strategy
{
    get
    {
    }
    set
    {
    }
}
 = (DefroststrategyType)Resistive;

[JsonProperty("defrost_control")]
public DefrostcontrolType defrost_control
{
    get
    {
    }
    set
    {
    }
}
 = (DefrostcontrolType)Timed;

[JsonProperty("defrost_energy_input_ratio_modifier_function_of_temperature_curve_name")]
public string defrost_energy_input_ratio_modifier_function_of_temperature_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("defrost_time_period_fraction")]
public float defrost_time_period_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.058333;

[JsonProperty("resistive_defrost_heater_capacity")]
public string resistive_defrost_heater_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_defrost_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_defrost_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("initial_heat_recovery_cooling_capacity_fraction")]
public float initial_heat_recovery_cooling_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_cooling_capacity_time_constant")]
public float heat_recovery_cooling_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_heat_recovery_cooling_energy_fraction")]
public float initial_heat_recovery_cooling_energy_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_cooling_energy_time_constant")]
public float heat_recovery_cooling_energy_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_heat_recovery_heating_capacity_fraction")]
public float initial_heat_recovery_heating_capacity_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_heating_capacity_time_constant")]
public float heat_recovery_heating_capacity_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("initial_heat_recovery_heating_energy_fraction")]
public float initial_heat_recovery_heating_energy_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heat_recovery_heating_energy_time_constant")]
public float heat_recovery_heating_energy_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("compressor_maximum_delta_pressure")]
public float compressor_maximum_delta_pressure
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4500000;

[JsonProperty("compressor_inverter_efficiency")]
public float compressor_inverter_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.95;

[JsonProperty("compressor_evaporative_capacity_correction_factor")]
public float compressor_evaporative_capacity_correction_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("number_of_compressor_loading_index_entries")]
public float number_of_compressor_loading_index_entries
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("loading_indices")]
public string loading_indices
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum RefrigeranttemperaturecontrolalgorithmforindoorunitType
        {
        }
        
        [Description("Select a defrost strategy. Reverse cycle reverses the operating mode from heating" +
            " to cooling to melt frost formation on the condenser coil The resistive strategy" +
            " uses a resistive heater to melt the frost.")]
        public enum DefroststrategyType
        {
        }
        
        [Description("Choose a defrost control type Either use a fixed Timed defrost period or select O" +
            "nDemand to defrost only when necessary")]
        public enum DefrostcontrolType
        {
        }
    }
    
    [JsonProperty("ZoneTerminalUnitList")]
    [Description("List of variable refrigerant flow (VRF) terminal units served by a given VRF cond" +
        "ensing unit. See ZoneHVAC:TerminalUnit:VariableRefrigerantFlow and AirConditione" +
        "r:VariableRefrigerantFlow.")]
    public class ZoneTerminalUnitList
    {
        

[JsonProperty("zone_terminal_unit_list_name")]
public string zone_terminal_unit_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("terminal_units")]
public string terminal_units
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.WaterHeatersandThermalStorage
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("WaterHeater:Mixed")]
    [Description("Water heater with well-mixed, single-node water tank. May be used to model a tank" +
        "less water heater (small tank volume), a hot water storage tank (zero heater cap" +
        "acity), or a heat pump water heater (see WaterHeater:HeatPump:PumpedCondenser.)")]
    public class WaterHeater_Mixed
    {
        
        private void Cycle;
        
        private void Modulate;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        
        private void IndirectHeatAlternateSetpoint;
        
        private void IndirectHeatPrimarySetpoint;
        
        private void StorageTank;
        

[JsonProperty("tank_volume")]
public string tank_volume
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)0;

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("deadband_temperature_difference")]
public float deadband_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_temperature_limit")]
public float maximum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_control_type")]
public HeatercontroltypeType heater_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatercontroltypeType)Cycle;

[JsonProperty("heater_maximum_capacity")]
public string heater_maximum_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_minimum_capacity")]
public float heater_minimum_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_ignition_minimum_flow_rate")]
public float heater_ignition_minimum_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heater_ignition_delay")]
public float heater_ignition_delay
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heater_fuel_type")]
public HeaterfueltypeType heater_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_thermal_efficiency")]
public float heater_thermal_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_factor_curve_name")]
public string part_load_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_parasitic_fuel_consumption_rate")]
public float off_cycle_parasitic_fuel_consumption_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_fuel_type")]
public OffcycleparasiticfueltypeType off_cycle_parasitic_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_parasitic_heat_fraction_to_tank")]
public float off_cycle_parasitic_heat_fraction_to_tank
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("on_cycle_parasitic_fuel_consumption_rate")]
public float on_cycle_parasitic_fuel_consumption_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("on_cycle_parasitic_fuel_type")]
public OncycleparasiticfueltypeType on_cycle_parasitic_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("on_cycle_parasitic_heat_fraction_to_tank")]
public float on_cycle_parasitic_heat_fraction_to_tank
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ambient_temperature_indicator")]
public AmbienttemperatureindicatorType ambient_temperature_indicator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_zone_name")]
public string ambient_temperature_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string ambient_temperature_outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_loss_coefficient_to_ambient_temperature")]
public float off_cycle_loss_coefficient_to_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_loss_fraction_to_zone")]
public float off_cycle_loss_fraction_to_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("on_cycle_loss_coefficient_to_ambient_temperature")]
public float on_cycle_loss_coefficient_to_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("on_cycle_loss_fraction_to_zone")]
public float on_cycle_loss_fraction_to_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("peak_use_flow_rate")]
public float peak_use_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_flow_rate_fraction_schedule_name")]
public string use_flow_rate_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string cold_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_inlet_node_name")]
public string use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_outlet_node_name")]
public string use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_effectiveness")]
public float use_side_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_effectiveness")]
public float source_side_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("use_side_design_flow_rate")]
public string use_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_design_flow_rate")]
public string source_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("indirect_water_heating_recovery_time")]
public float indirect_water_heating_recovery_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("source_side_flow_control_mode")]
public SourcesideflowcontrolmodeType source_side_flow_control_mode
{
    get
    {
    }
    set
    {
    }
}
 = (SourcesideflowcontrolmodeType)IndirectHeatPrimarySetpoint;

[JsonProperty("indirect_alternate_setpoint_temperature_schedule_name")]
public string indirect_alternate_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;
        
        public enum HeatercontroltypeType
        {
        }
        
        public enum HeaterfueltypeType
        {
        }
        
        public enum OffcycleparasiticfueltypeType
        {
        }
        
        public enum OncycleparasiticfueltypeType
        {
        }
        
        public enum AmbienttemperatureindicatorType
        {
        }
        
        [Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
        public enum SourcesideflowcontrolmodeType
        {
        }
    }
    
    [JsonProperty("WaterHeater:Stratified")]
    [Description("Water heater with stratified, multi-node water tank. May be used to model a tankl" +
        "ess water heater (small tank volume), a hot water storage tank (zero heater capa" +
        "city), or a heat pump water heater (see WaterHeater:HeatPump:*.)")]
    public class WaterHeater_Stratified
    {
        
        private void HorizontalCylinder;
        
        private void Other;
        
        private void VerticalCylinder;
        
        private void MasterSlave;
        
        private void Simultaneous;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        
        private void Fixed;
        
        private void Seeking;
        
        private void IndirectHeatAlternateSetpoint;
        
        private void IndirectHeatPrimarySetpoint;
        
        private void StorageTank;
        

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("tank_volume")]
public string tank_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_height")]
public string tank_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_shape")]
public TankshapeType tank_shape
{
    get
    {
    }
    set
    {
    }
}
 = (TankshapeType)VerticalCylinder;

[JsonProperty("tank_perimeter")]
public float tank_perimeter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_temperature_limit")]
public float maximum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_priority_control")]
public HeaterprioritycontrolType heater_priority_control
{
    get
    {
    }
    set
    {
    }
}
 = (HeaterprioritycontrolType)MasterSlave;

[JsonProperty("heater_1_setpoint_temperature_schedule_name")]
public string heater_1_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_1_deadband_temperature_difference")]
public float heater_1_deadband_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heater_1_capacity")]
public string heater_1_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_1_height")]
public float heater_1_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_2_setpoint_temperature_schedule_name")]
public string heater_2_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_2_deadband_temperature_difference")]
public float heater_2_deadband_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heater_2_capacity")]
public float heater_2_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_2_height")]
public float heater_2_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_fuel_type")]
public HeaterfueltypeType heater_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heater_thermal_efficiency")]
public float heater_thermal_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_parasitic_fuel_consumption_rate")]
public float off_cycle_parasitic_fuel_consumption_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_fuel_type")]
public OffcycleparasiticfueltypeType off_cycle_parasitic_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_parasitic_heat_fraction_to_tank")]
public float off_cycle_parasitic_heat_fraction_to_tank
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_height")]
public float off_cycle_parasitic_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("on_cycle_parasitic_fuel_consumption_rate")]
public float on_cycle_parasitic_fuel_consumption_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("on_cycle_parasitic_fuel_type")]
public OncycleparasiticfueltypeType on_cycle_parasitic_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("on_cycle_parasitic_heat_fraction_to_tank")]
public float on_cycle_parasitic_heat_fraction_to_tank
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("on_cycle_parasitic_height")]
public float on_cycle_parasitic_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("ambient_temperature_indicator")]
public AmbienttemperatureindicatorType ambient_temperature_indicator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_zone_name")]
public string ambient_temperature_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string ambient_temperature_outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature")]
public float uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("skin_loss_fraction_to_zone")]
public float skin_loss_fraction_to_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("off_cycle_flue_loss_coefficient_to_ambient_temperature")]
public float off_cycle_flue_loss_coefficient_to_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("off_cycle_flue_loss_fraction_to_zone")]
public float off_cycle_flue_loss_fraction_to_zone
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("peak_use_flow_rate")]
public float peak_use_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_flow_rate_fraction_schedule_name")]
public string use_flow_rate_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string cold_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_inlet_node_name")]
public string use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_outlet_node_name")]
public string use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_effectiveness")]
public float use_side_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("use_side_inlet_height")]
public float use_side_inlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("use_side_outlet_height")]
public string use_side_outlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_effectiveness")]
public float source_side_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("source_side_inlet_height")]
public string source_side_inlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("source_side_outlet_height")]
public float source_side_outlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("inlet_mode")]
public InletmodeType inlet_mode
{
    get
    {
    }
    set
    {
    }
}
 = (InletmodeType)Fixed;

[JsonProperty("use_side_design_flow_rate")]
public string use_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_design_flow_rate")]
public string source_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("indirect_water_heating_recovery_time")]
public float indirect_water_heating_recovery_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.5;

[JsonProperty("number_of_nodes")]
public float number_of_nodes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("additional_destratification_conductivity")]
public float additional_destratification_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_1_additional_loss_coefficient")]
public float node_1_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_2_additional_loss_coefficient")]
public float node_2_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_3_additional_loss_coefficient")]
public float node_3_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_4_additional_loss_coefficient")]
public float node_4_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_5_additional_loss_coefficient")]
public float node_5_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_6_additional_loss_coefficient")]
public float node_6_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_7_additional_loss_coefficient")]
public float node_7_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_8_additional_loss_coefficient")]
public float node_8_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_9_additional_loss_coefficient")]
public float node_9_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_10_additional_loss_coefficient")]
public float node_10_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_11_additional_loss_coefficient")]
public float node_11_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_12_additional_loss_coefficient")]
public float node_12_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("source_side_flow_control_mode")]
public SourcesideflowcontrolmodeType source_side_flow_control_mode
{
    get
    {
    }
    set
    {
    }
}
 = (SourcesideflowcontrolmodeType)IndirectHeatPrimarySetpoint;

[JsonProperty("indirect_alternate_setpoint_temperature_schedule_name")]
public string indirect_alternate_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TankshapeType
        {
        }
        
        public enum HeaterprioritycontrolType
        {
        }
        
        public enum HeaterfueltypeType
        {
        }
        
        public enum OffcycleparasiticfueltypeType
        {
        }
        
        public enum OncycleparasiticfueltypeType
        {
        }
        
        public enum AmbienttemperatureindicatorType
        {
        }
        
        public enum InletmodeType
        {
        }
        
        [Description(@"StorageTank mode always requests flow unless tank is at its Maximum Temperature Limit IndirectHeatPrimarySetpoint mode requests flow whenever primary setpoint for heater 1 calls for heat IndirectHeatAlternateSetpoint mode requests flow whenever alternate indirect setpoint calls for heat")]
        public enum SourcesideflowcontrolmodeType
        {
        }
    }
    
    [JsonProperty("WaterHeater:Sizing")]
    [Description("This input object is used with WaterHeater:Mixed or with WaterHeater:Stratified t" +
        "o autosize tank volume and heater capacity This object is not needed if water he" +
        "aters are not autosized.")]
    public class WaterHeater_Sizing
    {
        
        private void PeakDraw;
        
        private void PerFloorArea;
        
        private void PerPerson;
        
        private void PerSolarCollectorArea;
        
        private void PerUnit;
        
        private void ResidentialHUD-FHAMinimum;
        

[JsonProperty("waterheater_name")]
public string waterheater_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_mode")]
public DesignmodeType design_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("time_storage_can_meet_peak_draw")]
public float time_storage_can_meet_peak_draw
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("time_for_tank_recovery")]
public float time_for_tank_recovery
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_tank_volume_for_autosizing_plant_connections")]
public float nominal_tank_volume_for_autosizing_plant_connections
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_bedrooms")]
public float number_of_bedrooms
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_bathrooms")]
public float number_of_bathrooms
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_capacity_per_person")]
public float storage_capacity_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recovery_capacity_per_person")]
public float recovery_capacity_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_capacity_per_floor_area")]
public float storage_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recovery_capacity_per_floor_area")]
public float recovery_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_units")]
public float number_of_units
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_capacity_per_unit")]
public float storage_capacity_per_unit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recovery_capacity_perunit")]
public float recovery_capacity_perunit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("storage_capacity_per_collector_area")]
public float storage_capacity_per_collector_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("height_aspect_ratio")]
public float height_aspect_ratio
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DesignmodeType
        {
        }
    }
    
    [JsonProperty("WaterHeater:HeatPump:PumpedCondenser")]
    [Description(@"This object models an air-source heat pump for water heating where the water is pumped out of the tank, through a heating coil and returned to the tank. For wrapped condenser HPWHs, see WaterHeater:HeatPump:WrappedCondenser. WaterHeater:HeatPump:PumpedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:*, Fan:OnOff, WaterHeater:Mixed or WaterHeater:Stratified")]
    public class WaterHeater_HeatPump_PumpedCondenser
    {
        
        private void OutdoorAirOnly;
        
        private void Schedule;
        
        private void ZoneAirOnly;
        
        private void ZoneAndOutdoorAir;
        
        private void WaterHeater:Mixed;
        
        private void WaterHeater:Stratified;
        
        private void Coil:WaterHeating:AirToWaterHeatPump:Pumped;
        
        private void Coil:WaterHeating:AirToWaterHeatPump:VariableSpeed;
        
        private void CoilSystem:IntegratedHeatPump:AirSource;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Outdoors;
        
        private void Zone;
        
        private void MutuallyExclusive;
        
        private void Simultaneous;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_setpoint_temperature_schedule_name")]
public string compressor_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dead_band_temperature_difference")]
public float dead_band_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("condenser_water_inlet_node_name")]
public string condenser_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_outlet_node_name")]
public string condenser_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condenser_water_flow_rate")]
public string condenser_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_flow_rate")]
public string evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_configuration")]
public InletairconfigurationType inlet_air_configuration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_node_name")]
public string exhaust_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_temperature_schedule_name")]
public string inlet_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_humidity_schedule_name")]
public string inlet_air_humidity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_zone_name")]
public string inlet_air_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_object_type")]
public TankobjecttypeType tank_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (TankobjecttypeType)WaterHeater:Mixed;

[JsonProperty("tank_name")]
public string tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_use_side_inlet_node_name")]
public string tank_use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_use_side_outlet_node_name")]
public string tank_use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_coil_object_type")]
public DxcoilobjecttypeType dx_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (DxcoilobjecttypeType)Coil:WaterHeating:AirToWaterHeatPump:Pumped;

[JsonProperty("dx_coil_name")]
public string dx_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_inlet_air_temperature_for_compressor_operation")]
public float minimum_inlet_air_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("maximum_inlet_air_temperature_for_compressor_operation")]
public float maximum_inlet_air_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)48.88888888889;

[JsonProperty("compressor_location")]
public CompressorlocationType compressor_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_ambient_temperature_schedule_name")]
public string compressor_ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_object_type")]
public FanobjecttypeType fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (FanobjecttypeType)Fan:OnOff;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)DrawThrough;

[JsonProperty("on_cycle_parasitic_electric_load")]
public float on_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_electric_load")]
public float off_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("parasitic_heat_rejection_location")]
public ParasiticheatrejectionlocationType parasitic_heat_rejection_location
{
    get
    {
    }
    set
    {
    }
}
 = (ParasiticheatrejectionlocationType)Outdoors;

[JsonProperty("inlet_air_mixer_node_name")]
public string inlet_air_mixer_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_air_splitter_node_name")]
public string outlet_air_splitter_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_mixer_schedule_name")]
public string inlet_air_mixer_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_element_control_logic")]
public TankelementcontrollogicType tank_element_control_logic
{
    get
    {
    }
    set
    {
    }
}
 = (TankelementcontrollogicType)Simultaneous;

[JsonProperty("control_sensor_1_height_in_stratified_tank")]
public float control_sensor_1_height_in_stratified_tank
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_sensor_1_weight")]
public float control_sensor_1_weight
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("control_sensor_2_height_in_stratified_tank")]
public float control_sensor_2_height_in_stratified_tank
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Defines the configuration of the airflow path through the air coil and fan sectio" +
            "n.")]
        public enum InletairconfigurationType
        {
        }
        
        [Description("Specify the type of water heater tank used by this heat pump water heater.")]
        public enum TankobjecttypeType
        {
        }
        
        [Description("Specify the type of DX coil used by this heat pump water heater. The only valid c" +
            "hoice is Coil:WaterHeating:AirToWaterHeatPump:Pumped and Coil:WaterHeating:AirTo" +
            "WaterHeatPump:VariableSpeed, and CoilSystem:IntegratedHeatPump:AirSource")]
        public enum DxcoilobjecttypeType
        {
        }
        
        [Description("If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoo" +
            "rAir. If Schedule is selected, then you must provide a Compressor Ambient Temper" +
            "ature Schedule Name below.")]
        public enum CompressorlocationType
        {
        }
        
        [Description("Specify the type of fan used by this heat pump water heater. The only valid choic" +
            "es are Fan:SystemModel or Fan:OnOff.")]
        public enum FanobjecttypeType
        {
        }
        
        [Description("BlowThrough means the fan is located before the air coil (upstream). DrawThrough " +
            "means the fan is located after the air coil (downstream).")]
        public enum FanplacementType
        {
        }
        
        [Description("This field determines if the parasitic electric load impacts the zone air heat ba" +
            "lance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneA" +
            "ndOutdoorAir.")]
        public enum ParasiticheatrejectionlocationType
        {
        }
        
        [Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
        public enum TankelementcontrollogicType
        {
        }
    }
    
    [JsonProperty("WaterHeater:HeatPump:WrappedCondenser")]
    [Description(@"This object models an air-source heat pump for water heating where the heating coil is wrapped around the tank, which is typical of residential HPWHs. For pumped condenser HPWHs, see WaterHeater:HeatPump:PumpedCondenser. WaterHeater:HeatPump:WrappedCondenser is a compound object that references other component objects - Coil:WaterHeating:AirToWaterHeatPump:Pumped, Fan:OnOff, WaterHeater:Mixed")]
    public class WaterHeater_HeatPump_WrappedCondenser
    {
        
        private void OutdoorAirOnly;
        
        private void Schedule;
        
        private void ZoneAirOnly;
        
        private void ZoneAndOutdoorAir;
        
        private void WaterHeater:Stratified;
        
        private void Coil:WaterHeating:AirToWaterHeatPump:Wrapped;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Outdoors;
        
        private void Zone;
        
        private void MutuallyExclusive;
        
        private void Simultaneous;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_setpoint_temperature_schedule_name")]
public string compressor_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dead_band_temperature_difference")]
public float dead_band_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("condenser_bottom_location")]
public float condenser_bottom_location
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condenser_top_location")]
public float condenser_top_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("evaporator_air_flow_rate")]
public string evaporator_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_configuration")]
public InletairconfigurationType inlet_air_configuration
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_node_name")]
public string exhaust_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_temperature_schedule_name")]
public string inlet_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_humidity_schedule_name")]
public string inlet_air_humidity_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_zone_name")]
public string inlet_air_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_object_type")]
public TankobjecttypeType tank_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (TankobjecttypeType)WaterHeater:Stratified;

[JsonProperty("tank_name")]
public string tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_use_side_inlet_node_name")]
public string tank_use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_use_side_outlet_node_name")]
public string tank_use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_coil_object_type")]
public DxcoilobjecttypeType dx_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (DxcoilobjecttypeType)Coil:WaterHeating:AirToWaterHeatPump:Wrapped;

[JsonProperty("dx_coil_name")]
public string dx_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_inlet_air_temperature_for_compressor_operation")]
public float minimum_inlet_air_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("maximum_inlet_air_temperature_for_compressor_operation")]
public float maximum_inlet_air_temperature_for_compressor_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)48.88888888889;

[JsonProperty("compressor_location")]
public CompressorlocationType compressor_location
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("compressor_ambient_temperature_schedule_name")]
public string compressor_ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_object_type")]
public FanobjecttypeType fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (FanobjecttypeType)Fan:OnOff;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)DrawThrough;

[JsonProperty("on_cycle_parasitic_electric_load")]
public float on_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("off_cycle_parasitic_electric_load")]
public float off_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("parasitic_heat_rejection_location")]
public ParasiticheatrejectionlocationType parasitic_heat_rejection_location
{
    get
    {
    }
    set
    {
    }
}
 = (ParasiticheatrejectionlocationType)Outdoors;

[JsonProperty("inlet_air_mixer_node_name")]
public string inlet_air_mixer_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_air_splitter_node_name")]
public string outlet_air_splitter_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_air_mixer_schedule_name")]
public string inlet_air_mixer_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_element_control_logic")]
public TankelementcontrollogicType tank_element_control_logic
{
    get
    {
    }
    set
    {
    }
}
 = (TankelementcontrollogicType)Simultaneous;

[JsonProperty("control_sensor_1_height_in_stratified_tank")]
public float control_sensor_1_height_in_stratified_tank
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_sensor_1_weight")]
public float control_sensor_1_weight
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("control_sensor_2_height_in_stratified_tank")]
public float control_sensor_2_height_in_stratified_tank
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Defines the configuration of the airflow path through the air coil and fan sectio" +
            "n.")]
        public enum InletairconfigurationType
        {
        }
        
        [Description("Specify the type of water heater tank used by this heat pump water heater.")]
        public enum TankobjecttypeType
        {
        }
        
        [Description("Specify the type of DX coil used by this heat pump water heater. The only valid c" +
            "hoice is Coil:WaterHeating:AirToWaterHeatPump:Wrapped")]
        public enum DxcoilobjecttypeType
        {
        }
        
        [Description("If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneAndOutdoo" +
            "rAir. If Schedule is selected, then you must provide a Compressor Ambient Temper" +
            "ature Schedule Name below.")]
        public enum CompressorlocationType
        {
        }
        
        [Description("Specify the type of fan used by this heat pump water heater. The only valid choic" +
            "es are Fan:SystemModel or Fan:OnOff.")]
        public enum FanobjecttypeType
        {
        }
        
        [Description("BlowThrough means the fan is located before the air coil (upstream). DrawThrough " +
            "means the fan is located after the air coil (downstream).")]
        public enum FanplacementType
        {
        }
        
        [Description("This field determines if the parasitic electric load impacts the zone air heat ba" +
            "lance. If Zone is selected, Inlet Air Configuration must be ZoneAirOnly or ZoneA" +
            "ndOutdoorAir.")]
        public enum ParasiticheatrejectionlocationType
        {
        }
        
        [Description(@"MutuallyExclusive means that once the tank heating element is active the heat pump is shut down until setpoint is reached. Simultaneous (default) means that both the tank heating element and heat pump are used at the same time recover the tank temperature.")]
        public enum TankelementcontrollogicType
        {
        }
    }
    
    [JsonProperty("ThermalStorage:Ice:Simple")]
    [Description(@"This ice storage model is a simplified model It requires a setpoint placed on the Chilled Water Side Outlet Node It should be placed in the chilled water supply side outlet branch followed by a pipe. Use the PlantEquipmentOperation:ComponentSetpoint plant operation scheme.")]
    public class ThermalStorage_Ice_Simple
    {
        
        private void IceOnCoilExternal;
        
        private void IceOnCoilInternal;
        

[JsonProperty("ice_storage_type")]
public IcestoragetypeType ice_storage_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity")]
public float capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("IceOnCoilInternal = Ice-on-Coil, internal melt IceOnCoilExternal = Ice-on-Coil, e" +
            "xternal melt")]
        public enum IcestoragetypeType
        {
        }
    }
    
    [JsonProperty("ThermalStorage:Ice:Detailed")]
    [Description("This input syntax is intended to describe a thermal storage system that includes " +
        "smaller containers filled with water that are placed in a larger tank or series " +
        "of tanks. The model uses polynomial equations to describe the system performance" +
        ".")]
    public class ThermalStorage_Ice_Detailed
    {
        
        private void FractionChargedLMTD;
        
        private void FractionDischargedLMTD;
        
        private void LMTDFractionCharged;
        
        private void LMTDMassFlow;
        
        private void FractionChargedLMTD;
        
        private void FractionDischargedLMTD;
        
        private void LMTDFractionCharged;
        
        private void LMTDMassFlow;
        
        private void InsideMelt;
        
        private void OutsideMelt;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity")]
public float capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharging_curve_variable_specifications")]
public DischargingcurvevariablespecificationsType discharging_curve_variable_specifications
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharging_curve_name")]
public string discharging_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charging_curve_variable_specifications")]
public ChargingcurvevariablespecificationsType charging_curve_variable_specifications
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("charging_curve_name")]
public string charging_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("timestep_of_the_curve_data")]
public float timestep_of_the_curve_data
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_electric_load_during_discharging")]
public float parasitic_electric_load_during_discharging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("parasitic_electric_load_during_charging")]
public float parasitic_electric_load_during_charging
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_loss_coefficient")]
public float tank_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("freezing_temperature_of_storage_medium")]
public float freezing_temperature_of_storage_medium
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("thaw_process_indicator")]
public ThawprocessindicatorType thaw_process_indicator
{
    get
    {
    }
    set
    {
    }
}
 = (ThawprocessindicatorType)OutsideMelt;
        
        public enum DischargingcurvevariablespecificationsType
        {
        }
        
        public enum ChargingcurvevariablespecificationsType
        {
        }
        
        [Description("This field determines whether the system uses internal or external melt during di" +
            "scharging. This will then have an impact on charging performance.")]
        public enum ThawprocessindicatorType
        {
        }
    }
    
    [JsonProperty("ThermalStorage:ChilledWater:Mixed")]
    [Description("Chilled water storage with a well-mixed, single-node tank. The chilled water is \"" +
        "used\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly c" +
        "harged by circulating cold water through the \"Source Side\" of the water tank.")]
    public class ThermalStorage_ChilledWater_Mixed
    {
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        

[JsonProperty("tank_volume")]
public float tank_volume
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.1;

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("deadband_temperature_difference")]
public float deadband_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("minimum_temperature_limit")]
public float minimum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cooling_capacity")]
public float nominal_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_indicator")]
public AmbienttemperatureindicatorType ambient_temperature_indicator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_zone_name")]
public string ambient_temperature_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string ambient_temperature_outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_gain_coefficient_from_ambient_temperature")]
public float heat_gain_coefficient_from_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_inlet_node_name")]
public string use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_outlet_node_name")]
public string use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_heat_transfer_effectiveness")]
public float use_side_heat_transfer_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("use_side_availability_schedule_name")]
public string use_side_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_design_flow_rate")]
public string use_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_effectiveness")]
public float source_side_heat_transfer_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("source_side_availability_schedule_name")]
public string source_side_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_design_flow_rate")]
public string source_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("tank_recovery_time")]
public float tank_recovery_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;
        
        public enum AmbienttemperatureindicatorType
        {
        }
    }
    
    [JsonProperty("ThermalStorage:ChilledWater:Stratified")]
    [Description("Chilled water storage with a stratified, multi-node tank. The chilled water is \"u" +
        "sed\" by drawing from the \"Use Side\" of the water tank. The tank is indirectly ch" +
        "arged by circulating cold water through the \"Source Side\" of the water tank.")]
    public class ThermalStorage_ChilledWater_Stratified
    {
        
        private void HorizontalCylinder;
        
        private void Other;
        
        private void VerticalCylinder;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        
        private void Fixed;
        
        private void Seeking;
        

[JsonProperty("tank_volume")]
public float tank_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_height")]
public float tank_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_shape")]
public TankshapeType tank_shape
{
    get
    {
    }
    set
    {
    }
}
 = (TankshapeType)VerticalCylinder;

[JsonProperty("tank_perimeter")]
public float tank_perimeter
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("deadband_temperature_difference")]
public float deadband_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("temperature_sensor_height")]
public float temperature_sensor_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_temperature_limit")]
public float minimum_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_cooling_capacity")]
public float nominal_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_indicator")]
public AmbienttemperatureindicatorType ambient_temperature_indicator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_zone_name")]
public string ambient_temperature_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_outdoor_air_node_name")]
public string ambient_temperature_outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature")]
public float uniform_skin_loss_coefficient_per_unit_area_to_ambient_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_inlet_node_name")]
public string use_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_outlet_node_name")]
public string use_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_heat_transfer_effectiveness")]
public float use_side_heat_transfer_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("use_side_availability_schedule_name")]
public string use_side_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("use_side_inlet_height")]
public string use_side_inlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("use_side_outlet_height")]
public float use_side_outlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("use_side_design_flow_rate")]
public string use_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("source_side_inlet_node_name")]
public string source_side_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_outlet_node_name")]
public string source_side_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_heat_transfer_effectiveness")]
public float source_side_heat_transfer_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("source_side_availability_schedule_name")]
public string source_side_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_side_inlet_height")]
public float source_side_inlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("source_side_outlet_height")]
public string source_side_outlet_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("source_side_design_flow_rate")]
public string source_side_design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("tank_recovery_time")]
public float tank_recovery_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)4;

[JsonProperty("inlet_mode")]
public InletmodeType inlet_mode
{
    get
    {
    }
    set
    {
    }
}
 = (InletmodeType)Fixed;

[JsonProperty("number_of_nodes")]
public float number_of_nodes
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("additional_destratification_conductivity")]
public float additional_destratification_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_1_additional_loss_coefficient")]
public float node_1_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_2_additional_loss_coefficient")]
public float node_2_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_3_additional_loss_coefficient")]
public float node_3_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_4_additional_loss_coefficient")]
public float node_4_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_5_additional_loss_coefficient")]
public float node_5_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_6_additional_loss_coefficient")]
public float node_6_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_7_additional_loss_coefficient")]
public float node_7_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_8_additional_loss_coefficient")]
public float node_8_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_9_additional_loss_coefficient")]
public float node_9_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("node_10_additional_loss_coefficient")]
public float node_10_additional_loss_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum TankshapeType
        {
        }
        
        public enum AmbienttemperatureindicatorType
        {
        }
        
        public enum InletmodeType
        {
        }
    }
}
namespace EnergyPlus.WaterSystems
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("WaterUse:Equipment")]
    [Description(@"A generalized object for simulating all water end uses. Hot and cold water uses are included, as well as controlled mixing of hot and cold water at the tap. The WaterUse:Equipment object can be used stand-alone, or coupled into a plant loop using the WaterUse:Connections object (see below). The WaterUse:Connections object allows water uses to be linked to WaterUse:Storage objects to store and draw reclaimed water. The object can also simulate drainwater heat recovery.")]
    public class WaterUse_Equipment
    {
        

[JsonProperty("end_use_subcategory")]
public string end_use_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)General;

[JsonProperty("peak_flow_rate")]
public float peak_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_fraction_schedule_name")]
public string flow_rate_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("target_temperature_schedule_name")]
public string target_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_supply_temperature_schedule_name")]
public string hot_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string cold_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("sensible_fraction_schedule_name")]
public string sensible_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("latent_fraction_schedule_name")]
public string latent_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("WaterUse:Connections")]
    [Description(@"A subsystem that groups together multiple WaterUse:Equipment components. As its name suggests, the object provides connections that are shared by these components, including: 1. Inlet node and outlet node connections to a plant loop 2. Connections to WaterUse:Storage objects to store and draw reclaimed water 3. Internal connections to simulate drainwater heat recovery.")]
    public class WaterUse_Connections
    {
        
        private void CounterFlow;
        
        private void CrossFlow;
        
        private void Ideal;
        
        private void None;
        
        private void Equipment;
        
        private void Plant;
        
        private void PlantAndEquipment;
        

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_water_storage_tank_name")]
public string supply_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reclamation_water_storage_tank_name")]
public string reclamation_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_supply_temperature_schedule_name")]
public string hot_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_water_supply_temperature_schedule_name")]
public string cold_water_supply_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("drain_water_heat_exchanger_type")]
public DrainwaterheatexchangertypeType drain_water_heat_exchanger_type
{
    get
    {
    }
    set
    {
    }
}
 = (DrainwaterheatexchangertypeType)None;

[JsonProperty("drain_water_heat_exchanger_destination")]
public DrainwaterheatexchangerdestinationType drain_water_heat_exchanger_destination
{
    get
    {
    }
    set
    {
    }
}
 = (DrainwaterheatexchangerdestinationType)Plant;

[JsonProperty("drain_water_heat_exchanger_u_factor_times_area")]
public float drain_water_heat_exchanger_u_factor_times_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("connections")]
public string connections
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum DrainwaterheatexchangertypeType
        {
        }
        
        public enum DrainwaterheatexchangerdestinationType
        {
        }
    }
    
    [JsonProperty("WaterUse:Storage")]
    [Description(@"A water storage tank. If the building model is to include any on-site water collection, wells, or storing and reuse of graywater, then a WaterUse:Storage object is needed. Each WaterUse:Storage can serve as a central node and make connections to numerous sources of supply or numerous components with demand. If a maximum capacity is not specified, the tank is assumed to have unlimited capacity.")]
    public class WaterUse_Storage
    {
        
        private void GroundwaterWell;
        
        private void Mains;
        
        private void None;
        
        private void OtherTank;
        
        private void ScheduledTemperature;
        
        private void ThermalModel;
        
        private void Outdoors;
        
        private void Schedule;
        
        private void Zone;
        

[JsonProperty("water_quality_subcategory")]
public string water_quality_subcategory
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_capacity")]
public float maximum_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("initial_volume")]
public float initial_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_in_flow_rate")]
public float design_in_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_out_flow_rate")]
public float design_out_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("overflow_destination")]
public string overflow_destination
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("type_of_supply_controlled_by_float_valve")]
public TypeofsupplycontrolledbyfloatvalveType type_of_supply_controlled_by_float_valve
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("float_valve_on_capacity")]
public float float_valve_on_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("float_valve_off_capacity")]
public float float_valve_off_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("backup_mains_capacity")]
public float backup_mains_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("other_tank_name")]
public string other_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_thermal_mode")]
public WaterthermalmodeType water_thermal_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_temperature_schedule_name")]
public string water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_indicator")]
public AmbienttemperatureindicatorType ambient_temperature_indicator
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ambient_temperature_schedule_name")]
public string ambient_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_surface_area")]
public float tank_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_u_value")]
public float tank_u_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("tank_outside_surface_material_name")]
public string tank_outside_surface_material_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum TypeofsupplycontrolledbyfloatvalveType
        {
        }
        
        public enum WaterthermalmodeType
        {
        }
        
        public enum AmbienttemperatureindicatorType
        {
        }
    }
    
    [JsonProperty("WaterUse:Well")]
    [Description(@"Simulates on-site water supply from a well. Well water is pumped out of the ground into a WaterUse:Storage. The operation of the ground water well is controlled by the associated WaterUse:Storage which is assumed to be operated as a vented cistern with no pressure tank.")]
    public class WaterUse_Well
    {
        
        private void Constant;
        
        private void Scheduled;
        

[JsonProperty("storage_tank_name")]
public string storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_depth")]
public float pump_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_rated_flow_rate")]
public float pump_rated_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_rated_head")]
public float pump_rated_head
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_rated_power_consumption")]
public float pump_rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_efficiency")]
public float pump_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("well_recovery_rate")]
public float well_recovery_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_well_storage_volume")]
public float nominal_well_storage_volume
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_table_depth_mode")]
public WatertabledepthmodeType water_table_depth_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_table_depth")]
public float water_table_depth
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_table_depth_schedule_name")]
public string water_table_depth_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum WatertabledepthmodeType
        {
        }
    }
    
    [JsonProperty("WaterUse:RainCollector")]
    [Description("Used for harvesting rainwater falling on building surfaces. The rainwater is sent" +
        " to a WaterUse:Storage object. In order to use this object it is necessary to al" +
        "so include a Site:Precipitation object to describe the rates of rainfall.")]
    public class WaterUse_RainCollector
    {
        
        private void Constant;
        
        private void Scheduled;
        

[JsonProperty("storage_tank_name")]
public string storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("loss_factor_mode")]
public LossfactormodeType loss_factor_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_loss_factor")]
public float collection_loss_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("collection_loss_factor_schedule_name")]
public string collection_loss_factor_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_collection_rate")]
public float maximum_collection_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surfaces")]
public string surfaces
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LossfactormodeType
        {
        }
    }
}
namespace EnergyPlus.ZoneAirflow
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ZoneInfiltration:DesignFlowRate")]
    [Description(@"Infiltration is specified as a design level which is modified by a Schedule fraction, temperature difference and wind speed: Infiltration=Idesign * FSchedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    public class ZoneInfiltration_DesignFlowRate
    {
        
        private void AirChanges/Hour;
        
        private void Flow/Area;
        
        private void Flow/ExteriorArea;
        
        private void Flow/ExteriorWallArea;
        
        private void Flow/Zone;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate_calculation_method")]
public DesignflowratecalculationmethodType design_flow_rate_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignflowratecalculationmethodType)Flow/Zone;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_per_zone_floor_area")]
public float flow_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_per_exterior_surface_area")]
public float flow_per_exterior_surface_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_changes_per_hour")]
public float air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_term_coefficient")]
public float constant_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("temperature_term_coefficient")]
public float temperature_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_term_coefficient")]
public float velocity_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_squared_term_coefficient")]
public float velocity_squared_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        [Description(@"The entered calculation method is used to create the maximum amount of infiltration for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/ExteriorArea => Flow per Exterior Surface Area - Value * Exterior Surface Area (zone) = Design Flow Rate Flow/ExteriorWallArea => Flow per Exterior Surface Area - Value * Exterior Wall Surface Area (zone) = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Idesign"" in Equation is the result.")]
        public enum DesignflowratecalculationmethodType
        {
        }
    }
    
    [JsonProperty("ZoneInfiltration:EffectiveLeakageArea")]
    [Description("Infiltration is specified as effective leakage area at 4 Pa, schedule fraction, s" +
        "tack and wind coefficients, and is a function of temperature difference and wind" +
        " speed: Infiltration=FSchedule * (AL /1000) SQRT(Cs*|(Tzone-Todb)| +  Cw*WindSpd" +
        "**2 )")]
    public class ZoneInfiltration_EffectiveLeakageArea
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_air_leakage_area")]
public float effective_air_leakage_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_coefficient")]
public float stack_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("wind_coefficient")]
public float wind_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneInfiltration:FlowCoefficient")]
    [Description("Infiltration is specified as flow coefficient, schedule fraction, stack and wind " +
        "coefficients, and is a function of temperature difference and wind speed: Infilt" +
        "ration=FSchedule * SQRT( (c * Cs*|(Tzone-Todb)|**n)**2 + (c* Cw*(s * WindSpd)**2" +
        "n)**2 )")]
    public class ZoneInfiltration_FlowCoefficient
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_coefficient")]
public float flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stack_coefficient")]
public float stack_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pressure_exponent")]
public float pressure_exponent
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.67;

[JsonProperty("wind_coefficient")]
public float wind_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("shelter_factor")]
public float shelter_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneVentilation:DesignFlowRate")]
    [Description(@"Ventilation is specified as a design level which is modified by a schedule fraction, temperature difference and wind speed: Ventilation=Vdesign * Fschedule * (A + B*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2) If you use a ZoneList in the Zone or ZoneList name field then this definition applies to all the zones in the ZoneList.")]
    public class ZoneVentilation_DesignFlowRate
    {
        
        private void AirChanges/Hour;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        
        private void Balanced;
        
        private void Exhaust;
        
        private void Intake;
        
        private void Natural;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate_calculation_method")]
public DesignflowratecalculationmethodType design_flow_rate_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignflowratecalculationmethodType)Flow/Zone;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_zone_floor_area")]
public float flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_person")]
public float flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_changes_per_hour")]
public float air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_type")]
public VentilationtypeType ventilation_type
{
    get
    {
    }
    set
    {
    }
}
 = (VentilationtypeType)Natural;

[JsonProperty("fan_pressure_rise")]
public float fan_pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("constant_term_coefficient")]
public float constant_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("temperature_term_coefficient")]
public float temperature_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_term_coefficient")]
public float velocity_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_squared_term_coefficient")]
public float velocity_squared_term_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("minimum_indoor_temperature")]
public float minimum_indoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("minimum_indoor_temperature_schedule_name")]
public string minimum_indoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_indoor_temperature")]
public float maximum_indoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("maximum_indoor_temperature_schedule_name")]
public string maximum_indoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delta_temperature")]
public float delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("delta_temperature_schedule_name")]
public string delta_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_temperature")]
public float minimum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string minimum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_temperature")]
public float maximum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string maximum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_wind_speed")]
public float maximum_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;
        
        [Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
        public enum DesignflowratecalculationmethodType
        {
        }
        
        public enum VentilationtypeType
        {
        }
    }
    
    [JsonProperty("ZoneVentilation:WindandStackOpenArea")]
    [Description(@"This object is specified as natural ventilation driven by wind and stack effect only: Ventilation Wind = Cw * Opening Area * Schedule * WindSpd Ventilation Stack = Cd * Opening Area * Schedule * SQRT(2*g*DH*(|(Tzone-Todb)|/Tzone)) Total Ventilation = SQRT((Ventilation Wind)^2 + (Ventilation Stack)^2)")]
    public class ZoneVentilation_WindandStackOpenArea
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("opening_area")]
public float opening_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("opening_area_fraction_schedule_name")]
public string opening_area_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("opening_effectiveness")]
public string opening_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("effective_angle")]
public float effective_angle
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("height_difference")]
public float height_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("discharge_coefficient_for_opening")]
public string discharge_coefficient_for_opening
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("minimum_indoor_temperature")]
public float minimum_indoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("minimum_indoor_temperature_schedule_name")]
public string minimum_indoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_indoor_temperature")]
public float maximum_indoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("maximum_indoor_temperature_schedule_name")]
public string maximum_indoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delta_temperature")]
public float delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("delta_temperature_schedule_name")]
public string delta_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_temperature")]
public float minimum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)-100;

[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string minimum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_temperature")]
public float maximum_outdoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string maximum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_wind_speed")]
public float maximum_wind_speed
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)40;
    }
    
    [JsonProperty("ZoneAirBalance:OutdoorAir")]
    [Description(@"Provide a combined zone outdoor air flow by including interactions between mechanical ventilation, infiltration and duct leakage. This object will combine outdoor flows from all ZoneInfiltration and ZoneVentilation objects in the same zone. Balanced flows will be summed, while unbalanced flows will be added in quadrature.")]
    public class ZoneAirBalance_OutdoorAir
    {
        
        private void None;
        
        private void Quadrature;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_balance_method")]
public AirbalancemethodType air_balance_method
{
    get
    {
    }
    set
    {
    }
}
 = (AirbalancemethodType)Quadrature;

[JsonProperty("induced_outdoor_air_due_to_unbalanced_duct_leakage")]
public float induced_outdoor_air_due_to_unbalanced_duct_leakage
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("induced_outdoor_air_schedule_name")]
public string induced_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("None: Only perform simple calculations without using a combined zone outdoor air." +
            " Quadrature: A combined outdoor air is used in the quadrature sum.")]
        public enum AirbalancemethodType
        {
        }
    }
    
    [JsonProperty("ZoneMixing")]
    [Description(@"ZoneMixing is a simple air exchange from one zone to another. Note that this statement only affects the energy balance of the ""receiving"" zone and will not produce any effect on the ""source"" zone. Mixing statements can be complementary and include multiple zones, but the balancing of flows between zones is left to the user's discretion.")]
    public class ZoneMixing
    {
        
        private void AirChanges/Hour;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate_calculation_method")]
public DesignflowratecalculationmethodType design_flow_rate_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignflowratecalculationmethodType)Flow/Zone;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_zone_floor_area")]
public float flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_person")]
public float flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_changes_per_hour")]
public float air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_zone_name")]
public string source_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delta_temperature")]
public float delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("delta_temperature_schedule_name")]
public string delta_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_zone_temperature_schedule_name")]
public string minimum_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_zone_temperature_schedule_name")]
public string maximum_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_source_zone_temperature_schedule_name")]
public string minimum_source_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_source_zone_temperature_schedule_name")]
public string maximum_source_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string minimum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string maximum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
        public enum DesignflowratecalculationmethodType
        {
        }
    }
    
    [JsonProperty("ZoneCrossMixing")]
    [Description("ZoneCrossMixing exchanges an equal amount of air between two zones. Note that thi" +
        "s statement affects the energy balance of both zones.")]
    public class ZoneCrossMixing
    {
        
        private void AirChanges/Hour;
        
        private void Flow/Area;
        
        private void Flow/Person;
        
        private void Flow/Zone;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate_calculation_method")]
public DesignflowratecalculationmethodType design_flow_rate_calculation_method
{
    get
    {
    }
    set
    {
    }
}
 = (DesignflowratecalculationmethodType)Flow/Zone;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_zone_floor_area")]
public float flow_rate_per_zone_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_rate_per_person")]
public float flow_rate_per_person
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_changes_per_hour")]
public float air_changes_per_hour
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("source_zone_name")]
public string source_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delta_temperature")]
public float delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("delta_temperature_schedule_name")]
public string delta_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_zone_temperature_schedule_name")]
public string minimum_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_zone_temperature_schedule_name")]
public string maximum_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_source_zone_temperature_schedule_name")]
public string minimum_source_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_source_zone_temperature_schedule_name")]
public string maximum_source_zone_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_temperature_schedule_name")]
public string minimum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_temperature_schedule_name")]
public string maximum_outdoor_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"The entered calculation method is used to create the maximum amount of ventilation for this set of attributes Choices: Flow/Zone => Design Flow Rate -- simply enter Design Flow Rate Flow/Area => Flow Rate per Zone Floor Area - Value * Floor Area (zone) = Design Flow Rate Flow/Person => Flow Rate per Person - Value * #people = Design Flow Rate AirChanges/Hour => Air Changes per Hour - Value * Floor Volume (zone) adjusted for m3/s = Design Volume Flow Rate ""Vdesign"" in Equation is the result.")]
        public enum DesignflowratecalculationmethodType
        {
        }
    }
    
    [JsonProperty("ZoneRefrigerationDoorMixing")]
    [Description(@"Refrigeration Door Mixing is used for an opening between two zones that are at the same elevation but have different air temperatures. In this case, the mixing air flow between the two zones is determined by the density difference between the two zones. This would typically be used between two zones in a refrigerated warehouse that are controlled at different temperatures. It could also be used to model a door to a walk-in refrigerated space if that space were modeled as a zone instead of using the object Refrigeration:WalkIn.")]
    public class ZoneRefrigerationDoorMixing
    {
        
        private void AirCurtain;
        
        private void None;
        
        private void StripCurtain;
        

[JsonProperty("zone_1_name")]
public string zone_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_2_name")]
public string zone_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("door_height")]
public float door_height
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("door_area")]
public float door_area
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)9;

[JsonProperty("door_protection_type")]
public DoorprotectiontypeType door_protection_type
{
    get
    {
    }
    set
    {
    }
}
 = (DoorprotectiontypeType)None;
        
        [Description("Door protection can reduce the air flow through a refrigeration door The default " +
            "value is \"None\" Choices: \"None\", \"AirCurtain\", and \"StripCurtain\" A strip curtai" +
            "n reduces the air flow more than an air curtain")]
        public enum DoorprotectiontypeType
        {
        }
    }
    
    [JsonProperty("ZoneEarthtube")]
    [Description("Earth Tube is specified as a design level which is modified by a Schedule fractio" +
        "n, temperature difference and wind speed: Earthtube=Edesign * Fschedule * (A + B" +
        "*|(Tzone-Todb)| + C*WindSpd + D * WindSpd**2)")]
    public class ZoneEarthtube
    {
        
        private void Exhaust;
        
        private void Intake;
        
        private void Natural;
        
        private void HeavyAndDamp;
        
        private void HeavyAndDry;
        
        private void HeavyAndSaturated;
        
        private void LightAndDry;
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("schedule_name")]
public string schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_flow_rate")]
public float design_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_zone_temperature_when_cooling")]
public float minimum_zone_temperature_when_cooling
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_zone_temperature_when_heating")]
public float maximum_zone_temperature_when_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("delta_temperature")]
public float delta_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("earthtube_type")]
public EarthtubetypeType earthtube_type
{
    get
    {
    }
    set
    {
    }
}
 = (EarthtubetypeType)Natural;

[JsonProperty("fan_pressure_rise")]
public float fan_pressure_rise
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fan_total_efficiency")]
public float fan_total_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("pipe_radius")]
public float pipe_radius
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("pipe_thickness")]
public float pipe_thickness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("pipe_length")]
public float pipe_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("pipe_thermal_conductivity")]
public float pipe_thermal_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)200;

[JsonProperty("pipe_depth_under_ground_surface")]
public float pipe_depth_under_ground_surface
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3;

[JsonProperty("soil_condition")]
public SoilconditionType soil_condition
{
    get
    {
    }
    set
    {
    }
}
 = (SoilconditionType)HeavyAndDamp;

[JsonProperty("average_soil_surface_temperature")]
public float average_soil_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("amplitude_of_soil_surface_temperature")]
public float amplitude_of_soil_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("phase_constant_of_soil_surface_temperature")]
public float phase_constant_of_soil_surface_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("constant_term_flow_coefficient")]
public float constant_term_flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("temperature_term_flow_coefficient")]
public float temperature_term_flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_term_flow_coefficient")]
public float velocity_term_flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("velocity_squared_term_flow_coefficient")]
public float velocity_squared_term_flow_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum EarthtubetypeType
        {
        }
        
        public enum SoilconditionType
        {
        }
    }
    
    [JsonProperty("ZoneCoolTower:Shower")]
    [Description(@"A cooltower (sometimes referred to as a wind tower or a shower cooling tower) models passive downdraught evaporative cooling (PDEC) that is designed to capture the wind at the top of a tower and cool the outdoor air using water evaporation before delivering it to a space.")]
    public class ZoneCoolTower_Shower
    {
        
        private void WaterFlowSchedule;
        
        private void WindDrivenFlow;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_supply_storage_tank_name")]
public string water_supply_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("flow_control_type")]
public FlowcontroltypeType flow_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (FlowcontroltypeType)WindDrivenFlow;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_water_flow_rate")]
public float maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("effective_tower_height")]
public float effective_tower_height
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airflow_outlet_area")]
public float airflow_outlet_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public float maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_indoor_temperature")]
public float minimum_indoor_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_water_loss")]
public float fraction_of_water_loss
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_flow_schedule")]
public float fraction_of_flow_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_power_consumption")]
public float rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Water flow schedule should be selected when the water flow rate is known. Wind-dr" +
            "iven flow should be selected when the water flow rate is unknown.")]
        public enum FlowcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneThermalChimney")]
    [Description("A thermal chimney is a vertical shaft utilizing solar radiation to enhance natura" +
        "l ventilation. It consists of an absorber wall, air gap and glass cover with hig" +
        "h solar transmissivity.")]
    public class ZoneThermalChimney
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("width_of_the_absorber_wall")]
public float width_of_the_absorber_wall
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_area_of_air_channel_outlet")]
public float cross_sectional_area_of_air_channel_outlet
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("discharge_coefficient")]
public float discharge_coefficient
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("zone_1_name")]
public string zone_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_1")]
public float distance_from_top_of_thermal_chimney_to_inlet_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_1")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_1")]
public float cross_sectional_areas_of_air_channel_inlet_1
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_2_name")]
public string zone_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_2")]
public float distance_from_top_of_thermal_chimney_to_inlet_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_2")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_2")]
public float cross_sectional_areas_of_air_channel_inlet_2
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_3_name")]
public string zone_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_3")]
public float distance_from_top_of_thermal_chimney_to_inlet_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_3")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_3")]
public float cross_sectional_areas_of_air_channel_inlet_3
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_4_name")]
public string zone_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_4")]
public float distance_from_top_of_thermal_chimney_to_inlet_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_4")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_4")]
public float cross_sectional_areas_of_air_channel_inlet_4
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_5_name")]
public string zone_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_5")]
public float distance_from_top_of_thermal_chimney_to_inlet_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_5")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_5")]
public float cross_sectional_areas_of_air_channel_inlet_5
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_6_name")]
public string zone_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_6")]
public float distance_from_top_of_thermal_chimney_to_inlet_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_6")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_6")]
public float cross_sectional_areas_of_air_channel_inlet_6
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_7_name")]
public string zone_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_7")]
public float distance_from_top_of_thermal_chimney_to_inlet_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_7")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_7")]
public float cross_sectional_areas_of_air_channel_inlet_7
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_8_name")]
public string zone_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_8")]
public float distance_from_top_of_thermal_chimney_to_inlet_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_8")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_8")]
public float cross_sectional_areas_of_air_channel_inlet_8
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_9_name")]
public string zone_9_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_9")]
public float distance_from_top_of_thermal_chimney_to_inlet_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_9")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_9")]
public float cross_sectional_areas_of_air_channel_inlet_9
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_10_name")]
public string zone_10_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_10")]
public float distance_from_top_of_thermal_chimney_to_inlet_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_10")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_10")]
public float cross_sectional_areas_of_air_channel_inlet_10
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_11_name")]
public string zone_11_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_11")]
public float distance_from_top_of_thermal_chimney_to_inlet_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_11")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_11")]
public float cross_sectional_areas_of_air_channel_inlet_11
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_12_name")]
public string zone_12_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_12")]
public float distance_from_top_of_thermal_chimney_to_inlet_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_12")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_12")]
public float cross_sectional_areas_of_air_channel_inlet_12
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_13_name")]
public string zone_13_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_13")]
public float distance_from_top_of_thermal_chimney_to_inlet_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_13")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_13")]
public float cross_sectional_areas_of_air_channel_inlet_13
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_14_name")]
public string zone_14_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_14")]
public float distance_from_top_of_thermal_chimney_to_inlet_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_14")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_14")]
public float cross_sectional_areas_of_air_channel_inlet_14
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_15_name")]
public string zone_15_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_15")]
public float distance_from_top_of_thermal_chimney_to_inlet_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_15")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_15")]
public float cross_sectional_areas_of_air_channel_inlet_15
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_16_name")]
public string zone_16_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_16")]
public float distance_from_top_of_thermal_chimney_to_inlet_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_16")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_16")]
public float cross_sectional_areas_of_air_channel_inlet_16
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_17_name")]
public string zone_17_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_17")]
public float distance_from_top_of_thermal_chimney_to_inlet_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_17")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_17")]
public float cross_sectional_areas_of_air_channel_inlet_17
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_18_name")]
public string zone_18_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_18")]
public float distance_from_top_of_thermal_chimney_to_inlet_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_18")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_18")]
public float cross_sectional_areas_of_air_channel_inlet_18
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_19_name")]
public string zone_19_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_19")]
public float distance_from_top_of_thermal_chimney_to_inlet_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_19")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_19")]
public float cross_sectional_areas_of_air_channel_inlet_19
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_20_name")]
public string zone_20_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("distance_from_top_of_thermal_chimney_to_inlet_20")]
public float distance_from_top_of_thermal_chimney_to_inlet_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relative_ratios_of_air_flow_rates_passing_through_zone_20")]
public float relative_ratios_of_air_flow_rates_passing_through_zone_20
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cross_sectional_areas_of_air_channel_inlet_20")]
public float cross_sectional_areas_of_air_channel_inlet_20
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.ZoneHVACAirLoopTerminalUnits
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:Reheat")]
    [Description("Central air system terminal unit, single duct, constant volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    public class AirTerminal_SingleDuct_ConstantVolume_Reheat
    {
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:NoReheat")]
    [Description("Central air system terminal unit, single duct, constant volume, without reheat co" +
        "il")]
    public class AirTerminal_SingleDuct_ConstantVolume_NoReheat
    {
        
        private void CurrentOccupancy;
        
        private void DesignOccupancy;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("per_person_ventilation_rate_mode")]
public PerpersonventilationratemodeType per_person_ventilation_rate_mode
{
    get
    {
    }
    set
    {
    }
}
 = (PerpersonventilationratemodeType)CurrentOccupancy;
        
        [Description("CurrentOccupancy uses current number of people in the zone which may vary DesignO" +
            "ccupancy uses the total number of people in the zone and is constant")]
        public enum PerpersonventilationratemodeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:VAV:NoReheat")]
    [Description("Central air system terminal unit, single duct, variable volume, with no reheat co" +
        "il.")]
    public class AirTerminal_SingleDuct_VAV_NoReheat
    {
        
        private void Constant;
        
        private void FixedFlowRate;
        
        private void Scheduled;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_input_method")]
public ZoneminimumairflowinputmethodType zone_minimum_air_flow_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneminimumairflowinputmethodType)Constant;

[JsonProperty("constant_minimum_air_flow_fraction")]
public string constant_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("fixed_minimum_air_flow_rate")]
public string fixed_minimum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string minimum_air_flow_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
            "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
            "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
            " Flow")]
        public enum ZoneminimumairflowinputmethodType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat")]
    [Description("Central air system terminal unit, single duct, variable volume, with reheat coil " +
        "(hot water, electric, gas, or steam).")]
    public class AirTerminal_SingleDuct_VAV_Reheat
    {
        
        private void Constant;
        
        private void FixedFlowRate;
        
        private void Scheduled;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Normal;
        
        private void Reverse;
        
        private void ReverseWithLimits;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("damper_air_outlet_node_name")]
public string damper_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_input_method")]
public ZoneminimumairflowinputmethodType zone_minimum_air_flow_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (ZoneminimumairflowinputmethodType)Constant;

[JsonProperty("constant_minimum_air_flow_fraction")]
public string constant_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("fixed_minimum_air_flow_rate")]
public string fixed_minimum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("minimum_air_flow_fraction_schedule_name")]
public string minimum_air_flow_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("damper_heating_action")]
public DamperheatingactionType damper_heating_action
{
    get
    {
    }
    set
    {
    }
}
 = (DamperheatingactionType)ReverseWithLimits;

[JsonProperty("maximum_flow_per_zone_floor_area_during_reheat")]
public string maximum_flow_per_zone_floor_area_during_reheat
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_flow_fraction_during_reheat")]
public string maximum_flow_fraction_during_reheat
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rat" +
            "e) FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow " +
            "rate) Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air" +
            " Flow")]
        public enum ZoneminimumairflowinputmethodType
        {
        }
        
        public enum ReheatcoilobjecttypeType
        {
        }
        
        [Description("Normal means the damper is fixed at the minimum position in heating mode Reverse " +
            "means the damper can open fully during reheat ReverseWithLimits means the damper" +
            " will open partially during reheat as specified in the following 2 fields")]
        public enum DamperheatingactionType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan")]
    [Description(@"Central air system terminal unit, single duct, variable volume, with reheat coil (hot water, electric, gas, or steam) and variable-speed fan. These units are usually employed in underfloor air distribution (UFAD) systems where the air is supplied at low static pressure through an underfloor plenum. The fan is used to control the flow of conditioned air that enters the space.")]
    public class AirTerminal_SingleDuct_VAV_Reheat_VariableSpeedFan
    {
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cooling_air_flow_rate")]
public string maximum_cooling_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_air_flow_rate")]
public string maximum_heating_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_fraction")]
public float zone_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_object_type")]
public FanobjecttypeType fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum FanobjecttypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat")]
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with no reheat coil.")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_NoReheat
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_fraction")]
public float zone_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat")]
    [Description("Central air system terminal unit, single duct, variable volume for both cooling a" +
        "nd heating, with reheat coil (hot water, electric, gas, or steam).")]
    public class AirTerminal_SingleDuct_VAV_HeatAndCool_Reheat
    {
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("damper_air_outlet_node_name")]
public string damper_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_fraction")]
public float zone_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("maximum_reheat_air_temperature")]
public float maximum_reheat_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:SeriesPIU:Reheat")]
    [Description("Central air system terminal unit, single duct, variable volume, series powered in" +
        "duction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    public class AirTerminal_SingleDuct_SeriesPIU_Reheat
    {
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_primary_air_flow_rate")]
public string maximum_primary_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_primary_air_flow_fraction")]
public string minimum_primary_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_air_inlet_node_name")]
public string reheat_coil_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_mixer_name")]
public string zone_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;
        
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:ParallelPIU:Reheat")]
    [Description("Central air system terminal unit, single duct, variable volume, parallel powered " +
        "induction unit (PIU), with reheat coil (hot water, electric, gas, or steam).")]
    public class AirTerminal_SingleDuct_ParallelPIU_Reheat
    {
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_primary_air_flow_rate")]
public string maximum_primary_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_secondary_air_flow_rate")]
public string maximum_secondary_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_primary_air_flow_fraction")]
public string minimum_primary_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_on_flow_fraction")]
public string fan_on_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("secondary_air_inlet_node_name")]
public string secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_air_inlet_node_name")]
public string reheat_coil_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_mixer_name")]
public string zone_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_object_type")]
public ReheatcoilobjecttypeType reheat_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("reheat_coil_name")]
public string reheat_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;
        
        public enum ReheatcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction")]
    [Description("Central air system terminal unit, single duct, variable volume, induction unit wi" +
        "th hot water reheat coil and chilled water recool coil.")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeInduction
    {
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_total_air_flow_rate")]
public string maximum_total_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("induction_ratio")]
public float induction_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("induced_air_inlet_node_name")]
public string induced_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_flow_rate")]
public string maximum_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_flow_rate")]
public float minimum_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cold_water_flow_rate")]
public string maximum_cold_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_cold_water_flow_rate")]
public float minimum_cold_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cooling_convergence_tolerance")]
public float cooling_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("zone_mixer_name")]
public string zone_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam")]
    [Description("Central air system terminal unit, single duct, constant volume, with heating and/" +
        "or cooling. Operates as two-pipe unit if heating or cooling water is omitted. He" +
        "ating and/or cooling can be scheduled off for dedicated ventilation.")]
    public class AirTerminal_SingleDuct_ConstantVolume_FourPipeBeam
    {
        

[JsonProperty("primary_air_availability_schedule_name")]
public string primary_air_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_availability_schedule_name")]
public string cooling_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_availability_schedule_name")]
public string heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_inlet_node_name")]
public string primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("primary_air_outlet_node_name")]
public string primary_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_inlet_node_name")]
public string hot_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_outlet_node_name")]
public string hot_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_primary_air_volume_flow_rate")]
public string design_primary_air_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_chilled_water_volume_flow_rate")]
public string design_chilled_water_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_hot_water_volume_flow_rate")]
public string design_hot_water_volume_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("zone_total_beam_length")]
public string zone_total_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_primary_air_flow_rate_per_beam_length")]
public float rated_primary_air_flow_rate_per_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.035;

[JsonProperty("beam_rated_cooling_capacity_per_beam_length")]
public float beam_rated_cooling_capacity_per_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)600;

[JsonProperty("beam_rated_cooling_room_air_chilled_water_temperature_difference")]
public float beam_rated_cooling_room_air_chilled_water_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("beam_rated_chilled_water_volume_flow_rate_per_beam_length")]
public float beam_rated_chilled_water_volume_flow_rate_per_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5E-05;

[JsonProperty("beam_cooling_capacity_temperature_difference_modification_factor_curve_name")]
public string beam_cooling_capacity_temperature_difference_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("beam_cooling_capacity_air_flow_modification_factor_curve_name")]
public string beam_cooling_capacity_air_flow_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("beam_cooling_capacity_chilled_water_flow_modification_factor_curve_name")]
public string beam_cooling_capacity_chilled_water_flow_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("beam_rated_heating_capacity_per_beam_length")]
public float beam_rated_heating_capacity_per_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1500;

[JsonProperty("beam_rated_heating_room_air_hot_water_temperature_difference")]
public float beam_rated_heating_room_air_hot_water_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)27.8;

[JsonProperty("beam_rated_hot_water_volume_flow_rate_per_beam_length")]
public float beam_rated_hot_water_volume_flow_rate_per_beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5E-05;

[JsonProperty("beam_heating_capacity_temperature_difference_modification_factor_curve_name")]
public string beam_heating_capacity_temperature_difference_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("beam_heating_capacity_air_flow_modification_factor_curve_name")]
public string beam_heating_capacity_air_flow_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("beam_heating_capacity_hot_water_flow_modification_factor_curve_name")]
public string beam_heating_capacity_hot_water_flow_modification_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirTerminal:SingleDuct:ConstantVolume:CooledBeam")]
    [Description("Central air system terminal unit, single duct, constant volume, with cooled beam " +
        "(active or passive).")]
    public class AirTerminal_SingleDuct_ConstantVolume_CooledBeam
    {
        
        private void Active;
        
        private void Passive;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooled_beam_type")]
public CooledbeamtypeType cooled_beam_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_inlet_node_name")]
public string supply_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_outlet_node_name")]
public string supply_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_inlet_node_name")]
public string chilled_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("chilled_water_outlet_node_name")]
public string chilled_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_volumetric_flow_rate")]
public string supply_air_volumetric_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_total_chilled_water_volumetric_flow_rate")]
public string maximum_total_chilled_water_volumetric_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("number_of_beams")]
public string number_of_beams
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("beam_length")]
public string beam_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("design_inlet_water_temperature")]
public float design_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15;

[JsonProperty("design_outlet_water_temperature")]
public float design_outlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)17;

[JsonProperty("coil_surface_area_per_coil_length")]
public float coil_surface_area_per_coil_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5.422;

[JsonProperty("model_parameter_a")]
public float model_parameter_a
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)15.3;

[JsonProperty("model_parameter_n1")]
public float model_parameter_n1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("model_parameter_n2")]
public float model_parameter_n2
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.84;

[JsonProperty("model_parameter_n3")]
public float model_parameter_n3
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.12;

[JsonProperty("model_parameter_a0")]
public float model_parameter_a0
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.171;

[JsonProperty("model_parameter_k1")]
public float model_parameter_k1
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0057;

[JsonProperty("model_parameter_n")]
public float model_parameter_n
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.4;

[JsonProperty("coefficient_of_induction_kin")]
public string coefficient_of_induction_kin
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autocalculate;

[JsonProperty("leaving_pipe_inside_diameter")]
public float leaving_pipe_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0145;
        
        public enum CooledbeamtypeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:SingleDuct:Mixer")]
    [Description(@"The mixer air terminal unit provides a means of supplying central system air to the air inlet or outlet side of a zoneHVAC equipment such as a four pipe fan coil unit. Normally the central air would be ventilation air from a dedicated outdoor air system (DOAS).")]
    public class AirTerminal_SingleDuct_Mixer
    {
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void ZoneHVAC:FourPipeFanCoil;
        
        private void ZoneHVAC:PackagedTerminalAirConditioner;
        
        private void ZoneHVAC:PackagedTerminalHeatPump;
        
        private void ZoneHVAC:TerminalUnit:VariableRefrigerantFlow;
        
        private void ZoneHVAC:UnitVentilator;
        
        private void ZoneHVAC:WaterToAirHeatPump;
        
        private void InletSide;
        
        private void SupplySide;
        
        private void CurrentOccupancy;
        
        private void DesignOccupancy;
        

[JsonProperty("zonehvac_unit_object_type")]
public ZonehvacunitobjecttypeType zonehvac_unit_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zonehvac_unit_object_name")]
public string zonehvac_unit_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixer_outlet_node_name")]
public string mixer_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixer_primary_air_inlet_node_name")]
public string mixer_primary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixer_secondary_air_inlet_node_name")]
public string mixer_secondary_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixer_connection_type")]
public MixerconnectiontypeType mixer_connection_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("per_person_ventilation_rate_mode")]
public PerpersonventilationratemodeType per_person_ventilation_rate_mode
{
    get
    {
    }
    set
    {
    }
}
 = (PerpersonventilationratemodeType)CurrentOccupancy;
        
        [Description("The type of ZoneHVAC equipment to which this terminal mixer will be connected.")]
        public enum ZonehvacunitobjecttypeType
        {
        }
        
        [Description(@"This input field allows user to specify the mixer connection type. Valid choices are InletSide or SupplySide. This is a required input field. If the mixer connection type selected is InletSide, then the mixer is connected on the inlet side of the ZoneHVAC equipment, or else if the mixer connection type selected is SupplySide, then the mixer is connected at the outlet side of the ZoneHVAC equipment.")]
        public enum MixerconnectiontypeType
        {
        }
        
        [Description("CurrentOccupancy models demand controlled ventilation using the current number of" +
            " people DesignOccupancy uses the total Number of People in the zone and is const" +
            "ant")]
        public enum PerpersonventilationratemodeType
        {
        }
    }
    
    [JsonProperty("AirTerminal:DualDuct:ConstantVolume")]
    [Description("Central air system terminal unit, dual duct, constant volume.")]
    public class AirTerminal_DualDuct_ConstantVolume
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_air_inlet_node_name")]
public string hot_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_air_inlet_node_name")]
public string cold_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirTerminal:DualDuct:VAV")]
    [Description("Central air system terminal unit, dual duct, variable volume.")]
    public class AirTerminal_DualDuct_VAV
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_air_inlet_node_name")]
public string hot_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_air_inlet_node_name")]
public string cold_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_damper_air_flow_rate")]
public string maximum_damper_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_minimum_air_flow_fraction")]
public float zone_minimum_air_flow_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.2;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_air_flow_turndown_schedule_name")]
public string minimum_air_flow_turndown_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("AirTerminal:DualDuct:VAV:OutdoorAir")]
    [Description("Central air system terminal unit, dual duct, variable volume with special control" +
        "s. One VAV duct is controlled to supply ventilation air and the other VAV duct i" +
        "s controlled to meet the zone cooling load.")]
    public class AirTerminal_DualDuct_VAV_OutdoorAir
    {
        
        private void CurrentOccupancy;
        
        private void DesignOccupancy;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("recirculated_air_inlet_node_name")]
public string recirculated_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_terminal_air_flow_rate")]
public string maximum_terminal_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("per_person_ventilation_rate_mode")]
public PerpersonventilationratemodeType per_person_ventilation_rate_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("CurrentOccupancy models demand controlled ventilation using the current number of" +
            " people DesignOccupancy uses the total Number of People in the zone and is const" +
            "ant")]
        public enum PerpersonventilationratemodeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:AirDistributionUnit")]
    [Description("Central air system air distribution unit, serves as a wrapper for a specific type" +
        " of air terminal unit. This object is referenced in a ZoneHVAC:EquipmentList.")]
    public class ZoneHVAC_AirDistributionUnit
    {
        
        private void AirTerminal:DualDuct:ConstantVolume;
        
        private void AirTerminal:DualDuct:VAV;
        
        private void AirTerminal:DualDuct:VAV:OutdoorAir;
        
        private void AirTerminal:SingleDuct:ConstantVolume:CooledBeam;
        
        private void AirTerminal:SingleDuct:ConstantVolume:FourPipeBeam;
        
        private void AirTerminal:SingleDuct:ConstantVolume:FourPipeInduction;
        
        private void AirTerminal:SingleDuct:ConstantVolume:NoReheat;
        
        private void AirTerminal:SingleDuct:ConstantVolume:Reheat;
        
        private void AirTerminal:SingleDuct:Mixer;
        
        private void AirTerminal:SingleDuct:ParallelPIU:Reheat;
        
        private void AirTerminal:SingleDuct:SeriesPIU:Reheat;
        
        private void AirTerminal:SingleDuct:UserDefined;
        
        private void AirTerminal:SingleDuct:VAV:HeatAndCool:NoReheat;
        
        private void AirTerminal:SingleDuct:VAV:HeatAndCool:Reheat;
        
        private void AirTerminal:SingleDuct:VAV:NoReheat;
        
        private void AirTerminal:SingleDuct:VAV:Reheat;
        
        private void AirTerminal:SingleDuct:VAV:Reheat:VariableSpeedFan;
        

[JsonProperty("air_distribution_unit_outlet_node_name")]
public string air_distribution_unit_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_terminal_object_type")]
public AirterminalobjecttypeType air_terminal_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_terminal_name")]
public string air_terminal_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("nominal_upstream_leakage_fraction")]
public float nominal_upstream_leakage_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("constant_downstream_leakage_fraction")]
public float constant_downstream_leakage_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("design_specification_air_terminal_sizing_object_name")]
public string design_specification_air_terminal_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum AirterminalobjecttypeType
        {
        }
    }
}
namespace EnergyPlus.ZoneHVACControlsandThermostats
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ZoneControl:Humidistat")]
    [Description("Specifies zone relative humidity setpoint schedules for humidifying and dehumidif" +
        "ying.")]
    public class ZoneControl_Humidistat
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("humidifying_relative_humidity_setpoint_schedule_name")]
public string humidifying_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidifying_relative_humidity_setpoint_schedule_name")]
public string dehumidifying_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneControl:Thermostat")]
    [Description("Define the Thermostat settings for a zone or list of zones. If you use a ZoneList" +
        " in the Zone or ZoneList name field then this definition applies to all the zone" +
        "s in the ZoneList.")]
    public class ZoneControl_Thermostat
    {
        
        private void ThermostatSetpoint:DualSetpoint;
        
        private void ThermostatSetpoint:SingleCooling;
        
        private void ThermostatSetpoint:SingleHeating;
        
        private void ThermostatSetpoint:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:DualSetpoint;
        
        private void ThermostatSetpoint:SingleCooling;
        
        private void ThermostatSetpoint:SingleHeating;
        
        private void ThermostatSetpoint:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:DualSetpoint;
        
        private void ThermostatSetpoint:SingleCooling;
        
        private void ThermostatSetpoint:SingleHeating;
        
        private void ThermostatSetpoint:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:DualSetpoint;
        
        private void ThermostatSetpoint:SingleCooling;
        
        private void ThermostatSetpoint:SingleHeating;
        
        private void ThermostatSetpoint:SingleHeatingOrCooling;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type_schedule_name")]
public string control_type_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_1_object_type")]
public ControlobjecttypeType control_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_1_name")]
public string control_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_2_object_type")]
public ControlobjecttypeType control_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_2_name")]
public string control_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_3_object_type")]
public ControlobjecttypeType control_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_3_name")]
public string control_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_4_object_type")]
public ControlobjecttypeType control_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_4_name")]
public string control_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_difference_between_cutout_and_setpoint")]
public float temperature_difference_between_cutout_and_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;
        
        public enum ControlobjecttypeType
        {
        }
        
        public enum ControlobjecttypeType
        {
        }
        
        public enum ControlobjecttypeType
        {
        }
        
        public enum ControlobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneControl:Thermostat:OperativeTemperature")]
    [Description("This object can be used with the ZoneList option on a thermostat or with one of t" +
        "he zones on that list (but you won\'t be able to use the object list to pick only" +
        " one of those zones. Thermostat names are <Zone Name> <global Thermostat name> i" +
        "nternally.")]
    public class ZoneControl_Thermostat_OperativeTemperature
    {
        
        private void Constant;
        
        private void Scheduled;
        
        private void AdaptiveASH5580PercentUpperLine;
        
        private void AdaptiveASH5590PercentUpperLine;
        
        private void AdaptiveASH55CentralLine;
        
        private void AdaptiveCEN15251CategoryIIIUpperLine;
        
        private void AdaptiveCEN15251CategoryIIUpperLine;
        
        private void AdaptiveCEN15251CategoryIUpperLine;
        
        private void AdaptiveCEN15251CentralLine;
        
        private void None;
        

[JsonProperty("thermostat_name")]
public string thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction_input_mode")]
public RadiativefractioninputmodeType radiative_fraction_input_mode
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fixed_radiative_fraction")]
public float fixed_radiative_fraction
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("radiative_fraction_schedule_name")]
public string radiative_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("adaptive_comfort_model_type")]
public AdaptivecomfortmodeltypeType adaptive_comfort_model_type
{
    get
    {
    }
    set
    {
    }
}
 = (AdaptivecomfortmodeltypeType)None;
        
        public enum RadiativefractioninputmodeType
        {
        }
        
        [Description("the cooling setpoint temperature schedule of the referenced thermostat will be ad" +
            "justed based on the selected adaptive comfort model type")]
        public enum AdaptivecomfortmodeltypeType
        {
        }
    }
    
    [JsonProperty("ZoneControl:Thermostat:ThermalComfort")]
    [Description("If you use a ZoneList in the Zone or ZoneList name field then this definition app" +
        "lies to all the zones in the ZoneList.")]
    public class ZoneControl_Thermostat_ThermalComfort
    {
        
        private void ObjectAverage;
        
        private void PeopleAverage;
        
        private void SpecificObject;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating;
        
        private void ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling;
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("averaging_method")]
public AveragingmethodType averaging_method
{
    get
    {
    }
    set
    {
    }
}
 = (AveragingmethodType)PeopleAverage;

[JsonProperty("specific_people_name")]
public string specific_people_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_dry_bulb_temperature_setpoint")]
public float minimum_dry_bulb_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("maximum_dry_bulb_temperature_setpoint")]
public float maximum_dry_bulb_temperature_setpoint
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("thermal_comfort_control_type_schedule_name")]
public string thermal_comfort_control_type_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_1_object_type")]
public ThermalcomfortcontrolobjecttypeType thermal_comfort_control_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_1_name")]
public string thermal_comfort_control_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_2_object_type")]
public ThermalcomfortcontrolobjecttypeType thermal_comfort_control_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_2_name")]
public string thermal_comfort_control_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_3_object_type")]
public ThermalcomfortcontrolobjecttypeType thermal_comfort_control_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_3_name")]
public string thermal_comfort_control_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_4_object_type")]
public ThermalcomfortcontrolobjecttypeType thermal_comfort_control_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("thermal_comfort_control_4_name")]
public string thermal_comfort_control_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("The method used to calculate thermal comfort dry-bulb temperature setpoint for mu" +
            "ltiple people objects in a zone")]
        public enum AveragingmethodType
        {
        }
        
        public enum ThermalcomfortcontrolobjecttypeType
        {
        }
        
        public enum ThermalcomfortcontrolobjecttypeType
        {
        }
        
        public enum ThermalcomfortcontrolobjecttypeType
        {
        }
        
        public enum ThermalcomfortcontrolobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneControl:Thermostat:TemperatureAndHumidity")]
    [Description("This object modifies a ZoneControl:Thermostat object to effect temperature contro" +
        "l based on zone air humidity conditions.")]
    public class ZoneControl_Thermostat_TemperatureAndHumidity
    {
        
        private void None;
        
        private void Overcool;
        
        private void Constant;
        
        private void Scheduled;
        

[JsonProperty("thermostat_name")]
public string thermostat_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidifying_relative_humidity_setpoint_schedule_name")]
public string dehumidifying_relative_humidity_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)Overcool;

[JsonProperty("overcool_range_input_method")]
public OvercoolrangeinputmethodType overcool_range_input_method
{
    get
    {
    }
    set
    {
    }
}
 = (OvercoolrangeinputmethodType)Constant;

[JsonProperty("overcool_constant_range")]
public float overcool_constant_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.7;

[JsonProperty("overcool_range_schedule_name")]
public string overcool_range_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("overcool_control_ratio")]
public float overcool_control_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)3.6;
        
        public enum DehumidificationcontroltypeType
        {
        }
        
        public enum OvercoolrangeinputmethodType
        {
        }
    }
    
    [JsonProperty("ThermostatSetpoint:SingleHeating")]
    [Description("Used for a heating only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only heating is allowed with this control type.")]
    public class ThermostatSetpoint_SingleHeating
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:SingleCooling")]
    [Description("Used for a cooling only thermostat. The setpoint can be scheduled and varied thro" +
        "ughout the simulation but only cooling is allowed.")]
    public class ThermostatSetpoint_SingleCooling
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:SingleHeatingOrCooling")]
    [Description("Used for a heating and cooling thermostat with a single setpoint. The setpoint ca" +
        "n be scheduled and varied throughout the simulation for both heating and cooling" +
        ".")]
    public class ThermostatSetpoint_SingleHeatingOrCooling
    {
        

[JsonProperty("setpoint_temperature_schedule_name")]
public string setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:DualSetpoint")]
    [Description("Used for a heating and cooling thermostat with dual setpoints. The setpoints can " +
        "be scheduled and varied throughout the simulation for both heating and cooling.")]
    public class ThermostatSetpoint_DualSetpoint
    {
        

[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string heating_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_setpoint_temperature_schedule_name")]
public string cooling_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeating")]
    [Description("Used for heating only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only heating is allowed with this contr" +
        "ol type.")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeating
    {
        

[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string fanger_thermal_comfort_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleCooling")]
    [Description("Used for cooling only thermal comfort control. The PMV setpoint can be scheduled " +
        "and varied throughout the simulation but only cooling is allowed with this contr" +
        "ol type.")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleCooling
    {
        

[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string fanger_thermal_comfort_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:SingleHeatingOrCooling")]
    [Description("Used for heating and cooling thermal comfort control with a single setpoint. The " +
        "PMV setpoint can be scheduled and varied throughout the simulation for both heat" +
        "ing and cooling.")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_SingleHeatingOrCooling
    {
        

[JsonProperty("fanger_thermal_comfort_schedule_name")]
public string fanger_thermal_comfort_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ThermostatSetpoint:ThermalComfort:Fanger:DualSetpoint")]
    [Description("Used for heating and cooling thermal comfort control with dual setpoints. The PMV" +
        " setpoints can be scheduled and varied throughout the simulation for both heatin" +
        "g and cooling.")]
    public class ThermostatSetpoint_ThermalComfort_Fanger_DualSetpoint
    {
        

[JsonProperty("fanger_thermal_comfort_heating_schedule_name")]
public string fanger_thermal_comfort_heating_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fanger_thermal_comfort_cooling_schedule_name")]
public string fanger_thermal_comfort_cooling_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneControl:Thermostat:StagedDualSetpoint")]
    [Description("Define the Thermostat StagedDualSetpoint settings for a zone or list of zones. If" +
        " you use a ZoneList in the Zone or ZoneList name field then this definition appl" +
        "ies to all the zones in the ZoneList.")]
    public class ZoneControl_Thermostat_StagedDualSetpoint
    {
        

[JsonProperty("zone_or_zonelist_name")]
public string zone_or_zonelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_heating_stages")]
public float number_of_heating_stages
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_temperature_setpoint_schedule_name")]
public string heating_temperature_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_throttling_temperature_range")]
public float heating_throttling_temperature_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("stage_1_heating_temperature_offset")]
public float stage_1_heating_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_heating_temperature_offset")]
public float stage_2_heating_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_heating_temperature_offset")]
public float stage_3_heating_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_heating_temperature_offset")]
public float stage_4_heating_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cooling_stages")]
public float number_of_cooling_stages
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_temperature_setpoint_base_schedule_name")]
public string cooling_temperature_setpoint_base_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_throttling_temperature_range")]
public float cooling_throttling_temperature_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1.1;

[JsonProperty("stage_1_cooling_temperature_offset")]
public float stage_1_cooling_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_2_cooling_temperature_offset")]
public float stage_2_cooling_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_3_cooling_temperature_offset")]
public float stage_3_cooling_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("stage_4_cooling_temperature_offset")]
public float stage_4_cooling_temperature_offset
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneControl:ContaminantController")]
    [Description("Used to control a zone to a specified indoor level of CO2 or generic contaminants" +
        ", or to specify minimum CO2 concentration schedule name for a zone.")]
    public class ZoneControl_ContaminantController
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("carbon_dioxide_control_availability_schedule_name")]
public string carbon_dioxide_control_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("carbon_dioxide_setpoint_schedule_name")]
public string carbon_dioxide_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_carbon_dioxide_concentration_schedule_name")]
public string minimum_carbon_dioxide_concentration_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_carbon_dioxide_concentration_schedule_name")]
public string maximum_carbon_dioxide_concentration_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generic_contaminant_control_availability_schedule_name")]
public string generic_contaminant_control_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("generic_contaminant_setpoint_schedule_name")]
public string generic_contaminant_setpoint_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.ZoneHVACEquipmentConnections
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ZoneHVAC:EquipmentList")]
    [Description(@"List equipment in simulation order. Note that an ZoneHVAC:AirDistributionUnit object must be listed in this statement if there is a forced air system serving the zone from the air loop. Equipment is simulated in the order specified by Zone Equipment Cooling Sequence and Zone Equipment Heating or No-Load Sequence, depending on the thermostat request. For equipment of similar type, assign sequence 1 to the first system intended to serve that type of load. For situations where one or more equipment types has limited capacity or limited control, order the sequence so that the most controllable piece of equipment runs last. For example, with a dedicated outdoor air system (DOAS), the air terminal for the DOAS should be assigned Heating Sequence = 1 and Cooling Sequence = 1. Any other equipment should be assigned sequence 2 or higher so that it will see the net load after the DOAS air is added to the zone.")]
    public class ZoneHVAC_EquipmentList
    {
        
        private void SequentialLoad;
        
        private void SequentialUniformPLR;
        
        private void UniformLoad;
        
        private void UniformPLR;
        

[JsonProperty("load_distribution_scheme")]
public LoaddistributionschemeType load_distribution_scheme
{
    get
    {
    }
    set
    {
    }
}
 = (LoaddistributionschemeType)SequentialLoad;

[JsonProperty("equipment")]
public string equipment
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum LoaddistributionschemeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:EquipmentConnections")]
    [Description("Specifies the HVAC equipment connections for a zone. Node names are specified for" +
        " the zone air node, air inlet nodes, air exhaust nodes, and the air return node." +
        " A zone equipment list is referenced which lists all HVAC equipment connected to" +
        " the zone.")]
    public class ZoneHVAC_EquipmentConnections
    {
        

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_conditioning_equipment_list_name")]
public string zone_conditioning_equipment_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_air_inlet_node_or_nodelist_name")]
public string zone_air_inlet_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_air_exhaust_node_or_nodelist_name")]
public string zone_air_exhaust_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_air_node_name")]
public string zone_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_return_air_node_or_nodelist_name")]
public string zone_return_air_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_return_air_node_1_flow_rate_fraction_schedule_name")]
public string zone_return_air_node_1_flow_rate_fraction_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_return_air_node_1_flow_rate_basis_node_or_nodelist_name")]
public string zone_return_air_node_1_flow_rate_basis_node_or_nodelist_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
namespace EnergyPlus.ZoneHVACForcedAirUnits
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [JsonProperty("ZoneHVAC:IdealLoadsAirSystem")]
    [Description(@"Ideal system used to calculate loads without modeling a full HVAC system. All that is required for the ideal system are zone controls, zone equipment configurations, and the ideal loads system component. This component can be thought of as an ideal unit that mixes zone air with the specified amount of outdoor air and then adds or removes heat and moisture at 100% efficiency in order to meet the specified controls. Energy use is reported as DistrictHeating and DistrictCooling.")]
    public class ZoneHVAC_IdealLoadsAirSystem
    {
        
        private void LimitCapacity;
        
        private void LimitFlowRate;
        
        private void LimitFlowRateAndCapacity;
        
        private void NoLimit;
        
        private void LimitCapacity;
        
        private void LimitFlowRate;
        
        private void LimitFlowRateAndCapacity;
        
        private void NoLimit;
        
        private void ConstantSensibleHeatRatio;
        
        private void ConstantSupplyHumidityRatio;
        
        private void Humidistat;
        
        private void None;
        
        private void ConstantSupplyHumidityRatio;
        
        private void Humidistat;
        
        private void None;
        
        private void CO2Setpoint;
        
        private void None;
        
        private void OccupancySchedule;
        
        private void DifferentialDryBulb;
        
        private void DifferentialEnthalpy;
        
        private void NoEconomizer;
        
        private void Enthalpy;
        
        private void None;
        
        private void Sensible;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_supply_air_node_name")]
public string zone_supply_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_exhaust_air_node_name")]
public string zone_exhaust_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_inlet_air_node_name")]
public string system_inlet_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_heating_supply_air_temperature")]
public float maximum_heating_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)50;

[JsonProperty("minimum_cooling_supply_air_temperature")]
public float minimum_cooling_supply_air_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)13;

[JsonProperty("maximum_heating_supply_air_humidity_ratio")]
public float maximum_heating_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0156;

[JsonProperty("minimum_cooling_supply_air_humidity_ratio")]
public float minimum_cooling_supply_air_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.0077;

[JsonProperty("heating_limit")]
public HeatinglimitType heating_limit
{
    get
    {
    }
    set
    {
    }
}
 = (HeatinglimitType)NoLimit;

[JsonProperty("maximum_heating_air_flow_rate")]
public string maximum_heating_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_sensible_heating_capacity")]
public string maximum_sensible_heating_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_limit")]
public CoolinglimitType cooling_limit
{
    get
    {
    }
    set
    {
    }
}
 = (CoolinglimitType)NoLimit;

[JsonProperty("maximum_cooling_air_flow_rate")]
public string maximum_cooling_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_total_cooling_capacity")]
public string maximum_total_cooling_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_availability_schedule_name")]
public string heating_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_availability_schedule_name")]
public string cooling_availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dehumidification_control_type")]
public DehumidificationcontroltypeType dehumidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (DehumidificationcontroltypeType)ConstantSensibleHeatRatio;

[JsonProperty("cooling_sensible_heat_ratio")]
public float cooling_sensible_heat_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("humidification_control_type")]
public HumidificationcontroltypeType humidification_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (HumidificationcontroltypeType)None;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("demand_controlled_ventilation_type")]
public DemandcontrolledventilationtypeType demand_controlled_ventilation_type
{
    get
    {
    }
    set
    {
    }
}
 = (DemandcontrolledventilationtypeType)None;

[JsonProperty("outdoor_air_economizer_type")]
public OutdooraireconomizertypeType outdoor_air_economizer_type
{
    get
    {
    }
    set
    {
    }
}
 = (OutdooraireconomizertypeType)NoEconomizer;

[JsonProperty("heat_recovery_type")]
public HeatrecoverytypeType heat_recovery_type
{
    get
    {
    }
    set
    {
    }
}
 = (HeatrecoverytypeType)None;

[JsonProperty("sensible_heat_recovery_effectiveness")]
public float sensible_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("latent_heat_recovery_effectiveness")]
public float latent_heat_recovery_effectiveness
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.65;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum HeatinglimitType
        {
        }
        
        public enum CoolinglimitType
        {
        }
        
        [Description(@"ConstantSensibleHeatRatio means that the ideal loads system will be controlled to meet the sensible cooling load, and the latent cooling rate will be computed using a constant sensible heat ratio (SHR) Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. None means that there is no dehumidification. ConstantSupplyHumidityRatio means that during cooling the supply air will always be at the Minimum Cooling Supply Humidity Ratio.")]
        public enum DehumidificationcontroltypeType
        {
        }
        
        [Description(@"None means that there is no humidification. Humidistat means that there is a ZoneControl:Humidistat for this zone and the ideal loads system will attempt to satisfy the humidistat. ConstantSupplyHumidityRatio means that during heating the supply air will always be at the Maximum Heating Supply Humidity Ratio.")]
        public enum HumidificationcontroltypeType
        {
        }
        
        [Description(@"This field controls how the minimum outdoor air flow rate is calculated. None means that design occupancy will be used to compute the minimum outdoor air flow rate OccupancySchedule means that current occupancy level will be used. CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow rate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon dioxide setpoint defined in a ZoneControl:ContaminantController object.")]
        public enum DemandcontrolledventilationtypeType
        {
        }
        
        [Description("DifferentialDryBulb and DifferentialEnthalpy will increase the outdoor air flow r" +
            "ate when there is a cooling load and the outdoor air temperature or enthalpy is " +
            "below the zone exhaust air temperature or enthalpy.")]
        public enum OutdooraireconomizertypeType
        {
        }
        
        public enum HeatrecoverytypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:FourPipeFanCoil")]
    [Description("Four pipe fan coil system. Forced-convection hydronic heating-cooling unit with s" +
        "upply fan, hot water heating coil, chilled water cooling coil, and fixed-positio" +
        "n outdoor air mixer.")]
    public class ZoneHVAC_FourPipeFanCoil
    {
        
        private void ASHRAE90VariableFan;
        
        private void ConstantFanVariableFlow;
        
        private void CyclingFan;
        
        private void MultiSpeedFan;
        
        private void VariableFanConstantFlow;
        
        private void VariableFanVariableFlow;
        
        private void OutdoorAir:Mixer;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void CoilSystem:Cooling:Water:HeatExchangerAssisted;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Water;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_flow_rate")]
public string maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_speed_supply_air_flow_ratio")]
public float low_speed_supply_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.33;

[JsonProperty("medium_speed_supply_air_flow_ratio")]
public float medium_speed_supply_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.66;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_schedule_name")]
public string outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cold_water_flow_rate")]
public string maximum_cold_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_cold_water_flow_rate")]
public float minimum_cold_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("cooling_convergence_tolerance")]
public float cooling_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_flow_rate")]
public string maximum_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_flow_rate")]
public float minimum_hot_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string minimum_supply_air_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string maximum_supply_air_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        public enum CapacitycontrolmethodType
        {
        }
        
        [Description("Currently only one type OutdoorAir:Mixer object is available. This field should b" +
            "e left blank if the FanCoil is connected to central dedicated outdoor air throug" +
            "h an AirTerminal:SingleDuct:Mixer object.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        [Description(@"Fan type must be according to capacity control method (see I/O) For ConstantFanVariableFlow a Fan:OnOff or Fan:ConstantVolume is valid. For CyclingFan a Fan:OnOff is valid. For VariableFanVariableFlow or VariableFanConstantFlow a Fan:VariableVolume is valid. For ASHRAE90.1 a Fan:OnOff or Fan:VariableVolume is valid. Fan:SystemModel is valid for all capacity control methods. The fan's inlet node should be the same as the outdoor air mixer's mixed air node.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:WindowAirConditioner")]
    [Description("Window air conditioner. Forced-convection cooling-only unit with supply fan, dire" +
        "ct expansion (DX) cooling coil, and fixed-position outdoor air mixer.")]
    public class ZoneHVAC_WindowAirConditioner
    {
        
        private void OutdoorAir:Mixer;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void BlowThrough;
        
        private void DrawThrough;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_flow_rate")]
public string maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dx_cooling_coil_name")]
public string dx_cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_convergence_tolerance")]
public float cooling_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("currently only one OutdoorAir:Mixer object type is available.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        [Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:PackagedTerminalAirConditioner")]
    [Description("Packaged terminal air conditioner (PTAC). Forced-convection heating-cooling unit " +
        "with supply fan, direct expansion (DX) cooling coil, heating coil (gas, electric" +
        ", hot water, or steam) and fixed-position outdoor air mixer.")]
    public class ZoneHVAC_PackagedTerminalAirConditioner
    {
        
        private void OutdoorAir:Mixer;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void None;
        
        private void SingleZoneVAV;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)DrawThrough;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolmethodType)None;

[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string minimum_supply_air_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string maximum_supply_air_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        [Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
            "e left blank if the PTAC is connected to central dedicated outdoor air through a" +
            "n AirTerminal:SingleDuct:Mixer object.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        [Description(@"Fan:ConstantVolume only works when continuous fan operation is used the entire simulation (all supply air fan operating mode schedule values are greater than 0). If any fan operating mode schedule values are 0 a Fan:SystemModel or Fan:OnOff object must be used.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description("Select the type of heating coil.")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Select the type of Cooling Coil. Only works with Coil:Cooling:DX:SingleSpeed or C" +
            "oilSystem:Cooling:DX:HeatExchangerAssisted or Coil:Cooling:DX:VariableSpeed.")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("Select fan placement as either blow through or draw through.")]
        public enum FanplacementType
        {
        }
        
        public enum CapacitycontrolmethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:PackagedTerminalHeatPump")]
    [Description(@"Packaged terminal heat pump (PTHP). Forced-convection heating-cooling unit with supply fan, direct expansion (DX) cooling coil, DX heating coil (air-to-air heat pump), supplemental heating coil (gas, electric, hot water, or steam), and fixed-position outdoor air mixer.")]
    public class ZoneHVAC_PackagedTerminalHeatPump
    {
        
        private void OutdoorAir:Mixer;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Coil:Heating:DX:SingleSpeed;
        
        private void Coil:Heating:DX:VariableSpeed;
        
        private void Coil:Cooling:DX:SingleSpeed;
        
        private void Coil:Cooling:DX:VariableSpeed;
        
        private void CoilSystem:Cooling:DX:HeatExchangerAssisted;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void None;
        
        private void SingleZoneVAV;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_convergence_tolerance")]
public float cooling_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)DrawThrough;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("capacity_control_method")]
public CapacitycontrolmethodType capacity_control_method
{
    get
    {
    }
    set
    {
    }
}
 = (CapacitycontrolmethodType)None;

[JsonProperty("minimum_supply_air_temperature_in_cooling_mode")]
public string minimum_supply_air_temperature_in_cooling_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_supply_air_temperature_in_heating_mode")]
public string maximum_supply_air_temperature_in_heating_mode
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;
        
        [Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
            "e left blank if the PTHP is connected to central dedicated outdoor air through a" +
            "n AirTerminal:SingleDuct:Mixer object.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        [Description("Fan:ConstantVolume only works with fan operating mode is continuous.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description("Only works with Coil:Heating:DX:SingleSpeed or Coil:Heating:DX:VariableSpeed.")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("Only works with Coil:Cooling:DX:SingleSpeed or CoilSystem:Cooling:DX:HeatExchange" +
            "rAssisted or Coil:Cooling:DX:VariableSpeed.")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coil.")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
        
        [Description("Select fan placement as either blow through or draw through.")]
        public enum FanplacementType
        {
        }
        
        public enum CapacitycontrolmethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:WaterToAirHeatPump")]
    [Description("Water-to-air heat pump. Forced-convection heating-cooling unit with supply fan, w" +
        "ater-to-air cooling and heating coils, supplemental heating coil (gas, electric," +
        " hot water, or steam), and fixed-position outdoor air mixer.")]
    public class ZoneHVAC_WaterToAirHeatPump
    {
        
        private void OutdoorAir:Mixer;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Coil:Heating:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:Cooling:WaterToAirHeatPump:EquationFit;
        
        private void Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Constant;
        
        private void ConstantOnDemand;
        
        private void Cycling;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_object_type")]
public OutdoorairmixerobjecttypeType outdoor_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_name")]
public string outdoor_air_mixer_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_supply_air_flow_rate")]
public string no_load_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cycling_rate")]
public float maximum_cycling_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2.5;

[JsonProperty("heat_pump_time_constant")]
public float heat_pump_time_constant
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("fraction_of_on_cycle_power_use")]
public float fraction_of_on_cycle_power_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.01;

[JsonProperty("heat_pump_fan_delay_time")]
public float heat_pump_fan_delay_time
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)60;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("outdoor_dry_bulb_temperature_sensor_node_name")]
public string outdoor_dry_bulb_temperature_sensor_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (FanplacementType)BlowThrough;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_pump_coil_water_flow_mode")]
public HeatpumpcoilwaterflowmodeType heat_pump_coil_water_flow_mode
{
    get
    {
    }
    set
    {
    }
}
 = (HeatpumpcoilwaterflowmodeType)Cycling;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Currently only one OutdoorAir:Mixer object type is available. This field should b" +
            "e left blank if the WSHP is connected to central dedicated outdoor air through a" +
            "n AirTerminal:SingleDuct:Mixer object.")]
        public enum OutdoorairmixerobjecttypeType
        {
        }
        
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coils")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        [Description(@"used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit Constant results in 100% water flow regardless of compressor PLR Cycling results in water flow that matches compressor PLR ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load")]
        public enum HeatpumpcoilwaterflowmodeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:Dehumidifier:DX")]
    [Description(@"This object calculates the performance of zone (room) air dehumidifiers. Meant to model conventional direct expansion (DX) cooling-based room air dehumidifiers (reject 100% of condenser heat to the zone air), but this object might be able to be used to model other room air dehumidifier types.")]
    public class ZoneHVAC_Dehumidifier_DX
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_water_removal")]
public float rated_water_removal
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_energy_factor")]
public float rated_energy_factor
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_air_flow_rate")]
public float rated_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_removal_curve_name")]
public string water_removal_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("energy_factor_curve_name")]
public string energy_factor_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("part_load_fraction_correlation_curve_name")]
public string part_load_fraction_correlation_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_dry_bulb_temperature_for_dehumidifier_operation")]
public float minimum_dry_bulb_temperature_for_dehumidifier_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("maximum_dry_bulb_temperature_for_dehumidifier_operation")]
public float maximum_dry_bulb_temperature_for_dehumidifier_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)35;

[JsonProperty("off_cycle_parasitic_electric_load")]
public float off_cycle_parasitic_electric_load
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensate_collection_water_storage_tank_name")]
public string condensate_collection_water_storage_tank_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneHVAC:EnergyRecoveryVentilator")]
    [Description(@"This compound component models a stand-alone energy recovery ventilator (ERV) that conditions outdoor ventilation air and supplies that air directly to a zone. The ERV unit is modeled as a collection of components: air-to-air heat exchanger, supply air fan, exhaust air fan and an optional controller to avoid overheating of the supply air (economizer or free cooling operation).")]
    public class ZoneHVAC_EnergyRecoveryVentilator
    {
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heat_exchanger_name")]
public string heat_exchanger_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_flow_rate")]
public string supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_flow_rate")]
public string exhaust_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_fan_name")]
public string exhaust_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("controller_name")]
public string controller_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_rate_per_unit_floor_area")]
public float ventilation_rate_per_unit_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("ventilation_rate_per_occupant")]
public float ventilation_rate_per_occupant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneHVAC:EnergyRecoveryVentilator:Controller")]
    [Description("This controller is used exclusively by the ZoneHVAC:EnergyRecoveryVentilator obje" +
        "ct to allow economizer (free cooling) operation when possible.")]
    public class ZoneHVAC_EnergyRecoveryVentilator_Controller
    {
        
        private void ExhaustAirTemperatureLimit;
        
        private void NoExhaustAirTemperatureLimit;
        
        private void ExhaustAirEnthalpyLimit;
        
        private void NoExhaustAirEnthalpyLimit;
        
        private void No;
        
        private void Yes;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("temperature_high_limit")]
public float temperature_high_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_low_limit")]
public float temperature_low_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("enthalpy_high_limit")]
public float enthalpy_high_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("dewpoint_temperature_limit")]
public float dewpoint_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("electronic_enthalpy_limit_curve_name")]
public string electronic_enthalpy_limit_curve_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_temperature_limit")]
public ExhaustairtemperaturelimitType exhaust_air_temperature_limit
{
    get
    {
    }
    set
    {
    }
}
 = (ExhaustairtemperaturelimitType)NoExhaustAirTemperatureLimit;

[JsonProperty("exhaust_air_enthalpy_limit")]
public ExhaustairenthalpylimitType exhaust_air_enthalpy_limit
{
    get
    {
    }
    set
    {
    }
}
 = (ExhaustairenthalpylimitType)NoExhaustAirEnthalpyLimit;

[JsonProperty("time_of_day_economizer_flow_control_schedule_name")]
public string time_of_day_economizer_flow_control_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_humidity_control_flag")]
public HighhumiditycontrolflagType high_humidity_control_flag
{
    get
    {
    }
    set
    {
    }
}
 = (HighhumiditycontrolflagType)No;

[JsonProperty("humidistat_control_zone_name")]
public string humidistat_control_zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("high_humidity_outdoor_air_flow_ratio")]
public float high_humidity_outdoor_air_flow_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("control_high_indoor_humidity_based_on_outdoor_humidity_ratio")]
public ControlhighindoorhumiditybasedonoutdoorhumidityratioType control_high_indoor_humidity_based_on_outdoor_humidity_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (ControlhighindoorhumiditybasedonoutdoorhumidityratioType)Yes;
        
        public enum ExhaustairtemperaturelimitType
        {
        }
        
        public enum ExhaustairenthalpylimitType
        {
        }
        
        [Description("Select Yes to modify air flow rates based on a zone humidistat. Select No to disa" +
            "ble this feature.")]
        public enum HighhumiditycontrolflagType
        {
        }
        
        [Description(@"If NO is selected, the air flow rate is modified any time indoor relative humidity is above humidistat setpoint. If YES is selected, outdoor air flow rate is modified any time indoor relative humidity is above the humidistat setpoint AND the outdoor humidity ratio is less than the indoor humidity ratio.")]
        public enum ControlhighindoorhumiditybasedonoutdoorhumidityratioType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:UnitVentilator")]
    [Description("Unit ventilator. Forced-convection ventilation unit with supply fan (constant-vol" +
        "ume or variable-volume), optional chilled water cooling coil, optional heating c" +
        "oil (gas, electric, hot water, or steam) and controllable outdoor air mixer.")]
    public class ZoneHVAC_UnitVentilator
    {
        
        private void FixedAmount;
        
        private void FixedTemperature;
        
        private void VariablePercent;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void Cooling;
        
        private void Heating;
        
        private void HeatingAndCooling;
        
        private void None;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void CoilSystem:Cooling:Water:HeatExchangerAssisted;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_flow_rate")]
public string maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_control_type")]
public OutdooraircontroltypeType outdoor_air_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_fraction_or_temperature_schedule_name")]
public string maximum_outdoor_air_fraction_or_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_node_name")]
public string exhaust_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mixed_air_node_name")]
public string mixed_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_option")]
public CoiloptionType coil_option
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_convergence_tolerance")]
public float cooling_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OutdooraircontroltypeType
        {
        }
        
        [Description("Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume, and Fa" +
            "n:SystemModel")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum CoiloptionType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:UnitHeater")]
    [Description("Unit heater. Forced-convection heating-only unit with supply fan, heating coil (g" +
        "as, electric, hot water, or steam) and fixed-position outdoor air mixer.")]
    public class ZoneHVAC_UnitHeater
    {
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void No;
        
        private void Yes;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_inlet_node_name")]
public string air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("air_outlet_node_name")]
public string air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_flow_rate")]
public string maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operation_during_no_heating")]
public SupplyairfanoperationduringnoheatingType supply_air_fan_operation_during_no_heating
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_hot_water_or_steam_flow_rate")]
public string maximum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_hot_water_or_steam_flow_rate")]
public float minimum_hot_water_or_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_convergence_tolerance")]
public float heating_convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description("Allowable fan types are Fan:ConstantVolume, Fan:OnOff, Fan:VariableVolume and Fan" +
            ":SystemModel")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description(@"This choice field allows the user to define how the unit heater will operate under ""no heating load"" or cooling conditions. If the ""No"" is selected, then the fan will not run unless there is a heating load. If the fan does not run, this effectively shuts the unit heater system off when there is no heating load. If the ""Yes"" is selected, the unit heater is available and has a ConstantVolume fan, or has an OnOff fan with ""Supply Air Fan Operating Mode Schedule"" value greater than zero, then the fan will always run regardless of the zone load.")]
        public enum SupplyairfanoperationduringnoheatingType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:EvaporativeCoolerUnit")]
    [Description("Zone evaporative cooler. Forced-convection cooling-only unit with supply fan, 100" +
        "% outdoor air supply. Optional relief exhaust node")]
    public class ZoneHVAC_EvaporativeCoolerUnit
    {
        
        private void Fan:ComponentModel;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void ZoneCoolingLoadOnOffCycling;
        
        private void ZoneCoolingLoadVariableSpeedFan;
        
        private void ZoneTemperatureDeadbandOnOffCycling;
        
        private void EvaporativeCooler:Direct:CelDekPad;
        
        private void EvaporativeCooler:Direct:ResearchSpecial;
        
        private void EvaporativeCooler:Indirect:CelDekPad;
        
        private void EvaporativeCooler:Indirect:ResearchSpecial;
        
        private void EvaporativeCooler:Indirect:WetCoil;
        
        private void EvaporativeCooler:Direct:CelDekPad;
        
        private void EvaporativeCooler:Direct:ResearchSpecial;
        
        private void EvaporativeCooler:Indirect:CelDekPad;
        
        private void EvaporativeCooler:Indirect:ResearchSpecial;
        
        private void EvaporativeCooler:Indirect:WetCoil;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_inlet_node_name")]
public string outdoor_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooler_outlet_node_name")]
public string cooler_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_relief_air_node_name")]
public string zone_relief_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_name")]
public string supply_air_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_supply_air_flow_rate")]
public string design_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_placement")]
public FanplacementType fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooler_unit_control_method")]
public CoolerunitcontrolmethodType cooler_unit_control_method
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("throttling_range_temperature_difference")]
public float throttling_range_temperature_difference
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("cooling_load_control_threshold_heat_transfer_rate")]
public float cooling_load_control_threshold_heat_transfer_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)100;

[JsonProperty("first_evaporative_cooler_object_type")]
public FirstevaporativecoolerobjecttypeType first_evaporative_cooler_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("first_evaporative_cooler_object_name")]
public string first_evaporative_cooler_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("second_evaporative_cooler_object_type")]
public SecondevaporativecoolerobjecttypeType second_evaporative_cooler_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("second_evaporative_cooler_name")]
public string second_evaporative_cooler_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SupplyairfanobjecttypeType
        {
        }
        
        public enum FanplacementType
        {
        }
        
        public enum CoolerunitcontrolmethodType
        {
        }
        
        public enum FirstevaporativecoolerobjecttypeType
        {
        }
        
        [Description("optional, used for direct/indirect configurations second cooler must be immediate" +
            "ly downstream of first cooler, if present")]
        public enum SecondevaporativecoolerobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:HybridUnitaryHVAC")]
    [Description(@"Hybrid Unitary HVAC. A black box model for multi-mode packaged forced air equipment. Independent variables include outdoor air conditions and indoor air conditions. Controlled inputs include operating mode, supply air flow rate, and outdoor air faction. Emperical lookup tables are required to map supply air temperature supply air humidity, electricity use, fuel uses, water use, fan electricity use, and external static pressure as a function of each indpednent varaible and each controlled input. In each timestep the model will choose one or more combinations of settings for mode, supply air flow rate, outdoor air faction, and part runtime fraction so as to satisfy zone requests for sensible cooling, heating, ventilation, and/or dehumidification with the least resource consumption. Equipment in this class may consume electricity, water, and up to two additional fuel types.")]
    public class ZoneHVAC_HybridUnitaryHVAC
    {
        
        private void Automatic;
        
        private void User Defined;
        
        private void No;
        
        private void Yes;
        
        private void MixedAirStream;
        
        private void SupplyAirStream;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void None;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void None;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Coal;
        
        private void Diesel;
        
        private void DistrictCooling;
        
        private void DistrictHeating;
        
        private void Electricity;
        
        private void FuelOilNo1;
        
        private void FuelOilNo2;
        
        private void Gasoline;
        
        private void NaturalGas;
        
        private void None;
        
        private void OtherFuel1;
        
        private void OtherFuel2;
        
        private void Propane;
        
        private void Steam;
        
        private void Electricity Use;
        
        private void Second Fuel Use;
        
        private void Third Fuel Use;
        
        private void Water Use;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_supply_air_temperature_schedule_name")]
public string minimum_supply_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_schedule_name")]
public string maximum_supply_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_supply_air_humidity_ratio_schedule_name")]
public string minimum_supply_air_humidity_ratio_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_humidity_ratio_schedule_name")]
public string maximum_supply_air_humidity_ratio_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("method_to_choose_controlled_inputs_and_part_runtime_fraction")]
public MethodtochoosecontrolledinputsandpartruntimefractionType method_to_choose_controlled_inputs_and_part_runtime_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (MethodtochoosecontrolledinputsandpartruntimefractionType)Automatic;

[JsonProperty("return_air_node_name")]
public string return_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_node_name")]
public string supply_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relief_node_name")]
public string relief_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_maximum_supply_air_flow_rate")]
public float system_maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("external_static_pressure_at_system_maximum_supply_air_flow_rate")]
public float external_static_pressure_at_system_maximum_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_heat_included_in_lookup_tables")]
public FanheatincludedinlookuptablesType fan_heat_included_in_lookup_tables
{
    get
    {
    }
    set
    {
    }
}
 = (FanheatincludedinlookuptablesType)No;

[JsonProperty("fan_heat_gain_location")]
public FanheatgainlocationType fan_heat_gain_location
{
    get
    {
    }
    set
    {
    }
}
 = (FanheatgainlocationType)SupplyAirStream;

[JsonProperty("fan_heat_in_air_stream_fraction")]
public float fan_heat_in_air_stream_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("scaling_factor")]
public float scaling_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("minimum_time_between_mode_change")]
public float minimum_time_between_mode_change
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)10;

[JsonProperty("first_fuel_type")]
public FirstfueltypeType first_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (FirstfueltypeType)Electricity;

[JsonProperty("second_fuel_type")]
public SecondfueltypeType second_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (SecondfueltypeType)None;

[JsonProperty("third_fuel_type")]
public ThirdfueltypeType third_fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = (ThirdfueltypeType)None;

[JsonProperty("objective_function_to_minimize")]
public ObjectivefunctiontominimizeType objective_function_to_minimize
{
    get
    {
    }
    set
    {
    }
}
 = (ObjectivefunctiontominimizeType)Electricity Use;

[JsonProperty("design_specification_outdoor_air_object_name")]
public string design_specification_outdoor_air_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_name")]
public string mode_0_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_supply_air_temperature_lookup_table_name")]
public string mode_0_supply_air_temperature_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_supply_air_humidity_ratio_lookup_table_name")]
public string mode_0_supply_air_humidity_ratio_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_system_electric_power_lookup_table_name")]
public string mode_0_system_electric_power_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_supply_fan_electric_power_lookup_table_name")]
public string mode_0_supply_fan_electric_power_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_external_static_pressure_lookup_table_name")]
public string mode_0_external_static_pressure_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_system_second_fuel_consumption_lookup_table_name")]
public string mode_0_system_second_fuel_consumption_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_system_third_fuel_consumption_lookup_table_name")]
public string mode_0_system_third_fuel_consumption_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_system_water_use_lookup_table_name")]
public string mode_0_system_water_use_lookup_table_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("mode_0_outdoor_air_fraction")]
public float mode_0_outdoor_air_fraction
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("mode_0_supply_air_mass_flow_rate_ratio")]
public float mode_0_supply_air_mass_flow_rate_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("modes")]
public string modes
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Select the method that will be used to choose operating mode(s), supply air flow rate(s), outdoor air fraction(s) and part runtime fraction(s) in each time step. ""Automatic"" = chooses controlled inputs and part runtime fraction(s) to minimize resource use within each time step while best satisfying requested sensible cooling, dehumidification and ventilation, and subject to constraints. ""User Defined"" = EMS will be used to choose controlled inputs and part runtime fraction(s) in each time step. If this field is blank, default to ""Automatic"".")]
        public enum MethodtochoosecontrolledinputsandpartruntimefractionType
        {
        }
        
        [Description("This field specifies if the fan heat is accounted for in the lookup tables.")]
        public enum FanheatincludedinlookuptablesType
        {
        }
        
        [Description("This field specifies where to add the fan heat in the air stream.")]
        public enum FanheatgainlocationType
        {
        }
        
        [Description("Select the fuel type associated with field: \"System Electric Power Lookup Table\" " +
            "in each mode. If this field is blank, default first fuel type = Electricity.")]
        public enum FirstfueltypeType
        {
        }
        
        [Description("Select the fuel type associated with field: \"System Second Fuel Consumption Looku" +
            "p Table\" in each mode. If this field is blank, default second fuel type = None.")]
        public enum SecondfueltypeType
        {
        }
        
        [Description("Select the fuel type associated with field: \"System Third Fuel Consumption Lookup" +
            " Table\" in each mode. If this field is blank, default third fuel type = None.")]
        public enum ThirdfueltypeType
        {
        }
        
        [Description("In each time step, controlled variables will be chosen to minimize the selection " +
            "in this field, subject to constraints. If this field is blank, the objective fun" +
            "ction will minimize electricity use.")]
        public enum ObjectivefunctiontominimizeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:OutdoorAirUnit")]
    [Description("The zone outdoor air unit models a single-zone dedicated outdoor air system (DOAS" +
        "). Forced-convection 100% outdoor air unit with supply fan and optional equipmen" +
        "t including exhaust fan, heating coil, cooling coil, and heat recovery.")]
    public class ZoneHVAC_OutdoorAirUnit
    {
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void NeutralControl;
        
        private void TemperatureControl;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_flow_rate")]
public string outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_schedule_name")]
public string outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_name")]
public string supply_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fan_placement")]
public SupplyfanplacementType supply_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyfanplacementType)DrawThrough;

[JsonProperty("exhaust_fan_name")]
public string exhaust_fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_flow_rate")]
public string exhaust_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("exhaust_air_schedule_name")]
public string exhaust_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("unit_control_type")]
public UnitcontroltypeType unit_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (UnitcontroltypeType)NeutralControl;

[JsonProperty("high_air_control_temperature_schedule_name")]
public string high_air_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("low_air_control_temperature_schedule_name")]
public string low_air_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airoutlet_node_name")]
public string airoutlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("airinlet_node_name")]
public string airinlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_fanoutlet_node_name")]
public string supply_fanoutlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_unit_list_name")]
public string outdoor_air_unit_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum SupplyfanplacementType
        {
        }
        
        public enum UnitcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:OutdoorAirUnit:EquipmentList")]
    [Description("Equipment list for components in a ZoneHVAC:OutdoorAirUnit. Components are simula" +
        "ted sequentially in the order given in the equipment list.")]
    public class ZoneHVAC_OutdoorAirUnit_EquipmentList
    {
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        
        private void AirLoopHVAC:UnitarySystem;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void CoilSystem:Cooling:DX;
        
        private void CoilSystem:Cooling:Water:HeatexchangerAssisted;
        
        private void CoilSystem:Heating:DX;
        
        private void Dehumidifier:Desiccant:NoFans;
        
        private void HeatExchanger:AirToAir:FlatPlate;
        
        private void HeatExchanger:AirToAir:SensibleAndLatent;
        

[JsonProperty("component_1_object_type")]
public ComponentobjecttypeType component_1_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_1_name")]
public string component_1_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_object_type")]
public ComponentobjecttypeType component_2_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_2_name")]
public string component_2_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_object_type")]
public ComponentobjecttypeType component_3_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_3_name")]
public string component_3_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_object_type")]
public ComponentobjecttypeType component_4_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_4_name")]
public string component_4_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_object_type")]
public ComponentobjecttypeType component_5_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_5_name")]
public string component_5_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_object_type")]
public ComponentobjecttypeType component_6_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_6_name")]
public string component_6_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_object_type")]
public ComponentobjecttypeType component_7_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_7_name")]
public string component_7_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_object_type")]
public ComponentobjecttypeType component_8_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("component_8_name")]
public string component_8_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
        
        public enum ComponentobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:TerminalUnit:VariableRefrigerantFlow")]
    [Description(@"A terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils (air-to-air heat pump). The VRF terminal units are served by an AirConditioner:VariableRefrigerantFlow or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:* system. Terminal units can be configured as zone, air loop or outside air system equipment.")]
    public class ZoneHVAC_TerminalUnit_VariableRefrigerantFlow
    {
        
        private void BlowThrough;
        
        private void DrawThrough;
        
        private void Fan:ConstantVolume;
        
        private void Fan:OnOff;
        
        private void Fan:SystemModel;
        
        private void Fan:VariableVolume;
        
        private void OutdoorAir:Mixer;
        
        private void Coil:Cooling:DX:VariableRefrigerantFlow;
        
        private void Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl;
        
        private void Coil:Heating:DX:VariableRefrigerantFlow;
        
        private void Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        

[JsonProperty("terminal_unit_availability_schedule")]
public string terminal_unit_availability_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("terminal_unit_air_inlet_node_name")]
public string terminal_unit_air_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("terminal_unit_air_outlet_node_name")]
public string terminal_unit_air_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_supply_air_flow_rate")]
public string cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_cooling_supply_air_flow_rate")]
public string no_cooling_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_supply_air_flow_rate")]
public string heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_heating_supply_air_flow_rate")]
public string no_heating_supply_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_outdoor_air_flow_rate")]
public string cooling_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_outdoor_air_flow_rate")]
public string heating_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("no_load_outdoor_air_flow_rate")]
public string no_load_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_operating_mode_schedule_name")]
public string supply_air_fan_operating_mode_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supply_air_fan_placement")]
public SupplyairfanplacementType supply_air_fan_placement
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyairfanplacementType)BlowThrough;

[JsonProperty("supply_air_fan_object_type")]
public SupplyairfanobjecttypeType supply_air_fan_object_type
{
    get
    {
    }
    set
    {
    }
}
 = (SupplyairfanobjecttypeType)Fan:ConstantVolume;

[JsonProperty("supply_air_fan_object_name")]
public string supply_air_fan_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_air_mixer_object_type")]
public OutsideairmixerobjecttypeType outside_air_mixer_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outside_air_mixer_object_name")]
public string outside_air_mixer_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_name")]
public string cooling_coil_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_name")]
public string heating_coil_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_terminal_unit_on_parasitic_electric_energy_use")]
public float zone_terminal_unit_on_parasitic_electric_energy_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("zone_terminal_unit_off_parasitic_electric_energy_use")]
public float zone_terminal_unit_off_parasitic_electric_energy_use
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("rated_heating_capacity_sizing_ratio")]
public float rated_heating_capacity_sizing_ratio
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_object_type")]
public SupplementalheatingcoilobjecttypeType supplemental_heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("supplemental_heating_coil_name")]
public string supplemental_heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_supply_air_temperature_from_supplemental_heater")]
public string maximum_supply_air_temperature_from_supplemental_heater
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation")]
public float maximum_outdoor_dry_bulb_temperature_for_supplemental_heater_operation
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)21;

[JsonProperty("controlling_zone_or_thermostat_location")]
public string controlling_zone_or_thermostat_location
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Select fan placement as either blow through or draw through. Required for zone equipment. This field is ignored if the VRF terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. This field is also ignored if VRF terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
        public enum SupplyairfanplacementType
        {
        }
        
        [Description(@"Supply Air Fan Object Type must be Fan:SystemModel, Fan:OnOff, or Fan:ConstantVolume if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Supply Air Fan Object Type must be Fan:SystemModel or Fan:VariableVolume if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit Required for zone equipment. Leave blank if terminal unit is used in AirLoopHVAC:OutdoorAirSystem:EquipmentList. Also leave blank if terminal unit is used on main AirloopHVAC branch and terminal unit has no fan.")]
        public enum SupplyairfanobjecttypeType
        {
        }
        
        [Description(@"Currently only one type OutdoorAir:Mixer object is available. If this field is blank, and outside air mixer is not used. This field should be left blank if the VRF terminal unit is connected to central dedicated outdoor air through an AirTerminal:SingleDuct:Mixer object. This field may also be left blank when the VRF terminal is used in the air loop or outdoor air system.")]
        public enum OutsideairmixerobjecttypeType
        {
        }
        
        [Description(@"Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Cooling Coil Type must be Coil:Cooling:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if heating-only mode is used")]
        public enum CoolingcoilobjecttypeType
        {
        }
        
        [Description(@"Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow if AirConditioner:VariableRefrigerantFlow is used to model VRF outdoor unit Heating Coil Type must be Coil:Heating:DX:VariableRefrigerantFlow:FluidTemperatureControl if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl or if AirConditioner:VariableRefrigerantFlow:FluidTemperatureControl:HR is used to model VRF outdoor unit This field may be left blank if cooling-only mode is used")]
        public enum HeatingcoilobjecttypeType
        {
        }
        
        [Description("works with gas, electric, hot water and steam heating coil.")]
        public enum SupplementalheatingcoilobjecttypeType
        {
        }
    }
}
namespace EnergyPlus.ZoneHVACRadiativeConvectiveUnits
{
    using System.ComponentModel;
    using Newtonsoft.Json;
    using EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using EnergyPlus.AirDistribution;
    using EnergyPlus.AirflowNetwork;
    using EnergyPlus.Coils;
    using EnergyPlus.ComplianceObjects;
    using EnergyPlus.CondenserEquipmentandHeatExchangers;
    using EnergyPlus.Controllers;
    using EnergyPlus.Daylighting;
    using EnergyPlus.DemandLimitingControls;
    using EnergyPlus.DetailedGroundHeatTransfer;
    using EnergyPlus.Economics;
    using EnergyPlus.ElectricLoadCenterGeneratorSpecifications;
    using EnergyPlus.EnergyManagementSystemEMS;
    using EnergyPlus.EvaporativeCoolers;
    using EnergyPlus.ExteriorEquipment;
    using EnergyPlus.ExternalInterface;
    using EnergyPlus.Fans;
    using EnergyPlus.FluidProperties;
    using EnergyPlus.GeneralDataEntry;
    using EnergyPlus.HeatRecovery;
    using EnergyPlus.HumidifiersandDehumidifiers;
    using EnergyPlus.HVACDesignObjects;
    using EnergyPlus.HVACTemplates;
    using EnergyPlus.HybridModel;
    using EnergyPlus.InternalGains;
    using EnergyPlus.LocationandClimate;
    using EnergyPlus.NodeBranchManagement;
    using EnergyPlus.NonZoneEquipment;
    using EnergyPlus.OperationalFaults;
    using EnergyPlus.OutputReporting;
    using EnergyPlus.Parametrics;
    using EnergyPlus.PerformanceCurves;
    using EnergyPlus.PerformanceTables;
    using EnergyPlus.PlantHeatingandCoolingEquipment;
    using EnergyPlus.PlantCondenserControl;
    using EnergyPlus.PlantCondenserFlowControl;
    using EnergyPlus.PlantCondenserLoops;
    using EnergyPlus.Pumps;
    using EnergyPlus.PythonPluginSystem;
    using EnergyPlus.Refrigeration;
    using EnergyPlus.RoomAirModels;
    using EnergyPlus.Schedules;
    using EnergyPlus.SetpointManagers;
    using EnergyPlus.SimulationParameters;
    using EnergyPlus.SolarCollectors;
    using EnergyPlus.SurfaceConstructionElements;
    using EnergyPlus.SystemAvailabilityManagers;
    using EnergyPlus.ThermalZonesandSurfaces;
    using EnergyPlus.UnitaryEquipment;
    using EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using EnergyPlus.VariableRefrigerantFlowEquipment;
    using EnergyPlus.WaterHeatersandThermalStorage;
    using EnergyPlus.WaterSystems;
    using EnergyPlus.ZoneAirflow;
    using EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using EnergyPlus.ZoneHVACControlsandThermostats;
    using EnergyPlus.ZoneHVACEquipmentConnections;
    using EnergyPlus.ZoneHVACForcedAirUnits;
    
    
    [JsonProperty("ZoneHVAC:Baseboard:RadiantConvective:Water:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water_Design
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public float fraction_of_radiant_energy_incident_on_people
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:RadiantConvective:Water")]
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Water
    {
        

[JsonProperty("design_object")]
public string design_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_average_water_temperature")]
public float rated_average_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)87.78;

[JsonProperty("rated_water_mass_flow_rate")]
public float rated_water_mass_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.063;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_water_flow_rate")]
public string maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:RadiantConvective:Steam:Design")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam_Design
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public float fraction_of_radiant_energy_incident_on_people
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity is selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea is selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:RadiantConvective:Steam")]
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list.")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Steam
    {
        

[JsonProperty("design_object")]
public string design_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("degree_of_subcooling")]
public float degree_of_subcooling
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("maximum_steam_flow_rate")]
public string maximum_steam_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:RadiantConvective:Electric")]
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    public class ZoneHVAC_Baseboard_RadiantConvective_Electric
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("efficiency")]
public float efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public float fraction_of_radiant_energy_incident_on_people
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:CoolingPanel:RadiantConvective:Water")]
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    public class ZoneHVAC_CoolingPanel_RadiantConvective_Water
    {
        
        private void CapacityPerFloorArea;
        
        private void CoolingDesignCapacity;
        
        private void FractionOfAutosizedCoolingCapacity;
        
        private void None;
        
        private void MeanAirTemperature;
        
        private void MeanRadiantTemperature;
        
        private void OperativeTemperature;
        
        private void OutdoorDryBulbTemperature;
        
        private void OutdoorWetBulbTemperature;
        
        private void ZoneConvectiveLoad;
        
        private void ZoneTotalLoad;
        
        private void Off;
        
        private void SimpleOff;
        
        private void VariableOff;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_inlet_node_name")]
public string water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("water_outlet_node_name")]
public string water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_inlet_water_temperature")]
public float rated_inlet_water_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)5;

[JsonProperty("rated_inlet_space_temperature")]
public float rated_inlet_space_temperature
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)24;

[JsonProperty("rated_water_mass_flow_rate")]
public float rated_water_mass_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.063;

[JsonProperty("cooling_design_capacity_method")]
public CoolingdesigncapacitymethodType cooling_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingdesigncapacitymethodType)CoolingDesignCapacity;

[JsonProperty("cooling_design_capacity")]
public string cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_capacity_per_floor_area")]
public float cooling_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public float fraction_of_autosized_cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_chilled_water_flow_rate")]
public string maximum_chilled_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("control_type")]
public ControltypeType control_type
{
    get
    {
    }
    set
    {
    }
}
 = (ControltypeType)MeanAirTemperature;

[JsonProperty("cooling_control_throttling_range")]
public float cooling_control_throttling_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("cooling_control_temperature_schedule_name")]
public string cooling_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensation_control_type")]
public CondensationcontroltypeType condensation_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensationcontroltypeType)SimpleOff;

[JsonProperty("condensation_control_dewpoint_offset")]
public float condensation_control_dewpoint_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fraction_radiant")]
public float fraction_radiant
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public float fraction_of_radiant_energy_incident_on_people
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
        public enum CoolingdesigncapacitymethodType
        {
        }
        
        [Description("Temperature on which unit is controlled")]
        public enum ControltypeType
        {
        }
        
        public enum CondensationcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:Convective:Water")]
    [Description("Hot water baseboard heater, convection-only. Natural convection hydronic heating " +
        "unit.")]
    public class ZoneHVAC_Baseboard_Convective_Water
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("inlet_node_name")]
public string inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outlet_node_name")]
public string outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("u_factor_times_area_value")]
public string u_factor_times_area_value
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_water_flow_rate")]
public string maximum_water_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("convergence_tolerance")]
public float convergence_tolerance
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.001;
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:Baseboard:Convective:Electric")]
    [Description("Electric baseboard heater, convection-only. Natural convection electric heating u" +
        "nit.")]
    public class ZoneHVAC_Baseboard_Convective_Electric
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("efficiency")]
public float efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:VariableFlow")]
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water flow to the unit.")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow
    {
        
        private void CalculateFromCircuitLength;
        
        private void OnePerSurface;
        

[JsonProperty("design_object")]
public string design_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string surface_name_or_radiant_surface_group_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_length")]
public string hydronic_tubing_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("maximum_hot_water_flow")]
public string maximum_hot_water_flow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_water_inlet_node_name")]
public string heating_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_water_outlet_node_name")]
public string heating_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_capacity")]
public string cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_cold_water_flow")]
public string maximum_cold_water_flow
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_inlet_node_name")]
public string cooling_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_outlet_node_name")]
public string cooling_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_circuits")]
public NumberofcircuitsType number_of_circuits
{
    get
    {
    }
    set
    {
    }
}
 = (NumberofcircuitsType)OnePerSurface;

[JsonProperty("circuit_length")]
public float circuit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)106.7;
        
        public enum NumberofcircuitsType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:VariableFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_VariableFlow_Design
    {
        
        private void ConvectionOnly;
        
        private void ISOStandard;
        
        private void MeanAirTemperature;
        
        private void MeanRadiantTemperature;
        
        private void OperativeTemperature;
        
        private void OutdoorDryBulbTemperature;
        
        private void OutdoorWetBulbTemperature;
        
        private void SurfaceFaceTemperature;
        
        private void SurfaceInteriorTemperature;
        
        private void HalfFlowPower;
        
        private void ZeroFlowPower;
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        
        private void CapacityPerFloorArea;
        
        private void CoolingDesignCapacity;
        
        private void FractionOfAutosizedCoolingCapacity;
        
        private void None;
        
        private void Off;
        
        private void SimpleOff;
        
        private void VariableOff;
        

[JsonProperty("fluid_to_radiant_surface_heat_transfer_model")]
public FluidtoradiantsurfaceheattransfermodelType fluid_to_radiant_surface_heat_transfer_model
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtoradiantsurfaceheattransfermodelType)ConvectionOnly;

[JsonProperty("hydronic_tubing_inside_diameter")]
public float hydronic_tubing_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.013;

[JsonProperty("hydronic_tubing_outside_diameter")]
public float hydronic_tubing_outside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.016;

[JsonProperty("hydronic_tubing_conductivity")]
public float hydronic_tubing_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("temperature_control_type")]
public TemperaturecontroltypeType temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecontroltypeType)MeanAirTemperature;

[JsonProperty("setpoint_control_type")]
public SetpointcontroltypeType setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (SetpointcontroltypeType)HalfFlowPower;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("heating_control_throttling_range")]
public float heating_control_throttling_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("heating_control_temperature_schedule_name")]
public string heating_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_design_capacity_method")]
public CoolingdesigncapacitymethodType cooling_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (CoolingdesigncapacitymethodType)CoolingDesignCapacity;

[JsonProperty("cooling_design_capacity_per_floor_area")]
public float cooling_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_cooling_design_capacity")]
public float fraction_of_autosized_cooling_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_control_throttling_range")]
public float cooling_control_throttling_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.5;

[JsonProperty("cooling_control_temperature_schedule_name")]
public string cooling_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("condensation_control_type")]
public CondensationcontroltypeType condensation_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensationcontroltypeType)SimpleOff;

[JsonProperty("condensation_control_dewpoint_offset")]
public float condensation_control_dewpoint_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("changeover_delay_time_period_schedule")]
public string changeover_delay_time_period_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
        public enum FluidtoradiantsurfaceheattransfermodelType
        {
        }
        
        [Description("(Temperature on which unit is controlled)")]
        public enum TemperaturecontroltypeType
        {
        }
        
        [Description("How setpoint temperature is defined")]
        public enum SetpointcontroltypeType
        {
        }
        
        [Description(@"Enter the method used to determine the heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
        
        [Description(@"Enter the method used to determine the cooling design capacity for scalable sizing. CoolingDesignCapacity => selected when the design cooling capacity value is specified or auto-sized. CapacityPerFloorArea => selected when the design cooling capacity is determined from user specified cooling capacity per floor area and total floor area of cooled zone served by the hydrolic unit. FractionOfAutosizedCoolingCapacity => is selected when the design cooling capacity is determined from a user specified fraction and the auto-sized design cooling capacity of the system.")]
        public enum CoolingdesigncapacitymethodType
        {
        }
        
        public enum CondensationcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:ConstantFlow")]
    [Description("Low temperature hydronic radiant heating and/or cooling system embedded in a buil" +
        "ding surface (wall, ceiling, or floor). Controlled by varying the hot or chilled" +
        " water temperature circulating through the unit.")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow
    {
        
        private void CalculateFromCircuitLength;
        
        private void OnePerSurface;
        

[JsonProperty("design_object")]
public string design_object
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string surface_name_or_radiant_surface_group_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hydronic_tubing_length")]
public string hydronic_tubing_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("rated_flow_rate")]
public string rated_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("pump_flow_rate_schedule_name")]
public string pump_flow_rate_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("rated_pump_head")]
public float rated_pump_head
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)179352;

[JsonProperty("rated_power_consumption")]
public float rated_power_consumption
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_water_inlet_node_name")]
public string heating_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_water_outlet_node_name")]
public string heating_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_high_water_temperature_schedule_name")]
public string heating_high_water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_low_water_temperature_schedule_name")]
public string heating_low_water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_high_control_temperature_schedule_name")]
public string heating_high_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_low_control_temperature_schedule_name")]
public string heating_low_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_inlet_node_name")]
public string cooling_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_water_outlet_node_name")]
public string cooling_water_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_high_water_temperature_schedule_name")]
public string cooling_high_water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_low_water_temperature_schedule_name")]
public string cooling_low_water_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_high_control_temperature_schedule_name")]
public string cooling_high_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_low_control_temperature_schedule_name")]
public string cooling_low_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_circuits")]
public NumberofcircuitsType number_of_circuits
{
    get
    {
    }
    set
    {
    }
}
 = (NumberofcircuitsType)OnePerSurface;

[JsonProperty("circuit_length")]
public float circuit_length
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)106.7;
        
        public enum NumberofcircuitsType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:ConstantFlow:Design")]
    public class ZoneHVAC_LowTemperatureRadiant_ConstantFlow_Design
    {
        
        private void ConvectionOnly;
        
        private void ISOStandard;
        
        private void MeanAirTemperature;
        
        private void MeanRadiantTemperature;
        
        private void OperativeTemperature;
        
        private void OutdoorDryBulbTemperature;
        
        private void OutdoorWetBulbTemperature;
        
        private void RunningMeanOutdoorDryBulbTemperature;
        
        private void SurfaceFaceTemperature;
        
        private void SurfaceInteriorTemperature;
        
        private void Off;
        
        private void SimpleOff;
        
        private void VariableOff;
        

[JsonProperty("fluid_to_radiant_surface_heat_transfer_model")]
public FluidtoradiantsurfaceheattransfermodelType fluid_to_radiant_surface_heat_transfer_model
{
    get
    {
    }
    set
    {
    }
}
 = (FluidtoradiantsurfaceheattransfermodelType)ConvectionOnly;

[JsonProperty("hydronic_tubing_inside_diameter")]
public float hydronic_tubing_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.013;

[JsonProperty("hydronic_tubing_outside_diameter")]
public float hydronic_tubing_outside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.016;

[JsonProperty("hydronic_tubing_conductivity")]
public float hydronic_tubing_conductivity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.35;

[JsonProperty("temperature_control_type")]
public TemperaturecontroltypeType temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecontroltypeType)MeanAirTemperature;

[JsonProperty("running_mean_outdoor_dry_bulb_temperature_weighting_factor")]
public float running_mean_outdoor_dry_bulb_temperature_weighting_factor
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.8;

[JsonProperty("motor_efficiency")]
public float motor_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_motor_inefficiencies_to_fluid_stream")]
public float fraction_of_motor_inefficiencies_to_fluid_stream
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("condensation_control_type")]
public CondensationcontroltypeType condensation_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (CondensationcontroltypeType)SimpleOff;

[JsonProperty("condensation_control_dewpoint_offset")]
public float condensation_control_dewpoint_offset
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("changeover_delay_time_period_schedule")]
public string changeover_delay_time_period_schedule
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"This parameter identifies how the heat transfer between fluid being circulated through the radiant system and the radiant system (slab) is modeled. ConvectionOnly means that only convection between the fluid and the inside surface of the pipe is modeled using a conventional equation for flow inside a pipe. ISOStandard models convection between the fluid and the inside of of the pipe and conduction through the pipe material using equations specific to ISO Standard 11855-2.")]
        public enum FluidtoradiantsurfaceheattransfermodelType
        {
        }
        
        [Description("Temperature used to control system")]
        public enum TemperaturecontroltypeType
        {
        }
        
        public enum CondensationcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:Electric")]
    [Description("Electric resistance low temperature radiant system")]
    public class ZoneHVAC_LowTemperatureRadiant_Electric
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        
        private void MeanAirTemperature;
        
        private void MeanRadiantTemperature;
        
        private void OperativeTemperature;
        
        private void OutdoorDryBulbTemperature;
        
        private void OutdoorWetBulbTemperature;
        
        private void SurfaceFaceTemperature;
        
        private void SurfaceInteriorTemperature;
        
        private void HalfFlowPower;
        
        private void ZeroFlowPower;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string surface_name_or_radiant_surface_group_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("temperature_control_type")]
public TemperaturecontroltypeType temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecontroltypeType)MeanAirTemperature;

[JsonProperty("setpoint_control_type")]
public SetpointcontroltypeType setpoint_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (SetpointcontroltypeType)HalfFlowPower;

[JsonProperty("heating_throttling_range")]
public float heating_throttling_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string heating_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the maximum electrical heating design capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
        
        [Description("Temperature used to control unit")]
        public enum TemperaturecontroltypeType
        {
        }
        
        [Description("How setpoint temperature is defined")]
        public enum SetpointcontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:LowTemperatureRadiant:SurfaceGroup")]
    [Description("This is used to allow the coordinate control of several radiant system surfaces. " +
        "Note that the following flow fractions must sum up to 1.0 The number of surfaces" +
        " can be expanded beyond 100, if necessary, by adding more groups to the end of t" +
        "he list")]
    public class ZoneHVAC_LowTemperatureRadiant_SurfaceGroup
    {
        

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
    
    [JsonProperty("ZoneHVAC:HighTemperatureRadiant")]
    [Description("The number of surfaces can be expanded beyond 100, if necessary, by adding more g" +
        "roups to the end of the list")]
    public class ZoneHVAC_HighTemperatureRadiant
    {
        
        private void CapacityPerFloorArea;
        
        private void FractionOfAutosizedHeatingCapacity;
        
        private void HeatingDesignCapacity;
        
        private void Electricity;
        
        private void NaturalGas;
        
        private void MeanAirTemperature;
        
        private void MeanAirTemperatureSetpoint;
        
        private void MeanRadiantTemperature;
        
        private void MeanRadiantTemperatureSetpoint;
        
        private void OperativeTemperature;
        
        private void OperativeTemperatureSetpoint;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_design_capacity_method")]
public HeatingdesigncapacitymethodType heating_design_capacity_method
{
    get
    {
    }
    set
    {
    }
}
 = (HeatingdesigncapacitymethodType)HeatingDesignCapacity;

[JsonProperty("heating_design_capacity")]
public string heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.String)Autosize;

[JsonProperty("heating_design_capacity_per_floor_area")]
public float heating_design_capacity_per_floor_area
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_autosized_heating_design_capacity")]
public float fraction_of_autosized_heating_design_capacity
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)1;

[JsonProperty("fuel_type")]
public FueltypeType fuel_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("combustion_efficiency")]
public float combustion_efficiency
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.9;

[JsonProperty("fraction_of_input_converted_to_radiant_energy")]
public float fraction_of_input_converted_to_radiant_energy
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.7;

[JsonProperty("fraction_of_input_converted_to_latent_energy")]
public float fraction_of_input_converted_to_latent_energy
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("fraction_of_input_that_is_lost")]
public float fraction_of_input_that_is_lost
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0;

[JsonProperty("temperature_control_type")]
public TemperaturecontroltypeType temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecontroltypeType)OperativeTemperature;

[JsonProperty("heating_throttling_range")]
public float heating_throttling_range
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)2;

[JsonProperty("heating_setpoint_temperature_schedule_name")]
public string heating_setpoint_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fraction_of_radiant_energy_incident_on_people")]
public float fraction_of_radiant_energy_incident_on_people
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_fractions")]
public string surface_fractions
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        [Description(@"Enter the method used to determine the maximum heating power input capacity. HeatingDesignCapacity = > selected when the design heating capacity value or autosize is specified. CapacityPerFloorArea = > selected when the design heating capacity is determine from user specified heating capacity per floor area and zone floor area. FractionOfAutosizedHeatingCapacity = > is selected when the design heating capacity is determined from a user specified fraction and the auto-sized design heating capacity.")]
        public enum HeatingdesigncapacitymethodType
        {
        }
        
        [Description("Natural gas or electricity")]
        public enum FueltypeType
        {
        }
        
        [Description("Temperature type used to control unit")]
        public enum TemperaturecontroltypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:VentilatedSlab")]
    [Description("Ventilated slab system where outdoor air flows through hollow cores in a building" +
        " surface (wall, ceiling, or floor).")]
    public class ZoneHVAC_VentilatedSlab
    {
        
        private void FixedAmount;
        
        private void FixedTemperature;
        
        private void VariablePercent;
        
        private void SeriesSlabs;
        
        private void SlabAndZone;
        
        private void SlabOnly;
        
        private void MeanAirTemperature;
        
        private void MeanRadiantTemperature;
        
        private void OperativeTemperature;
        
        private void OutdoorDryBulbTemperature;
        
        private void OutdoorWetBulbTemperature;
        
        private void SurfaceTemperature;
        
        private void ZoneAirDewPointTemperature;
        
        private void Cooling;
        
        private void Heating;
        
        private void HeatingAndCooling;
        
        private void None;
        
        private void Coil:Heating:Electric;
        
        private void Coil:Heating:Fuel;
        
        private void Coil:Heating:Steam;
        
        private void Coil:Heating:Water;
        
        private void Coil:Cooling:Water;
        
        private void Coil:Cooling:Water:DetailedGeometry;
        
        private void CoilSystem:Cooling:Water:HeatExchangerAssisted;
        

[JsonProperty("availability_schedule_name")]
public string availability_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_name")]
public string zone_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("surface_name_or_radiant_surface_group_name")]
public string surface_name_or_radiant_surface_group_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_air_flow_rate")]
public string maximum_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_control_type")]
public OutdooraircontroltypeType outdoor_air_control_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_air_flow_rate")]
public string minimum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("minimum_outdoor_air_schedule_name")]
public string minimum_outdoor_air_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_flow_rate")]
public string maximum_outdoor_air_flow_rate
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("maximum_outdoor_air_fraction_or_temperature_schedule_name")]
public string maximum_outdoor_air_fraction_or_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("system_configuration_type")]
public SystemconfigurationtypeType system_configuration_type
{
    get
    {
    }
    set
    {
    }
}
 = (SystemconfigurationtypeType)SlabOnly;

[JsonProperty("hollow_core_inside_diameter")]
public float hollow_core_inside_diameter
{
    get
    {
    }
    set
    {
    }
}
 = (System.Single)0.05;

[JsonProperty("hollow_core_length")]
public float hollow_core_length
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("number_of_cores")]
public float number_of_cores
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("temperature_control_type")]
public TemperaturecontroltypeType temperature_control_type
{
    get
    {
    }
    set
    {
    }
}
 = (TemperaturecontroltypeType)OutdoorDryBulbTemperature;

[JsonProperty("heating_high_air_temperature_schedule_name")]
public string heating_high_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_low_air_temperature_schedule_name")]
public string heating_low_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_high_control_temperature_schedule_name")]
public string heating_high_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_low_control_temperature_schedule_name")]
public string heating_low_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_high_air_temperature_schedule_name")]
public string cooling_high_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_low_air_temperature_schedule_name")]
public string cooling_low_air_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_high_control_temperature_schedule_name")]
public string cooling_high_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_low_control_temperature_schedule_name")]
public string cooling_low_control_temperature_schedule_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("return_air_node_name")]
public string return_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("slab_in_node_name")]
public string slab_in_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("zone_supply_air_node_name")]
public string zone_supply_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_node_name")]
public string outdoor_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("relief_air_node_name")]
public string relief_air_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("outdoor_air_mixer_outlet_node_name")]
public string outdoor_air_mixer_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_outlet_node_name")]
public string fan_outlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("fan_name")]
public string fan_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("coil_option_type")]
public CoiloptiontypeType coil_option_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_object_type")]
public HeatingcoilobjecttypeType heating_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("heating_coil_name")]
public string heating_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("hot_water_or_steam_inlet_node_name")]
public string hot_water_or_steam_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_object_type")]
public CoolingcoilobjecttypeType cooling_coil_object_type
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cooling_coil_name")]
public string cooling_coil_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("cold_water_inlet_node_name")]
public string cold_water_inlet_node_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("availability_manager_list_name")]
public string availability_manager_list_name
{
    get
    {
    }
    set
    {
    }
}
 = null;

[JsonProperty("design_specification_zonehvac_sizing_object_name")]
public string design_specification_zonehvac_sizing_object_name
{
    get
    {
    }
    set
    {
    }
}
 = null;
        
        public enum OutdooraircontroltypeType
        {
        }
        
        public enum SystemconfigurationtypeType
        {
        }
        
        [Description("(temperature on which unit is controlled)")]
        public enum TemperaturecontroltypeType
        {
        }
        
        public enum CoiloptiontypeType
        {
        }
        
        public enum HeatingcoilobjecttypeType
        {
        }
        
        public enum CoolingcoilobjecttypeType
        {
        }
    }
    
    [JsonProperty("ZoneHVAC:VentilatedSlab:SlabGroup")]
    [Description("This is used to allow the coordinate control of several ventilated slab system su" +
        "rfaces. Note that the flow fractions must sum up to 1.0. The number of surfaces " +
        "can be expanded beyond 10, if necessary, by adding more groups to the end of the" +
        " list")]
    public class ZoneHVAC_VentilatedSlab_SlabGroup
    {
        

[JsonProperty("data")]
public string data
{
    get
    {
    }
    set
    {
    }
}
 = null;
    }
}
