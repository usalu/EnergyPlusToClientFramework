namespace BH.oM.Adapters.EnergyPlus.ElectricLoadCenterGeneratorSpecifications
{
    using System.ComponentModel;
    using BH.oM.Adapters.EnergyPlus;
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using BH.oM.Base;
    using BH.oM.Adapters.EnergyPlus.AdvancedConstructionSurfaceZoneConcepts;
    using BH.oM.Adapters.EnergyPlus.AirDistribution;
    using BH.oM.Adapters.EnergyPlus.AirflowNetwork;
    using BH.oM.Adapters.EnergyPlus.Coils;
    using BH.oM.Adapters.EnergyPlus.ComplianceObjects;
    using BH.oM.Adapters.EnergyPlus.CondenserEquipmentandHeatExchangers;
    using BH.oM.Adapters.EnergyPlus.Controllers;
    using BH.oM.Adapters.EnergyPlus.Daylighting;
    using BH.oM.Adapters.EnergyPlus.DemandLimitingControls;
    using BH.oM.Adapters.EnergyPlus.DetailedGroundHeatTransfer;
    using BH.oM.Adapters.EnergyPlus.Economics;
    using BH.oM.Adapters.EnergyPlus.EnergyManagementSystemEMS;
    using BH.oM.Adapters.EnergyPlus.EvaporativeCoolers;
    using BH.oM.Adapters.EnergyPlus.ExteriorEquipment;
    using BH.oM.Adapters.EnergyPlus.ExternalInterface;
    using BH.oM.Adapters.EnergyPlus.Fans;
    using BH.oM.Adapters.EnergyPlus.FluidProperties;
    using BH.oM.Adapters.EnergyPlus.GeneralDataEntry;
    using BH.oM.Adapters.EnergyPlus.HeatRecovery;
    using BH.oM.Adapters.EnergyPlus.HumidifiersandDehumidifiers;
    using BH.oM.Adapters.EnergyPlus.HVACDesignObjects;
    using BH.oM.Adapters.EnergyPlus.HVACTemplates;
    using BH.oM.Adapters.EnergyPlus.HybridModel;
    using BH.oM.Adapters.EnergyPlus.InternalGains;
    using BH.oM.Adapters.EnergyPlus.LocationandClimate;
    using BH.oM.Adapters.EnergyPlus.NodeBranchManagement;
    using BH.oM.Adapters.EnergyPlus.NonZoneEquipment;
    using BH.oM.Adapters.EnergyPlus.OperationalFaults;
    using BH.oM.Adapters.EnergyPlus.OutputReporting;
    using BH.oM.Adapters.EnergyPlus.Parametrics;
    using BH.oM.Adapters.EnergyPlus.PerformanceCurves;
    using BH.oM.Adapters.EnergyPlus.PerformanceTables;
    using BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserFlowControl;
    using BH.oM.Adapters.EnergyPlus.PlantCondenserLoops;
    using BH.oM.Adapters.EnergyPlus.Pumps;
    using BH.oM.Adapters.EnergyPlus.PythonPluginSystem;
    using BH.oM.Adapters.EnergyPlus.Refrigeration;
    using BH.oM.Adapters.EnergyPlus.RoomAirModels;
    using BH.oM.Adapters.EnergyPlus.Schedules;
    using BH.oM.Adapters.EnergyPlus.SetpointManagers;
    using BH.oM.Adapters.EnergyPlus.SimulationParameters;
    using BH.oM.Adapters.EnergyPlus.SolarCollectors;
    using BH.oM.Adapters.EnergyPlus.SurfaceConstructionElements;
    using BH.oM.Adapters.EnergyPlus.SystemAvailabilityManagers;
    using BH.oM.Adapters.EnergyPlus.ThermalZonesandSurfaces;
    using BH.oM.Adapters.EnergyPlus.UnitaryEquipment;
    using BH.oM.Adapters.EnergyPlus.UserDefinedHVACandPlantComponentModels;
    using BH.oM.Adapters.EnergyPlus.VariableRefrigerantFlowEquipment;
    using BH.oM.Adapters.EnergyPlus.WaterHeatersandThermalStorage;
    using BH.oM.Adapters.EnergyPlus.WaterSystems;
    using BH.oM.Adapters.EnergyPlus.ZoneAirflow;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACAirLoopTerminalUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACControlsandThermostats;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACEquipmentConnections;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACForcedAirUnits;
    using BH.oM.Adapters.EnergyPlus.ZoneHVACRadiativeConvectiveUnits;
    
    
    [Description("This generator model is the empirical model from the Building Loads and System Th" +
        "ermodynamics (BLAST) program. Engine performance curves are generated by fitting" +
        " catalog data to second order polynomial equations. Three sets of coefficients a" +
        "re required.")]
    public class Generator_InternalCombustionEngine : BHoMObject, IEnergyPlusClass
    {
        

[JsonProperty("rated_power_output")]
public System.Nullable<float> RatedPowerOutput { get; set; } = null;
        

[JsonProperty("electric_circuit_node_name")]
public string ElectricCircuitNodeName { get; set; } = "";
        

[JsonProperty("minimum_part_load_ratio")]
public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

[JsonProperty("maximum_part_load_ratio")]
public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

[JsonProperty("optimum_part_load_ratio")]
public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("shaft_power_curve_name")]
public string ShaftPowerCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("jacket_heat_recovery_curve_name")]
public string JacketHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("lube_heat_recovery_curve_name")]
public string LubeHeatRecoveryCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("total_exhaust_energy_curve_name")]
public string TotalExhaustEnergyCurveName { get; set; } = "";
        

[Description("curve = a + b*PLR + c*PLR**2 PLR = Ratio of Generator Load to Rated Power Output")]
[JsonProperty("exhaust_temperature_curve_name")]
public string ExhaustTemperatureCurveName { get; set; } = "";
        

[Description("curve = C1 * Generator Rated Power Output**C2")]
[JsonProperty("coefficient_1_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient1OfUFactorTimesAreaCurve { get; set; } = null;
        

[Description("curve = C1 * Generator Rated Power Output**C2 typical value .9")]
[JsonProperty("coefficient_2_of_u_factor_times_area_curve")]
public System.Nullable<float> Coefficient2OfUFactorTimesAreaCurve { get; set; } = null;
        

[JsonProperty("maximum_exhaust_flow_per_unit_of_power_output")]
public System.Nullable<float> MaximumExhaustFlowPerUnitOfPowerOutput { get; set; } = null;
        

[JsonProperty("design_minimum_exhaust_temperature")]
public System.Nullable<float> DesignMinimumExhaustTemperature { get; set; } = null;
        

[JsonProperty("fuel_higher_heating_value")]
public System.Nullable<float> FuelHigherHeatingValue { get; set; } = null;
        

[Description("if non-zero, then inlet, outlet nodes must be entered.")]
[JsonProperty("design_heat_recovery_water_flow_rate")]
public System.Nullable<float> DesignHeatRecoveryWaterFlowRate { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

[JsonProperty("heat_recovery_inlet_node_name")]
public string HeatRecoveryInletNodeName { get; set; } = "";
        

[JsonProperty("heat_recovery_outlet_node_name")]
public string HeatRecoveryOutletNodeName { get; set; } = "";
        

[JsonProperty("fuel_type")]
[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public Generator_InternalCombustionEngine_FuelType FuelType { get; set; } = (Generator_InternalCombustionEngine_FuelType)Enum.Parse(typeof(Generator_InternalCombustionEngine_FuelType), "Diesel");
        

[JsonProperty("heat_recovery_maximum_temperature")]
public System.Nullable<float> HeatRecoveryMaximumTemperature { get; set; } = (System.Nullable<float>)Single.Parse("80", CultureInfo.InvariantCulture);
    }
}
