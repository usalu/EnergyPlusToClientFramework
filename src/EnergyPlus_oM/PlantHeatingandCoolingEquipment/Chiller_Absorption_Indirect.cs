using System;
using System.ComponentModel;
using System.Globalization;
using BH.oM.Base;
using Newtonsoft.Json;

namespace BH.oM.Adapters.EnergyPlus.PlantHeatingandCoolingEquipment
{
    [Description(@"This indirect absorption chiller model is an enhanced model from the Building Loads and System Thermodynamics (BLAST) program. Chiller performance curves are generated by fitting catalog data to third order polynomial equations. The chiller capacity is a function of condenser, chilled water, and generator temperatures. The heat input is a function of part-load ratio, condenser temperature, and chilled water temperature.")]
    [JsonObject("Chiller:Absorption:Indirect")]
    public class Chiller_Absorption_Indirect : BHoMObject, IEnergyPlusClass
    {
        

        [JsonProperty("nominal_capacity")]
        public string NominalCapacity { get; set; } = "";
        

        [JsonProperty("nominal_pumping_power")]
        public string NominalPumpingPower { get; set; } = "";
        

        [JsonProperty("chilled_water_inlet_node_name")]
        public string ChilledWaterInletNodeName { get; set; } = "";
        

        [JsonProperty("chilled_water_outlet_node_name")]
        public string ChilledWaterOutletNodeName { get; set; } = "";
        

        [JsonProperty("condenser_inlet_node_name")]
        public string CondenserInletNodeName { get; set; } = "";
        

        [JsonProperty("condenser_outlet_node_name")]
        public string CondenserOutletNodeName { get; set; } = "";
        

        [JsonProperty("minimum_part_load_ratio")]
        public System.Nullable<float> MinimumPartLoadRatio { get; set; } = null;
        

        [JsonProperty("maximum_part_load_ratio")]
        public System.Nullable<float> MaximumPartLoadRatio { get; set; } = null;
        

        [JsonProperty("optimum_part_load_ratio")]
        public System.Nullable<float> OptimumPartLoadRatio { get; set; } = null;
        

        [Description("Used only when condenser flow rate is autosized.")]
        [JsonProperty("design_condenser_inlet_temperature")]
        public System.Nullable<float> DesignCondenserInletTemperature { get; set; } = (System.Nullable<float>)Single.Parse("30", CultureInfo.InvariantCulture);
        

        [Description("Provides warnings when entering condenser temperature is below minimum. Capacity " +
                     "is not adjusted when entering condenser temperature is below minimum.")]
        [JsonProperty("condenser_inlet_temperature_lower_limit")]
        public System.Nullable<float> CondenserInletTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("15", CultureInfo.InvariantCulture);
        

        [Description("Capacity is adjusted when leaving chilled water temperature is below minimum.")]
        [JsonProperty("chilled_water_outlet_temperature_lower_limit")]
        public System.Nullable<float> ChilledWaterOutletTemperatureLowerLimit { get; set; } = (System.Nullable<float>)Single.Parse("5", CultureInfo.InvariantCulture);
        

        [Description("For variable flow this is the max flow & for constant flow this is the flow.")]
        [JsonProperty("design_chilled_water_flow_rate")]
        public string DesignChilledWaterFlowRate { get; set; } = (System.String)"Autosize";
        

        [JsonProperty("design_condenser_water_flow_rate")]
        public string DesignCondenserWaterFlowRate { get; set; } = (System.String)"Autosize";
        

        [Description(@"Select operating mode for fluid flow through the chiller. ""NotModulated"" is for either variable or constant pumping with flow controlled by the external plant system. ""ConstantFlow"" is for constant pumping with flow controlled by chiller to operate at full design flow rate. ""LeavingSetpointModulated"" is for variable pumping with flow controlled by chiller to vary flow to target a leaving temperature setpoint.")]
        [JsonProperty("chiller_flow_mode")]
        public Chiller_Absorption_Indirect_ChillerFlowMode ChillerFlowMode { get; set; } = (Chiller_Absorption_Indirect_ChillerFlowMode)Enum.Parse(typeof(Chiller_Absorption_Indirect_ChillerFlowMode), "NotModulated");
        

        [JsonProperty("generator_heat_input_function_of_part_load_ratio_curve_name")]
        public string GeneratorHeatInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

        [JsonProperty("pump_electric_input_function_of_part_load_ratio_curve_name")]
        public string PumpElectricInputFunctionOfPartLoadRatioCurveName { get; set; } = "";
        

        [Description("Enter the generator inlet node name which connects this chiller to a steam or hot" +
                     " water plant, otherwise leave this field blank. Generator nodes are used to mode" +
                     "l heat input to the chiller.")]
        [JsonProperty("generator_inlet_node_name")]
        public string GeneratorInletNodeName { get; set; } = "";
        

        [Description("Enter the generator outlet node name which connects this chiller to a steam or ho" +
                     "t water plant, otherwise leave this field blank. Generator nodes are used to mod" +
                     "el heat input to the chiller.")]
        [JsonProperty("generator_outlet_node_name")]
        public string GeneratorOutletNodeName { get; set; } = "";
        

        [Description("Curve which shows the change in normalized capacity to changes in condenser tempe" +
                     "rature.")]
        [JsonProperty("capacity_correction_function_of_condenser_temperature_curve_name")]
        public string CapacityCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        

        [Description("Curve which shows the change in normalized capacity to changes in leaving chilled" +
                     " water temperature.")]
        [JsonProperty("capacity_correction_function_of_chilled_water_temperature_curve_name")]
        public string CapacityCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        

        [Description("Used when generator fluid type is hot water Curve which shows the change in norma" +
                     "lized capacity to changes in generator temperature.")]
        [JsonProperty("capacity_correction_function_of_generator_temperature_curve_name")]
        public string CapacityCorrectionFunctionOfGeneratorTemperatureCurveName { get; set; } = "";
        

        [Description("Curve which shows the change in normalized heat input to changes in condenser tem" +
                     "perature.")]
        [JsonProperty("generator_heat_input_correction_function_of_condenser_temperature_curve_name")]
        public string GeneratorHeatInputCorrectionFunctionOfCondenserTemperatureCurveName { get; set; } = "";
        

        [Description("Curve which shows the change in normalized heat input to changes in leaving chill" +
                     "ed water temperature.")]
        [JsonProperty("generator_heat_input_correction_function_of_chilled_water_temperature_curve_name")]
        public string GeneratorHeatInputCorrectionFunctionOfChilledWaterTemperatureCurveName { get; set; } = "";
        

        [Description(@"The Generator side of the chiller can be connected to a hot water or steam plant where the generator inlet and outlet nodes are connected to a plant loop. If the generator is not connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.")]
        [JsonProperty("generator_heat_source_type")]
        public Chiller_Absorption_Indirect_GeneratorHeatSourceType GeneratorHeatSourceType { get; set; } = (Chiller_Absorption_Indirect_GeneratorHeatSourceType)Enum.Parse(typeof(Chiller_Absorption_Indirect_GeneratorHeatSourceType), "Steam");
        

        [Description("For variable flow this is the max flow and for constant flow this is the flow.")]
        [JsonProperty("design_generator_fluid_flow_rate")]
        public string DesignGeneratorFluidFlowRate { get; set; } = "";
        

        [Description("Provides warnings when entering generator temperature is below minimum. Capacity " +
                     "is not adjusted when entering generator temperature is below minimum.")]
        [JsonProperty("temperature_lower_limit_generator_inlet")]
        public System.Nullable<float> TemperatureLowerLimitGeneratorInlet { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

        [Description("This field is not used when the generator inlet/outlet nodes are not specified or" +
                     " the generator is connected to a hot water loop.")]
        [JsonProperty("degree_of_subcooling_in_steam_generator")]
        public System.Nullable<float> DegreeOfSubcoolingInSteamGenerator { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
        

        [Description("This field is not used when the generator inlet/outlet nodes are not specified or" +
                     " the generator is connected to a hot water loop.")]
        [JsonProperty("degree_of_subcooling_in_steam_condensate_loop")]
        public System.Nullable<float> DegreeOfSubcoolingInSteamCondensateLoop { get; set; } = (System.Nullable<float>)Single.Parse("0", CultureInfo.InvariantCulture);
        

        [Description("Multiplies the autosized capacity and flow rates")]
        [JsonProperty("sizing_factor")]
        public System.Nullable<float> SizingFactor { get; set; } = (System.Nullable<float>)Single.Parse("1", CultureInfo.InvariantCulture);
    }
}